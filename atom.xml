<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CODE FRAMER BIGZ</title>
  
  <subtitle>Every little makes a mickel</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zengfanyu.top/"/>
  <updated>2018-01-06T08:56:15.222Z</updated>
  <id>http://zengfanyu.top/</id>
  
  <author>
    <name>BIGZ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>只因为在众多框架中多看了你一眼 RxJava （二） 从概念上理解 RxJava</title>
    <link href="http://zengfanyu.top/2018/01/06/RxJava2/"/>
    <id>http://zengfanyu.top/2018/01/06/RxJava2/</id>
    <published>2018-01-06T08:27:15.000Z</published>
    <updated>2018-01-06T08:56:15.222Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/cCjinS0.png" alt=""><br>摘要：一开始学习 RxJava ，觉得这东西特抽象，不好把握，但是在阅读了一些文章之后，也逐渐对 RxJaba 在宏观上有一个大概的认识，这一篇就记录一下我对 RxJava 最基础的理解。</p><a id="more"></a><font face="黑体"><h1 id="RxJava-是什么"><a href="#RxJava-是什么" class="headerlink" title="RxJava 是什么"></a>RxJava 是什么</h1><p>想要知道 RxJava 是什么，当然还是要去看看 RxJava 在 Github 上面的主页，毕竟官方的介绍是最准确的。</p><p>RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.</p><p>对，这就是官方对 RxJava 的解释，翻译一下：RxJava—JVM的反应式扩展。 是一个使用可观测的序列来组成异步的，基于事件序列的库。这么一说，我还是不能理解这个库到底是干嘛的，毕竟这是官方站在一定的高度上对 RxJava 的总结，就类似于在 Java 中的一句话：Everything is objects，刚开始接触 Java 时肯定也无法理解这句话的意思 。</p><p>既然官方的解释对于初学者的我来说这么难懂，那就先看看 Rx 是什么意思吧。Rx—全称是Reactive Extensions，直译过来就是响应式扩展。Rx<strong>基于观察者模式</strong>，他是一种编程模型，目标是提供一致的编程接口，帮助开发者更方便的处理异步数据流。ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。</p><p>这么一捋之后，我似乎有一点点理解了，它完成的功能似乎就是和 Google 官方的 AsyncTask Handler 类似，<strong>解决异步问题的</strong>，<strong>但是为什么大家都用它而不去使用 AsyncTask Handler 呢？ 这些也都是解决异步的呀？</strong> </p><p>答案是：<strong>简洁</strong>，逻辑上的简洁。</p><p>所以这里就一句话，<strong>RxJava 是用一种扩展的观察者模式解决异步问题的基于事件序列的库</strong>。</p><p>所以我就从观察者模式开始学习了。</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>那就要先说说观察者模式了。</p><p>打个比方来说，我们公司外面的馄饨店，每天中午好多人都回去哪里吃馄饨，大家过去了之后「点了一碗馄饨并付账」，就坐在那里等着老板叫号了。老板一叫：25号鲜肉小馄饨好了，那么一哥们听到之后，就立马「屁颠颠的跑过去端回来吃」，老板又叫：28号荠菜大馄饨好了，一妹子又「屁颠颠的跑过去端回来吃」。这个过程就是一个观察者模式。</p><p>这里涉及到三个对象，观察者：坐着等馄饨的吃货们。被观察者：馄饨店老板。订阅关系：点了一碗馄饨并付账。 还涉及到一个具体的反应过程：「屁颠颠的跑过去端回来吃」。</p><p>图解：</p><p><img src="https://i.imgur.com/AhpeI4B.png" alt=""></p><p>再说说在 Android 开发中会经常接触到的观察者模式，对一个 Button 的监听。Button 是被观察者，OnClickListener 是观察者，两者通过 setOnClickListener 方法达成订阅关系，那么此时 OnClickListener 就对 Button 的点击事件高度敏感了，只要 Button 以被用户点击，那么 OnClickListener 就会“立马”（这个立马，要打个引号，应为这里还涉及到事件的分发过程，不展开说了）做出反应，也就是调用它的 onClick 方法。</p><p>图解：</p><p><img src="https://i.imgur.com/6z9gunU.png" alt=""></p><p>其实上面两个过程我们也可以这样理解，<strong>观察者和被观察者之间先有订阅关系，然后被观察者发出了一个事件，然后观察者接收到这个事件之后，做出了响应</strong>。</p><p>在从事件出发的角度捋捋上面两个过程：</p><p>吃货去馄饨店里「点了一碗馄饨并付账」，那么就<strong>订阅了馄饨店老板发出的 HuntunReady 事件</strong>。当馄饨店老板<strong>发出了一个 HuntunReady 的事件</strong>（图中没有画出）的时候，吃货A<strong>接收到这个事件</strong>并做出反应，也就是<strong>调用了 onHuntunReady 方法去处理</strong>,具体的处理逻辑就是：「屁颠颠的跑过去端回来吃」（图中也没有画出）。</p><p>OnClickListener 通过 setOnclickListener 订阅 Button 的 Click 事件，当Button 发出了一个 Click 的事件， OnClickListener 接受到了这个事件，就要做出了反映，也就是调用 onClick 方法，执行当中的逻辑。</p><p>对照表：</p><p><img src="https://i.imgur.com/7HYKYLy.png" alt=""></p><p>那么我们把这个概念抽象为观察者，被观察者，订阅，那么图应该是这样的：</p><p><img src="https://i.imgur.com/E31Ycqd.png" alt=""></p><h2 id="RxJava-当中的观察者模式"><a href="#RxJava-当中的观察者模式" class="headerlink" title="RxJava 当中的观察者模式"></a>RxJava 当中的观察者模式</h2><p>有了上面两个例子的铺垫，这里就推导出，RxJava 就是 Observer 和 Observable 两者先发生订阅关系，然后 Observable 发出事件序列，Observer 接受事件并响应处理。</p><p>但之前又说到 RxJava 使用的是一种扩展的观察者模式，那么跟上面两个例子中肯定是有不同的。它扩展之后的形式如下：</p><p><img src="https://i.imgur.com/HYAnpoS.png" alt=""></p><h3 id="区别（一）"><a href="#区别（一）" class="headerlink" title="区别（一）"></a>区别（一）</h3><p>看的出来， RxJava 中的观察者模式跟传统观察者模式比起来，事件的回调方法除了普通事件 onNext（相当于上面例子中的 onClick 和 onHuntunReady）之外，还定义了两个特殊的事件， onCompleted()， onError();</p><p>这三个事件遵从一定的规则：</p><ol><li>Observable 可以发送无限个 onNext 事件，Observer 可以接受无限个 onNext 事件。</li><li>当 Observable 发送了 onCompleted 或者 onError 序列之后，之后的事件序列仍然会发送，但是 Observer 这边在接收到 onCompleted 或者 onError 事件之后，是不会在继续接收之后的事件序列的。</li><li>Observable 可以不发送 onCompleted 或者 onError 事件。</li><li>onCompleted 和 onError 事件必须互斥。也就是说在一个事件序列中，要么是没有 onCompleted 和 onError 事件，要么有且只能有其中一个。</li></ol><h3 id="区别（二）"><a href="#区别（二）" class="headerlink" title="区别（二）"></a>区别（二）</h3><p>就是 Observable 在发送事件到 Observer 的过程中，多了一个 Operate 过程，这个操作就是对事件进行一系列的处理，然后再发送至 Observer。要说到这个操作就不得不提 Java8 当中的 Stream 和它对其中每一个元素进行的函数式操作。</p><p>我们用“过滤”这个操作来打个比方，</p><p>&gt;<br>&gt;</p><blockquote><p>就像下面这幅图中画的那样，我有一杯混合着大大小小石子的蓝色的水。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_1.jpg" alt=""></p><p>现在按照我们关于“流”的定义，我用下图中的方法将水转化成“流”。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_2.jpg" alt=""></p><p>为了让水变成水流，我把水从一个杯子倒进另一个杯子 里。现在我想去掉水中的大石子，所以我造了一&gt;</p><p>个可以帮我滤掉大石子的过滤器。“大石子过滤器”如下图所示。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_3.jpg" alt=""></p><p>现在，将这个过滤器作用在水流上，这会得到不包含大石子的水。如下图所示。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_4.jpeg" alt=""></p><p>接下来，我想从水中清除掉所有石子。已经有一个过滤大石子的过滤器了，我们需要造一个新的来过滤&gt;小石子。“小石子过滤器”如下图所示。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_5.jpg" alt=""></p><p>像下图这样，将两个过滤器同时作用于水流上。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_6.png" alt=""></p><p>接下来，我想把水的颜色从蓝色变成黑色。为了达到这个目的，我需要造一个像下图这样的“水颜色转换器（mapper）”。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_7.jpg" alt=""></p><p>像下图这样使用这个转换器。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_8.jpg" alt=""></p><p>把水转换成水流后，我们做了很多事情。我先用一个过滤器去掉了大石子，然后用另一个过滤器去掉了&gt;小石子， 最后用一个转换器（map）把水的颜色从蓝色变成黑色。</p><p>这个过程就是 Java8 当中对流的操作的一个具体的体现。</p></blockquote><p>好了，现在可以回到 Rxjava 当中了。</p><p>RxJava 当中的 operate 过程也类似于上面的过滤过程，在 Observable 发出事件之后，可以利用「操作符」对事件进行一系列的操作，包括但不仅仅局限于 “过滤”、“合并”、“线程切换”等等，得到我们最终想要的“过滤”后的事件。</p><p>恩，这就是 RxJava 当中最基础的东西了，先对 RxJava 有一个宏观上的认识，后面才好继续学习。</p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cCjinS0.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;摘要：一开始学习 RxJava ，觉得这东西特抽象，不好把握，但是在阅读了一些文章之后，也逐渐对 RxJaba 在宏观上有一个大概的认识，这一篇就记录一下我对 RxJava 最基础的理解。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://zengfanyu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>只因为在众多框架中多看了你一眼 RxJava （三） RxJava 最基础的使用</title>
    <link href="http://zengfanyu.top/2018/01/05/RxJava3/"/>
    <id>http://zengfanyu.top/2018/01/05/RxJava3/</id>
    <published>2018-01-05T13:27:15.000Z</published>
    <updated>2018-01-06T08:47:42.017Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/cCjinS0.png" alt=""></p><p>摘要：上一篇理解了概念之后，这里就要用代码来实现以下了，这一篇只涉及到 RxJava 的最基础的用法，不涉及高级特性。</p><font face="黑体"><h1 id="RxJava的基本用法"><a href="#RxJava的基本用法" class="headerlink" title="RxJava的基本用法"></a>RxJava的基本用法</h1><p>RxJava 的基本实现,总结起来,主要有三点:</p><ol><li>创建 Observer</li><li>创建 Observable</li><li>订阅</li></ol><h2 id="创建-Observer-观察者"><a href="#创建-Observer-观察者" class="headerlink" title="创建 Observer 观察者"></a>创建 Observer 观察者</h2><p><strong>Observer 即观察者,它决定当事件发生的时候,会有怎么样的行为</strong>.RxJava 中 Observer 接口的实现方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Item: "</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Completed!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Error!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>除了 Observer 接口之外, Rxjava 当中还内置了一个实现了 Observer 接口的抽象类, Subscriber , Subscriber 对 Observer 做了扩展,但是两者的使用方式是完全一样的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Item: "</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Completed!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Error!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>既然 观察者的作用是 决定当事件触发时,会有什么样的行为,那么我们能不能直接有方法定义出行为就可以了呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="comment">// onNext()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(tag, s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//Action1接口是RxJava当中定义的,其中只有一个call(T param)方法,这个call方法有1个参数,无返回值</span></div><div class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">    <span class="comment">// onError()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">        <span class="comment">// Error handling</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//Action0接口是RxJava当中定义的,其中只有一个call()方法,这个call方法无参数无返回值</span></div><div class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</div><div class="line">    <span class="comment">// onCompleted()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"completed"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>至于 onNextAction onErrorAction onCompletedAction 如何使用,为什么几个 Action 就能代表 Subscriber 的 onNext onError onCompleted 方法呢 ? 下面 Subscribe 订阅的时候说.</p><h2 id="创建-Observable-被观察者"><a href="#创建-Observable-被观察者" class="headerlink" title="创建 Observable 被观察者"></a>创建 Observable 被观察者</h2><p><strong>Observable 指的是被观察者,它决定事件什么时候触发,以及触发何种事件</strong>. RxJava 用 <strong>create()</strong> 方法来创建一个 Observable ,并为它定义触发规则.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        subscriber.onNext(<span class="string">"Java"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"C++"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"Python"</span>);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>这里参数传入的是 OnSubscribe 对象,这个对象会被存储在 Observable 中,充当一个<strong>计划表</strong>的角色,具体的计划内容就是 call 方法中的实现.</li><li>call() 方法的参数 Subscriber 就是观察者,两者关系的建立看下面.</li><li>当 Observable 被订阅的时候, OnSubscribe 的 call 方法会被自动调用,然后去执行计划,上面的代码的计划就是执行三次 onNext() ,然后执行一次 onCompleted().</li><li>到这里就实现了事件由被观察者向观察者的传递.</li></ul><p>看上面的代码,被观察者的作用就是触发事件,那么可不可以有一种类似于 Java8 当中的便捷构造流的方法一样(Stream.of(T…)),直接将事件按照顺序创建出来就行了?当然有</p><ul><li>just(T…)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable observable = Observable.just(<span class="string">"Java"</span>, <span class="string">"C++"</span>, <span class="string">"Python"</span>);</div><div class="line"></div><div class="line"><span class="comment">//上述代码等价于创建被观察者,然后依次调用了观察者的 onNext("Java"), onNext("C++"),onNext("Python"),onCompleted()</span></div></pre></td></tr></table></figure><ul><li>from(T[]) / from(Iterable&lt;? extends T&gt;) : 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String[] words = &#123;<span class="string">"Java"</span>, <span class="string">"C++"</span>, <span class="string">"Python"</span>&#125;;</div><div class="line">Observable observable = Observable.from(words);</div><div class="line"><span class="comment">// 效果和上面一样</span></div></pre></td></tr></table></figure><h2 id="Subscribe-订阅"><a href="#Subscribe-订阅" class="headerlink" title="Subscribe 订阅"></a>Subscribe 订阅</h2><p>之前创建了 Observer 和 Observable 之后,就要将两者关联起来了,这就相当于创建了 Button 和 OnClickListener 之后,需要有一个 setOnClickListener 方法,将两者关联起来,这样当 Button 上有点击事件发生的时候,它就回去调用 OnClickListener 的 onClick 方法.这里的 Subscribe 订阅起的作用和 setOnClickListener 是一样的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">observable.subscribe(observer);</div><div class="line"><span class="comment">//或者</span></div><div class="line">observable.subscribe(subscriber);</div><div class="line"><span class="comment">//这个过程就类似于</span></div><div class="line"><span class="comment">//button.setOnClickListener(mOnClickListener);</span></div></pre></td></tr></table></figure><p>Observable.subscribe(Subscriber) 的内部实现是这样的（仅核心代码）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Subscription <span class="title">subscribe</span><span class="params">(Subscriber subscriber)</span> </span>&#123;</div><div class="line">    subscriber.onStart();</div><div class="line">    onSubscribe.call(subscriber);</div><div class="line">    <span class="keyword">return</span> subscriber;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>订阅过程做三件事:</p><ol><li>调用 subscriber.onStart() 做预处理工作.</li><li>调用 onSubscribe.call(subscriber) 方法.(这也就是为什么在上面创建被观察者时,我们说 「<em>当 Observable 被订阅的时候, OnSubscribe 的 call 方法会被自动调用,然后去执行计划</em>.」)</li><li>将传入的 subscriber 返回,便于 unSubscribe().</li></ol><p>现在可以说说之前在创建 Observer  时,创建的三个 Action 了.</p><p>除了 subscribe(Observer) 和 subscribe(Subscriber) ，subscribe() 还支持不完整定义的回调，RxJava 会自动根据定义创建出 Subscriber 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 来定义 onNext()</span></div><div class="line">observable.subscribe(onNextAction);</div><div class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></div><div class="line">observable.subscribe(onNextAction, onErrorAction);</div><div class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></div><div class="line">observable.subscribe(onNextAction, onErrorAction, onCompletedAction);</div></pre></td></tr></table></figure><p>我们观察可以发现,</p><ul><li>Subscriber 的 onNext , onError 方法的返回类型是 void , 并带有一个参数,分别是 String , Throwable 而 Action1 接口里面的 call 方法也是有一个参数 T ,返回类型是 void.</li><li>Subscriber 的 onCompleted 方法的返回类型是 void, 没有参数,而 Action0 接口里的 call 方法也是没有参数的, 并且返回值为 void.</li></ul><p>这么一总结,上面这个操作是不是就像 java8 当中的 lamuda 表达式了 ?   <a href="http://zengfanyu.top/2017/11/13/Java8---Lambda%20Expressions/">我在学习lambda表达式时总结的一篇文章</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Before Java8</span></div><div class="line">mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"Button clicked!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"><span class="comment">//In java8 way    </span></div><div class="line">   mButton.setOnClickListener((v)-&gt; &#123;</div><div class="line">       System.out.println(<span class="string">"Button clicked!"</span>);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure><p>注意看下面的 lambda 表达式中的 (V) ,这里的 v 形参, 就是代表的是上面回调方法中的 view ,后面的 -&gt;System.out.println(“Button clicked!”) ,就是用于定义 onClick() 的方法体的.</p><p>确实类似,这里相当于其他语言中的 「闭包」.</p><p>到这里,就已经说完了 RxJava 当中最基础的三个角色了. 那么也可以简单的使用一下啦.</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>1)打印一串字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="string">"Java"</span>,<span class="string">"C++"</span>,<span class="string">"Python"</span>)</div><div class="line">  .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;()&#123;</div><div class="line"><span class="meta">@override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String languageName)</span></span>&#123;</div><div class="line">    log.d(<span class="string">"RxJava"</span>,<span class="string">"languageName"</span>);</div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>2)根据 drawable 资源名, 取出 drawable,然后显示到 imageView 上.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">int</span> drawableRes = ...;</div><div class="line">ImageView imageView = ...;</div><div class="line">Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Drawable&gt; subscriber)</span> </span>&#123;</div><div class="line">        Drawable drawable = getTheme().getDrawable(drawableRes));</div><div class="line">        subscriber.onNext(drawable);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">        imageView.setImageDrawable(drawable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Toast.makeText(activity, <span class="string">"Error!"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cCjinS0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;摘要：上一篇理解了概念之后，这里就要用代码来实现以下了，这一篇只涉及到 RxJava 的最基础的用法，不涉及高级特性。&lt;/p&gt;
&lt;font face=&quot;黑体&quot;
      
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://zengfanyu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>只因为在众多框架中多看了你一眼 RxJava （一）</title>
    <link href="http://zengfanyu.top/2018/01/04/Rxjava1/"/>
    <id>http://zengfanyu.top/2018/01/04/Rxjava1/</id>
    <published>2018-01-04T13:27:15.000Z</published>
    <updated>2018-01-06T08:47:39.021Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/cCjinS0.png" alt=""></p><font face="黑体"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>年关将近,部门里任务也多了起来,最近一个月多都在忙着部门项目,因为突然接手了三个项目,虽然已经开发了一个版本,但是我还是花了很多时间去消化现有的版本,然后接着迭代开发,昨天上线了,现在有了空余的时间,准备接着写博客了。</p><p>之前在写 <a href="http://zengfanyu.top/2017/10/20/MVP1/">MVP 系列第一篇文章</a>的时候就立了一个 <code>Flag</code>， 要学习 <code>MVP</code>、<code>okHttp</code>、<code>Rxjava</code>、<code>Retrofit2</code>、<code>Dagger2</code>，然后用这些流行开源框架撸一个 <code>APP</code>。现在 <code>MVP</code> 系列算是有了基础的了解了，并在学 MVP 的时候，把 <code>OkHttp</code> 也封装着在 <code>Model</code> 层使用，<code>Retrofit2</code> 也零零散散看过一些 <code>Demo</code> ，<code>Dagger2</code> 之前也总结了一篇文章 <a href="http://zengfanyu.top/2017/11/04/Dagger/">Dagger2基础内容归纳</a>。剩下比较难啃的就是 <code>RxJava了</code>。这个任务已经被我添加到我 <code>2018</code> 年的计划当中了。</p><p>在两年前刚开始接触到 <code>RxJava</code> 的时候，是被它的链式调用所吸引，子线程操作、主线程操作、线程切换、事件变换在链式调用里一气呵成，再也看不到 <code>AsyncTask</code> 中繁琐的各种方法，同时也被它的各种高级特性所迷惑，各种操作符，各种闭包特性。之前在学校里的时候就看过「扔物线」大神的经典入门文章<a href="https://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a> ，但是当时忙于找工作、实习，之后忙着毕业论文、毕业疯，一直没有好好实践，现在准备好好学习一下时发现，已经到了 <code>RxJava2</code> 的时代了，之前「扔物线」大神的那篇是基于 <code>Rxjava1</code> 写的，是先学学 <code>RxJava1</code> 再去学习 <code>2</code> 好呢，还是直接去学习 <code>2</code> ，思来想去感觉这个问题就像： 学习 <code>java</code> 之前要先学习 <code>C</code> 吗？ 抛开别的不说，「扔物线」的那篇入门文章是质量是相当高的，深入浅出，对于我这样的初学者来说，学习的价值是十分大的，然后在看完这篇 <a href="https://www.jianshu.com/p/850af4f09b61" target="_blank" rel="external">RxJava2 vs RxJava1</a> 对比的文章之后，<strong>我觉得还是很有必要去了解一下 <code>Rxjava1</code> 的，这样才能知道 <code>2</code> 改进在哪里，为什么这么改进， 是因为 <code>1</code> 中使用有什么问题。</strong></p><p>并且后来在学习了 <code>java8</code> 当中的 <code>Lambda</code> 以及 <code>Streams</code> 之后发现，<code>RxJava</code> 当中很多实现都和其十分相似，比如说「闭包」特性的体现，和 <code>Stream</code> 当中对元素的挨个处理再返回，以及函数式编程的思想。</p><h1 id="刚接触RxJava的情景还原"><a href="#刚接触RxJava的情景还原" class="headerlink" title="刚接触RxJava的情景还原"></a>刚接触RxJava的情景还原</h1><p>说说最开始接触到 <code>RxJava</code> 的代码吧，应该是 <code>2016</code> 年的某一天。</p><p>一开始看到的是下面这两段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//被观察者</span></div><div class="line">Observable&lt;String&gt; myObservable = Observable.create(</div><div class="line">    <span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; sub)</span> </span>&#123;</div><div class="line">            sub.onNext(<span class="string">"Hello, world!"</span>);</div><div class="line">            sub.onCompleted();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"><span class="comment">//观察者</span></div><div class="line">Subscriber&lt;String&gt; mySubscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123; System.out.println(s); &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//订阅</span></div><div class="line">myObservable.subscribe(mySubsciber);</div></pre></td></tr></table></figure><p>好了，一个简单的使用 <code>RxJava</code> 的代码就完成了，最初我看到这段代码，心中就是</p><p><img src="https://i.imgur.com/sp3uNa4.jpg" alt=""></p><p>打印一个字符串搞这个复杂？？ 这是靠代码量算工资吗？？？</p><p>后来人家说，上面那样写太复杂了，正确姿势：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="string">"Hello, world!"</span>)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">              System.out.println(s);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><p>人家说这样跟上面那一梭代码功能是一样的。 后来又有人说，这还是太复杂，要简化一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="string">"Hello, world!"</span>)</div><div class="line">    .subscribe(s -&gt; System.out.println(s));</div></pre></td></tr></table></figure><p>我的内心：</p><p><img src="https://i.imgur.com/r1DOkxd.jpg" alt=""></p><p>之后我知道，原来这段单代码使用了 <code>Java8 Lambda</code> 表达式，利用函数式编程的优势，简化了程序中余的代码，所以在学习 <code>RxJava</code> 之前我应该先去学习一下 <code>Java8 lambda</code> 。总结文章：<a href="http://zengfanyu.top/2017/11/13/Java8---Lambda%20Expressions/">新姿势学习之Java8—Lambda Expressions</a>。</p><p>我以为这就行了，但是接下来看到的代码更是让我更加坚定。。。</p><p>要想在 <code>Subscriber</code> 当中打印出 <code>Observable</code> 发送出来的每一个字符串后面加上 <code>&quot;-ZFY&quot;</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="string">"Hello, world!"</span>)</div><div class="line">    .map(<span class="keyword">new</span> Func1&lt;String, String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> s + <span class="string">" -ZFY"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(s -&gt; System.out.println(s));</div></pre></td></tr></table></figure><p>同样的用 Lambda 简化；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="string">"Hello, world!"</span>)</div><div class="line">    .map(s -&gt; s + <span class="string">" -ZFY"</span>)</div><div class="line">    .subscribe(s -&gt; System.out.println(s));</div></pre></td></tr></table></figure><p>然后我突然又想输出 接受的字符串拼接上”-ZFY” 的HashCode 的字符串， 那么可以这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="string">"Hello, world!"</span>)</div><div class="line">    .map(s -&gt; s.hashCode())</div><div class="line">    .map(i -&gt; Integer.toString(i))</div><div class="line">    .subscribe(s -&gt; System.out.println(s));</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/RxHG48a.jpg" alt=""></p><p>到这里还没有涉及到线程切换的问题，还没有涉及到和 <code>Retrofit</code> 配合使用，虽然那时候我都不知道 这个 <code>map</code> 是干嘛的，总之觉得这个操作很 NB ，但是单单就上面那些特性，就足以对我产生强大的吸引力。</p><p>就在这一刻，我决定，<code>Lambda</code> 、<code>Stream</code>、函数式编程、<code>RxJava</code> 我也要学，我也要写出上面那样简洁高效的代码。</p><p>这就是我刚看到 <code>RxJava</code> 的情景。</p><p></p><p>到现在 <code>Java8 Lambda Stream</code> 函数式编程这些相关的， 我已经学习了一阵子了，该开始 <code>RxJava</code> 了。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cCjinS0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;font face=&quot;黑体&quot;&gt;


&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://zengfanyu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android中的Window、WindowManager以及悬浮框视频播放的实现</title>
    <link href="http://zengfanyu.top/2018/01/02/FloatWindow/"/>
    <id>http://zengfanyu.top/2018/01/02/FloatWindow/</id>
    <published>2018-01-02T13:27:15.000Z</published>
    <updated>2018-01-06T04:15:32.416Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/LmSCVR5.jpg" alt=""></p><p><em>摘要:近日看公司直播项目,其中有一个功能就是退出某房间之后,直播界面会以悬浮窗的形式出现,并且可以拖动悬浮窗到界面中任意位置,点击悬浮框之后,又可以回到房间中继续观看直播。现在这个功能在主流的直播或者视频类软件中都可以看到，比如：某鱼、某猫、某珠、某牙、某tube。当然了，某tobe当中的悬浮窗效果更佳炫酷，可以炫酷地从悬浮框中将视频主界面慢慢拖动出来，具体效果下载某tube就能看到。这篇文章就记录一下传统悬浮窗播放视频的原理，以及悬浮框涉及到的 Window 和  WindowManager 的相关知识。</em></p><a id="more"></a><font face="黑体"><h2 id="Window-和-WindowManager-概述"><a href="#Window-和-WindowManager-概述" class="headerlink" title="Window 和 WindowManager 概述"></a>Window 和 WindowManager 概述</h2><p><code>Window</code> 表示一个窗口的概念，在日常开发中直接接触到 <code>Window</code> 的机会并不多，但是在某些特殊的时候，我们需要在桌面上显示一个类似悬浮框的东西（360的小火箭、360手机助手最新版当中桌面上显示的枫叶），那么这种效果就需要用 <code>Window</code> 来实现。<code>Window</code> 是一个抽象类，它的具体实现类是 <code>PhoneWindow</code>，创建一个 <code>Window</code> 跟简单，只需通过 <code>WindowManager</code> 即可完成。<br><code>WindowManager</code> 是完结访问 <code>Window</code> 的入口，<code>Window</code> 的具体实现位于 <code>WindowManagerService</code> 中<code>，</code>WindowManager 和 <code>Window</code> 打交道是一个 <code>IPC</code> 过程。<br><code>Android</code> 中的<strong>所有</strong>视图都是通过 <code>Window</code> 来呈现的，不管是 <code>Activity</code> 、 <code>Dialog</code> 还是 <code>Toast</code>，他们的实际视图都是附加在 <code>Window</code> 上的，因此，<strong>Window 实际是 View 的直接管理者</strong>。比如说，在事件分发的过程中，点击事件首先是由 <code>Window</code> 传递给 <code>DecorView</code>，然后再由 <code>DecorView</code> 往子 <code>View</code> 分发，最终分发到能够消耗这个点击事件的 <code>View</code> 当中；并且 <code>Activity</code> 生命周期方法 <code>onCreate</code> 中经常调用的 <code>setContentView</code> 方法底层也是通过 <code>Window</code> 来完成的。</p><h2 id="创建一个-Window"><a href="#创建一个-Window" class="headerlink" title="创建一个 Window"></a>创建一个 Window</h2><p>上面概述中提到，要想创建一个 <code>Window</code> ，只需通过 <code>WindowManager</code> 即可实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWindow</span><span class="params">()</span></span>&#123;</div><div class="line">        Button button = <span class="keyword">new</span> Button(getApplicationContext());</div><div class="line">        button.setText(<span class="string">"动态添加"</span>);</div><div class="line">        WindowManager.LayoutParams layoutParams = <span class="keyword">new</span> WindowManager.LayoutParams(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT, <span class="number">0</span>, <span class="number">0</span>, PixelFormat.TRANSPARENT);</div><div class="line">        layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL</div><div class="line">                | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</div><div class="line">                | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;</div><div class="line">        layoutParams.gravity = Gravity.LEFT | Gravity.TOP;</div><div class="line">        layoutParams.x= <span class="number">600</span>;</div><div class="line">        layoutParams.y= <span class="number">600</span>;</div><div class="line">        getWindowManager().addView(button, layoutParams);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>上面的代码就将一个 <code>Button</code> 添加到屏幕上 <code>（600,600）</code> 的位置，对 <code>WindowMnager.Layoutparams</code> 常用参数做说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LayoutParams</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> xpos, <span class="keyword">int</span> ypos, <span class="keyword">int</span> _type,<span class="keyword">int</span> _flags, <span class="keyword">int</span> _format)</span> </span>&#123;</div></pre></td></tr></table></figure><ul><li><p><code>w ,h</code> 表示 <code>Window</code> 的宽高，可以通过构造方法传入，也可以在创建好 <code>WindowManager.Layoutparams</code> 之后，直接给其 <code>width</code> ，<code>height</code> 成员变量赋值。</p><p></p></li><li><p><code>xpos，ypos</code> 表示 <code>Window</code> 在手机屏幕上的绝对位置，与 <code>w，h</code> 一样，这两个值也可以在实例化 <code>WindowManager.Layoutparams</code> 之后给 <code>x，y</code> 成员变量属性赋值，要向更改悬浮窗的位置，就是改变的这两个参数</p><p></p></li><li><p><code>_type</code> 表示的是 <code>Window</code> 的类型，<code>Window</code> 有三种类型：</p><p></p><ol><li>应用 <code>Window</code> ，这个 <code>Window</code> 对应着一个 <code>Activity</code>，层级范围（1~99）</li><li>子 <code>Window</code> ， 不能单独存在，它需要附属在一个特定的父 <code>Window</code> 中，比如说 <code>Dialog</code> ，层级范围（1000~1999）</li><li>系统 <code>Window</code> ，这是需要申明权限才能够创建的 <code>Window</code>， 比如说常用的 Toast ,层级范围（2000~2999）。</li></ol></li></ul><p><code>TYPE_SYSTEM_OVERLAY（2006），TYPE_TOAST（2005），TYPE_PHONE（2002）</code></p><p></p><ul><li><p><code>Flags</code> 参数表示 <code>Window</code> 的属性，它可以有很多选项，通过这些选项可以控制 <code>Window</code> 的显示特性，比较常用的有：</p><p><br>  <strong>1. FLAG_NOT_FOCUSABLE</strong><br>  表示 <code>Window</code> 不需要获取焦点，也不需要接收各种输入事件，此标记会同时启用 <code>FLAG_NOT_TOUCH_MODE</code>，事件会直接传递给下层的具有焦点的 <code>Window</code>。</p><p>  <strong>2. FLAG_NOT_TOUCH_MODE</strong><br>  此模式下,系统会将当前 <code>Window</code> 区域以外的点击事件传递给底层的 <code>Window</code> ，当前 <code>Window</code> 区域以内的会自己处理，一般来说这个标记都需要开启，不然其他的 <code>Window</code> 接收不到单击事件。</p><p>  <strong>3. FLAG_SHOW_WHEN_LOCKED</strong><br>  让 <code>Window</code> 显示在锁屏界面上。</p></li></ul><p><code>WindowManager</code> 常用的方法就三个：添加 <code>View</code>，删除 <code>View</code>，更新 <code>View</code> 。这三个方法定义在 <code>ViewManager</code> 中，<code>WindowManager</code> 继承了 <code>ViewManager</code>。想做悬浮窗播放视频，就需要用到这三个方法，其中悬浮框随手指拖拽而移动就是在 <code>onTouchEvent</code> 回调中调用 <code>updateView</code> 的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewManager</span></span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span></span>;</div><div class="line"> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateViewLayout</span><span class="params">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span></span>;</div><div class="line"> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeView</span><span class="params">(View view)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="悬浮框实现要点"><a href="#悬浮框实现要点" class="headerlink" title="悬浮框实现要点"></a>悬浮框实现要点</h2><ol><li><code>WindowManager</code> 和 <code>Window</code> 相关，用于展示悬浮框。</li><li>要实现悬浮框，那么就会涉及到权限问题，从 <code>Andtoid 6.0</code> 开始，需要在运行时去获取悬浮窗的权限。</li><li>启动悬浮窗的组件（<code>Activity</code> 或者 <code>Fragment or else</code>）在启动了悬浮窗之后，自己本身肯定是要关闭的，所以这里悬浮框就很适合在 <code>Service</code> 中管理。</li><li>悬浮窗一般是可以与用户交互的，那么这里就会涉及到触摸反馈。</li></ol><h3 id="后续代码前提"><a href="#后续代码前提" class="headerlink" title="后续代码前提"></a>后续代码前提</h3><ul><li>播放器播放需要一个 <code>m3u8</code> url,公司自研播放器代码不贴出。</li><li>当前 <code>WatchVideoActivity</code> 正在全屏播放，此时点击了“悬浮窗播放”按钮。 </li><li>这里的悬浮窗播放指的是点播,非直播情况</li></ul><h3 id="清单文件中的权限"><a href="#清单文件中的权限" class="headerlink" title="清单文件中的权限"></a>清单文件中的权限</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SYSTEM_ALERT_WINDOW"</span> /&gt;</span></div></pre></td></tr></table></figure><h3 id="检查权限并启动Service"><a href="#检查权限并启动Service" class="headerlink" title="检查权限并启动Service"></a>检查权限并启动Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//悬浮窗播放按钮</span></div><div class="line">      <span class="keyword">final</span> Button button_litter_player = (Button) findViewById(R.id.button_litter_player);</div><div class="line">      button_litter_player.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"><span class="comment">//此处为检查用户是否已经授权我们的应用悬浮窗权限</span></div><div class="line">              <span class="keyword">boolean</span> check = ConstInfo.hasPermissionFloatWin(getApplicationContext());</div><div class="line">              <span class="keyword">if</span> (!check) &#123;</div><div class="line">                  Toast.makeText(getApplication(), <span class="string">"悬浮窗权限未打开，请去打开应用悬浮窗权限"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="comment">//FloatWindowService 就是用于管理悬浮窗的 Service</span></div><div class="line">                  Intent intent = <span class="keyword">new</span> Intent(WatchVideoActivity.<span class="keyword">this</span>, FloatWindowService.class);</div><div class="line">                  Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">                  <span class="comment">//当前播放视频的m3u8地址</span></div><div class="line">                  bundle.putString(<span class="string">"m3u8Url"</span>, getCurrentUrl());                              </div><div class="line">                 <span class="comment">//主要是记录当前播放的位置,这样在悬浮窗出现后,可以接着之前全屏播放的点继续播放</span></div><div class="line">                  bundle.putInt(EXTRA_VIDEO_CURRENT_POSITION, mVideoView.getCurrentPosition());</div><div class="line">                  finish();</div><div class="line">              &#125;</div><div class="line"></div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure><p>其中检查权限的方法是发射调用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 判断是否开启浮窗权限,api未公开，使用反射调用</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasPermissionFloatWin</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line"></div><div class="line">    Log.d(ConstInfo.TAG, <span class="string">"hasAuthorFloatWin android.os.Build.VERSION.SDK_INT="</span>+android.os.Build.VERSION.SDK_INT);</div><div class="line">    <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &lt; <span class="number">19</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        AppOpsManager appOps = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);</div><div class="line">        Class c = appOps.getClass();</div><div class="line">        Class[] cArg = <span class="keyword">new</span> Class[<span class="number">3</span>];</div><div class="line">        cArg[<span class="number">0</span>] = <span class="keyword">int</span>.class;</div><div class="line">        cArg[<span class="number">1</span>] = <span class="keyword">int</span>.class;</div><div class="line">        cArg[<span class="number">2</span>] = String.class;</div><div class="line">        Method lMethod = c.getDeclaredMethod(<span class="string">"checkOp"</span>, cArg);</div><div class="line">        <span class="comment">//24是浮窗权限的标记</span></div><div class="line">        <span class="keyword">return</span> (AppOpsManager.MODE_ALLOWED == (Integer) lMethod.invoke(appOps, <span class="number">24</span>, Binder.getCallingUid(), context.getPackageName()));</div><div class="line"></div><div class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="FloatWindowService"><a href="#FloatWindowService" class="headerlink" title="FloatWindowService"></a>FloatWindowService</h3><blockquote><p>Service 详情戳 <a href="https://developer.android.com/guide/components/services.html?hl=zh-cn" target="_blank" rel="external">Android Developer # Service Guide</a></p></blockquote><ol><li><code>Service</code> 的 <code>onCreate</code> 方法只会在 <code>Service</code> 首次创建的时候调用一次,所以在这个方法中创建悬浮框的实例比较适合,因为只支持一个悬浮窗</li><li><code>onStartCommond</code> 方法在每次调用 <code>startService</code> 方法时都会调用,所以在这个方法中适合检查悬浮窗的状态,比如:是否需要退出悬浮窗,还是直接开始在悬浮窗中继续播放等等.</li><li><code>onDestroy</code> 方法中就直接销毁悬浮窗实例即可.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatWindowService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"==FloatWindowService=="</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_PLAY = <span class="string">"com.xxxx.testxxxsdk.FloatWindowService.ACTION_PLAY"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_EXIT = <span class="string">"com.xxxx.testxxxsdk.FloatWindowService.ACTION_EXIT"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PLAY_TYPE = <span class="string">"com.xxxx.testxxxsdk.FloatWindowService.PLAY_TYPE"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_VIDEO_LIST = <span class="string">"list"</span>;</div><div class="line"><span class="comment">//用于标记当前悬浮窗时候已经显示</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> mIsFloatWindowShown = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">//悬浮窗实例</span></div><div class="line">    <span class="keyword">private</span> FloatWindow mFloatWindow;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        LogUtil.d(TAG,<span class="string">"[onCreate] "</span> + <span class="string">"FloatWindowService onCreate"</span>);</div><div class="line">        <span class="comment">//这里将Service本身传入悬浮窗,是为了实现点击悬浮窗重新进入WatchVideoActivity 全屏播放,且提供 Context,</span></div><div class="line">        mFloatWindow = <span class="keyword">new</span> FloatWindow(<span class="keyword">this</span>);</div><div class="line">        mFloatWindow.createFloatView();</div><div class="line">        mIsFloatWindowShown = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        LogUtil.d(TAG, <span class="string">"[onStartCommand] "</span> + <span class="string">"FloatWindowService onStart"</span>);</div><div class="line">        <span class="comment">//此处为特殊逻辑处理,和项目需求相关,不做解释</span></div><div class="line">        <span class="keyword">if</span> (intent.hasExtra(ACTION_EXIT)) &#123;</div><div class="line">            stopSelf();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//在这里就拿到之前点击悬浮窗按钮时传递过来的数据,包括播放m3u8地址和当前播放位置等</span></div><div class="line">            Bundle bundle = intent.getBundleExtra(ACTION_PLAY);</div><div class="line">            <span class="keyword">if</span> (bundle != <span class="keyword">null</span> &amp;&amp; mFloatWindow != <span class="keyword">null</span>) &#123;</div><div class="line">                LogUtil.d(TAG,<span class="string">"[onStartCommand] "</span> + <span class="string">"FloatWindowService onStart play bundle"</span>);</div><div class="line">                <span class="comment">//将bundle数据交给悬浮窗控件本身去处理</span></div><div class="line">                mFloatWindow.play(bundle);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> START_STICKY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        LogUtil.d(TAG,<span class="string">"[onDestroy] "</span> +<span class="string">"FloatWindowService onDestroy"</span> );</div><div class="line">        <span class="keyword">if</span> (mFloatWindow != <span class="keyword">null</span>) &#123;</div><div class="line">            mFloatWindow.destroy();</div><div class="line">        &#125;</div><div class="line">        mIsFloatWindowShown = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述代码可以看到,<strong>Service 在这里就是管理了悬浮窗的生命周期,以及传递数据的作用</strong>.</p><h3 id="FloatWindow"><a href="#FloatWindow" class="headerlink" title="FloatWindow"></a>FloatWindow</h3><p>这是<strong>悬浮窗的实现类</strong>,之前的代码在”悬浮播放”这一功能来说,都是铺垫. 参照文章前面对 <code>WindowManager</code> 的描述,这里肯定也会涉及到悬浮窗参数和悬浮窗布局,以及悬浮窗的交互.</p><p>首先是布局,这列悬浮窗比较简单 <code>top_window_player</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">android:id</span>=<span class="string">"@+id/root_view"</span></span></div><div class="line"><span class="tag">                <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"@drawable/top_window_player_bg"</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">"10dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/logo"</span></span></div><div class="line"><span class="tag">        /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/progressbar_loading"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:indeterminateDrawable</span>=<span class="string">"@anim/loading_anim"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">"gone"</span></span></div><div class="line"><span class="tag">        /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.xxxxxx.xxxsdk.XXXVideoView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/live_player_videoview"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">"gone"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/lsq_closeButton"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"20dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"20dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/close_small"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:paddingRight</span>=<span class="string">"5dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:paddingTop</span>=<span class="string">"5dp"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure><p> <code>ImageView</code> 是用于展示默认状态图,<code>ImageButton</code> 为右上角叉叉,<code>XXXVideoView</code> 为自研的播放器,这里就不贴出代码了.</p><p>构造方法</p><ul><li>这里将 <code>Service</code> 本身传入悬浮窗,是为了实现点击悬浮窗重新进入 <code>WatchVideoActivity</code>  全屏播放,</li><li>提供 <code>Context</code></li><li>绑定两者生命周期,即悬浮窗销毁时,服务就要停止</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FloatWindow</span><span class="params">(Service hostService)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    mHostService = hostService;</div><div class="line">    mAppContext = mHostService.getApplication();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> <code>createFloatView()</code> 真正创建 <code>Window</code> 的方法</p><p>这个方法中做 3 件事 : </p><ul><li>使用 <code>WindowManager</code> 创建 <code>Window</code> </li><li>布局控件初始化</li><li>触摸反馈</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createFloatView</span><span class="params">()</span> </span>&#123;</div><div class="line">      wmParams = <span class="keyword">new</span> WindowManager.LayoutParams();</div><div class="line">      mWindowManager = (WindowManager) mAppContext.getSystemService(mAppContext.WINDOW_SERVICE);</div><div class="line">      <span class="comment">//即使应用退出,悬浮窗也可以可以再桌面当中显示</span></div><div class="line">      wmParams.type = WindowManager.LayoutParams.TYPE_PHONE;</div><div class="line">      wmParams.format = PixelFormat.RGBA_8888;</div><div class="line">      <span class="comment">//悬浮窗需要自己处理点击事件</span></div><div class="line">      wmParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;</div><div class="line">      <span class="comment">//初始位置在屏幕左边的中间</span></div><div class="line">      wmParams.gravity = Gravity.LEFT | Gravity.CENTER_VERTICAL;</div><div class="line"><span class="comment">// 悬浮窗的宽为手机屏幕宽度的三分之一, 4:3 高宽比</span></div><div class="line">      wmParams.width = TestApplication.SCREEN_WIDTH / <span class="number">3</span>;</div><div class="line">      wmParams.height = (wmParams.width / <span class="number">3</span>) * <span class="number">4</span>;    </div><div class="line"><span class="comment">//Service中的Context</span></div><div class="line">      LayoutInflater inflater = LayoutInflater.from(mAppContext);</div><div class="line">      mFloatLayout = (RelativeLayout) inflater.inflate(R.layout.top_window_player, <span class="keyword">null</span>);</div><div class="line">      mWindowManager.addView(mFloatLayout, wmParams);</div><div class="line">      </div><div class="line">      progressbar_loading = (ProgressBar) mFloatLayout.findViewById(R.id.progressbar_loading);</div><div class="line">      ImageButton closebutton = (ImageButton) mFloatLayout.findViewById(R.id.lsq_closeButton);</div><div class="line">      closebutton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">              mHostService.stopSelf();</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">// 设置悬浮窗的Touch监听</span></div><div class="line">      mFloatLayout.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</div><div class="line">          <span class="keyword">int</span> lastX, lastY;</div><div class="line">          <span class="keyword">int</span> paramX, paramY;</div><div class="line">          </div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">              <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                <span class="comment">//手指按下的位置</span></div><div class="line">                      lastX = (<span class="keyword">int</span>) event.getRawX();</div><div class="line">                      lastY = (<span class="keyword">int</span>) event.getRawY();</div><div class="line">                      <span class="comment">//记录手指按下时,悬浮窗的位置</span></div><div class="line">                      paramX = wmParams.x;</div><div class="line">                      paramY = wmParams.y;</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                      <span class="keyword">int</span> dx = (<span class="keyword">int</span>) event.getRawX() - lastX;</div><div class="line">                      <span class="keyword">int</span> dy = (<span class="keyword">int</span>) event.getRawY() - lastY;</div><div class="line">                      wmParams.x = paramX + dx;</div><div class="line">                      wmParams.y = paramY + dy;</div><div class="line">                      <span class="comment">// 更新悬浮窗位置</span></div><div class="line">                      mWindowManager.updateViewLayout(mFloatLayout, wmParams);</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                  <span class="comment">//当手指按下的位置和手指抬起来的位置距离小于5像素时,将此次触摸归结为点击事件,</span></div><div class="line">                      <span class="keyword">if</span> (Math.abs(event.getRawX() - lastX) &lt; <span class="number">5</span> &amp;&amp; Math.abs(event.getRawY() - lastY) &lt; <span class="number">5</span>)</div><div class="line">                          mFloatLayout.callOnClick();</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line">      </div><div class="line"><span class="comment">//设置悬浮窗的点击监听</span></div><div class="line">      mFloatLayout.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;                </div><div class="line"><span class="comment">//点击悬浮窗重新跳转回 WatchVideoActivity 全屏播放</span></div><div class="line">                  Intent intent = <span class="keyword">new</span> Intent(mHostService.getApplicationContext(), WatchVideoActivity.class);</div><div class="line"><span class="comment">//同理播放器在WatchVideoActivity 中全屏播放也是需要播放地址和 悬浮窗已经播放到的无照顾</span></div><div class="line">                  intent.putExtra(<span class="string">"m3u8Url"</span>, mUrl);                 </div><div class="line">                  intent.putExtra(EXTRA_VIDEO_CURRENT_POSITION, mVideoView.getCurrentPosition());</div><div class="line">                <span class="comment">//Service 中启动 Activity</span></div><div class="line">                  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">                  mHostService.startActivity(intent);</div><div class="line">                  <span class="comment">//销毁服务</span></div><div class="line">                  mHostService.stopSelf();</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      mVideoView = (XXXVideoView) mFloatLayout.findViewById(R.id.live_player_videoview);</div><div class="line">      <span class="comment">//初始化播放器</span></div><div class="line">      mVideoView.initialize();</div><div class="line">      <span class="comment">//监听播放器 播放器相关不贴出代码</span></div><div class="line">      mVideoView.setListener(mVideoListener);</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>开始播放的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(Bundle param)</span> </span>&#123;</div><div class="line">    mBundleParam = param;</div><div class="line">    <span class="keyword">if</span> (mBundleParam == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">        </div><div class="line">    <span class="comment">//拿到从 WatchVideoActivity 中传递过来的 播放地址</span></div><div class="line">    mUrl = mBundleParam.getString(<span class="string">"m3u8Url"</span>);</div><div class="line">    <span class="comment">//拿到从 WatchVideoActivity 中传递过来的当前播放位置,以便继续播放</span></div><div class="line">    mCurrPositionFromWatchVod = mBundleParam.getInt(WatchVideoActivity.EXTRA_VIDEO_CURRENT_POSITION, -<span class="number">1</span>);</div><div class="line">    <span class="comment">//播放器相关,省略部分代码</span></div><div class="line">    stop_play();</div><div class="line">    start_play();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://i.imgur.com/dVuUslE.gif" alt=""></p><h2 id="相关知识点学习资料"><a href="#相关知识点学习资料" class="headerlink" title="相关知识点学习资料"></a>相关知识点学习资料</h2><ol><li><a href="https://www.liaohuqiu.net/cn/posts/android-windows-manager/" target="_blank" rel="external">Android 悬浮窗参数权限的小结</a>,这篇文章写得时间较早,其中有点内容在我测试机 红米Note 4X 当中并没有办法验证,索性,还是需要向用户申请悬浮窗权限.</li><li><a href="https://developer.android.com/guide/components/services.html?hl=zh-cn" target="_blank" rel="external">Service 官方文档</a> </li><li><a href="https://developer.android.com/training/permissions/requesting.html?hl=zh-cn" target="_blank" rel="external">运行时权限官方文档</a> ,  <a href="http://blog.csdn.net/lmj623565791/article/details/50709663" target="_blank" rel="external">鸿洋大神—— Android 6.0 运行时权限处理完全解析</a></li><li><a href="http://blog.csdn.net/yhaolpz/article/details/68936932" target="_blank" rel="external"> Android 带你彻底理解 Window 和 WindowManager</a> ,  <a href="http://szysky.com/2016/08/15/%E3%80%8AAndroid-%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B-08-%E7%90%86%E8%A7%A3Window%E5%92%8CWindowManager/" target="_blank" rel="external">《Android 开发艺术探索》 08-理解Window和WindowManager<br>抄书系列</a></li></ol></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LmSCVR5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要:近日看公司直播项目,其中有一个功能就是退出某房间之后,直播界面会以悬浮窗的形式出现,并且可以拖动悬浮窗到界面中任意位置,点击悬浮框之后,又可以回到房间中继续观看直播。现在这个功能在主流的直播或者视频类软件中都可以看到，比如：某鱼、某猫、某珠、某牙、某tube。当然了，某tobe当中的悬浮窗效果更佳炫酷，可以炫酷地从悬浮框中将视频主界面慢慢拖动出来，具体效果下载某tube就能看到。这篇文章就记录一下传统悬浮窗播放视频的原理，以及悬浮框涉及到的 Window 和  WindowManager 的相关知识。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android---View的工作流程</title>
    <link href="http://zengfanyu.top/2017/11/25/View%20work%20process/"/>
    <id>http://zengfanyu.top/2017/11/25/View work process/</id>
    <published>2017-11-24T16:37:15.000Z</published>
    <updated>2017-11-25T05:35:12.790Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1511596823582&amp;di=8f750b93754500efca5af505cb251355&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.hack50.com%2Farticle%2FUploadPic%2F2015-10%2F2015101020525216441.jpg" alt=""></p><p><em>摘要：一直关注 Hencoder 的教程，前阵子刚好出了一期 View 的工作流程系列，然后结合《Android开发艺术探索》相关章节，做一下笔记。</em><br><a id="more"></a></p><font face="黑体"><h1 id="MeasureSpec"><a href="#MeasureSpec" class="headerlink" title="MeasureSpec"></a>MeasureSpec</h1><p>在很大程度上，MeasureSpec 决定了一个 View 的尺寸，作所以说“很大程度上”，是因为这个过程还会受到父容器的影响，因为父容器会硬性 View 的 MeasureSpec 的创建过程。在测量过程中，系统会将 View 的 LayoutParams 根据父容器施加的规则转换成 MeasureSpec，然后再根据这个 MeasureSpec 来测量出 View 的宽高。</p><p>MeasureSpec 是一个 32 位的 int 值，高 2 位代表SpecMode，低30位代表SpecSize。</p><ul><li>SpecMode：测量模式</li><li>SpecSize：在某一测量模式下的规格大小<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MeasureSpec</span> </span>&#123;</div><div class="line">  ...</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeMeasureSpec</span><span class="params">(<span class="keyword">int</span> size,<span class="keyword">int</span> mode)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sUseBrokenMakeMeasureSpec) &#123;</div><div class="line">        <span class="keyword">return</span> size + mode;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">          <span class="comment">//noinspection ResourceType</span></div><div class="line">          <span class="keyword">return</span> (measureSpec &amp; MODE_MASK);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> (measureSpec &amp; ~MODE_MASK);</div><div class="line">      &#125;</div><div class="line"> &#125;</div><div class="line"> ...</div></pre></td></tr></table></figure></li></ul><p>MeasureSpec 通过将 SpecMode 和 SpecSize 打包成一个 int 值来避免过多的对象内存，为了方便操作，其提供了打包和解包的方法。</p><p>SpecMode有三类，</p><p><strong>UNSPECIFIED</strong></p><p>父容器不对 View 有任何显示，要多大给多大，这种模式一般是用于系统内部绘制。</p><p><strong>EXACTLY</strong></p><p>对应于 LayoutParams 的 match_content 和具体数值两种情况。表示父容器已经检测出 View 所需要的精确大小，这个大小由 SpecSize 给出。</p><p><strong>AT_MOST</strong></p><p>对用于 LayoutParams 中的 wrap_content 模式。表示父容器制定了一个可用大小，即 SpecSize，View的大小不能大于这个值，具体是多少要看不同View的具体实现。</p><h1 id="MeasureSpec-和-LayoutParams-的对应关系"><a href="#MeasureSpec-和-LayoutParams-的对应关系" class="headerlink" title="MeasureSpec 和 LayoutParams 的对应关系"></a>MeasureSpec 和 LayoutParams 的对应关系</h1><p>在View 测量的时候，系统会将 View 的 LayoutParams 参数在父容器的约束之下转换成MeasureSpec，然后根据这个 MeasureSpec 来决定 View 测量后的宽高。什么叫做父容器的约束呢？也就父容器的 MeasureSpec，所以对于普通 View 来说，其 MeasureSpec 就是由父容器的MeasureSpec 和其自身的 LayoutParams 共同决定的。</p><p>上面说的是一个总结，这个总结，体现在ViewGroup的getChildMeasureSpec()方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> spec The requirements for this view</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> padding The padding of this view for the current dimension and</span></div><div class="line"><span class="comment">   *        margins, if applicable</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> childDimension How big the child wants to be in the current</span></div><div class="line"><span class="comment">   *        dimension</span></div><div class="line"><span class="comment">   * <span class="doctag">@return</span> a MeasureSpec integer for the child</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> padding, <span class="keyword">int</span> childDimension)</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);</div><div class="line">      <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</div><div class="line"></div><div class="line">      <span class="keyword">int</span> size = Math.max(<span class="number">0</span>, specSize - padding);</div><div class="line"></div><div class="line">      <span class="keyword">int</span> resultSize = <span class="number">0</span>;</div><div class="line">      <span class="keyword">int</span> resultMode = <span class="number">0</span>;</div><div class="line"></div><div class="line">      <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">      <span class="comment">// Parent has imposed an exact size on us</span></div><div class="line">      <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">          <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</div><div class="line">              resultSize = childDimension;</div><div class="line">              resultMode = MeasureSpec.EXACTLY;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">              <span class="comment">// Child wants to be our size. So be it.</span></div><div class="line">              resultSize = size;</div><div class="line">              resultMode = MeasureSpec.EXACTLY;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class="line">              <span class="comment">// Child wants to determine its own size. It can't be</span></div><div class="line">              <span class="comment">// bigger than us.</span></div><div class="line">              resultSize = size;</div><div class="line">              resultMode = MeasureSpec.AT_MOST;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line">      <span class="comment">// Parent has imposed a maximum size on us</span></div><div class="line">      <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">          <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</div><div class="line">              <span class="comment">// Child wants a specific size... so be it</span></div><div class="line">              resultSize = childDimension;</div><div class="line">              resultMode = MeasureSpec.EXACTLY;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">              <span class="comment">// Child wants to be our size, but our size is not fixed.</span></div><div class="line">              <span class="comment">// Constrain child to not be bigger than us.</span></div><div class="line">              resultSize = size;</div><div class="line">              resultMode = MeasureSpec.AT_MOST;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class="line">              <span class="comment">// Child wants to determine its own size. It can't be</span></div><div class="line">              <span class="comment">// bigger than us.</span></div><div class="line">              resultSize = size;</div><div class="line">              resultMode = MeasureSpec.AT_MOST;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line">      <span class="comment">// Parent asked to see how big we want to be</span></div><div class="line">      <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">          <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</div><div class="line">              <span class="comment">// Child wants a specific size... let him have it</span></div><div class="line">              resultSize = childDimension;</div><div class="line">              resultMode = MeasureSpec.EXACTLY;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">              <span class="comment">// Child wants to be our size... find out how big it should</span></div><div class="line">              <span class="comment">// be</span></div><div class="line">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</div><div class="line">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class="line">              <span class="comment">// Child wants to determine its own size.... find out how</span></div><div class="line">              <span class="comment">// big it should be</span></div><div class="line">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</div><div class="line">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//noinspection ResourceType</span></div><div class="line">      <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>这个方法看上去这么长，其实总结起来就是上面那句话：View 的 LayoutParams 参数在父容器的约束之下转换成 MeasureSpec。</p><p>这个方法是在 measureChildWithMargins() 方法中会调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildWithMargins</span><span class="params">(View child,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> parentWidthMeasureSpec, <span class="keyword">int</span> widthUsed,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> parentHeightMeasureSpec, <span class="keyword">int</span> heightUsed)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class="line">            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</div><div class="line">                    + widthUsed, lp.width);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class="line">            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</div><div class="line">                    + heightUsed, lp.height);</div><div class="line"></div><div class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在第 7 行可以看到，调用了 getChildMeasureSpec 方法，这个方法传入的第一个参数是parentWidthMeasureSpec，第三个参数是lp.width，这就充分说明上面的总结：一个 View 的MeasureSpec和其本身的LayoutParams和父容器的 MeasureSpec 相关。</li><li>最后一行，是拿到 View 的 MeasureSpecHeight 和 MeasureSpecWidth 值，去调用View的measure 方法，View 的 measure 方法放在下一节。</li></ul><p>这么说起来，还是有点模糊，总结如下（也就是 getChildMeasureSpec 方法的表格呈现形式）：</p><p>其中 parentSize 指的是父容器中当前可用的大小</p><p><img src="https://i.imgur.com/wxbnh5r.png" alt="image"></p><p>按子View的LayoutParams总结如下：</p><ul><li><strong>当View采用固定宽高的时候</strong>，无论父容器的SpecMode是什么，View的SpecMode都是EXACTLY，SpecSize遵循LayoutParams中的大小。</li><li><strong>当View采用match_parent时</strong>，如果父容器的SpecMode是EXACTLY，那么View的SpecMode也是EXACTLY，SpecSize是父容器的剩余空间；如果父容器的SpecMode是AT_MOST，那么View的SpecMode也是AT_MOST，并且SpecMode不会超过父容器的剩余空间。</li><li><strong>当View采用wrap_content时</strong>，无论父容器的SpecMode是什么，View的SpecMode都是AT_MOST，SpecSize不得超过父容器的剩余空间。</li></ul><h1 id="View的工作流程"><a href="#View的工作流程" class="headerlink" title="View的工作流程"></a>View的工作流程</h1><p>View的工作流程主要包括measure、layout、draw三个，即测量布局和绘制，其中measure确定View的测量宽高，layout确定View的最终宽高和四个顶点的位置，而draw将View绘制到屏幕上。    </p><h2 id="measure过程"><a href="#measure过程" class="headerlink" title="measure过程"></a>measure过程</h2><p>measure() 方法被父 View 调用，在 measure() 中做一些准备和优化工作后，调用  onMeasure() 来进行实际的自我测量。 onMeasure() 做的事，View 和 ViewGroup 不一样：</p><ul><li>View：View 在 onMeasure() 中会计算出自己的尺寸然后保存；</li><li>ViewGroup：ViewGroup 在 onMeasure() 中会调用所有子 View 的 measure() 让它们进行自我测量，并根据子 View 计算出的期望尺寸来计算出它们的实际尺寸和位置（实际上 99.99% 的父 View 都会使用子 View 给出的期望尺寸来作为实际尺寸）然后保存。同时，它也会根据子 View 的尺寸和位置来计算出自己的尺寸然后保存；</li></ul><p>那么久针对 View 和 ViewGroup 这两种情况分析了。</p><h3 id="View-的-measure-过程"><a href="#View-的-measure-过程" class="headerlink" title="View 的 measure 过程"></a>View 的 measure 过程</h3><p>View 的 measure 过程是由其 measure 方法完成的，在这个方法中又会去调用 onMeasure 方法，onMeasure实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class="line">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>就是调用了一个 setMeasureDimension 方法，将 View 的宽高传递进去，这个方法在自定义 View 的时候经常用到，就是在确定了自定义 View 的宽高值之后，在 onMeasure 方法中最后调用的，用于确定自定义 View 的测量宽高。</p><p>这里对宽高传入的都是 getDefaultSize() 函数的返回值，那么久看看这个函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> result = size;</div><div class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">        result = size;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">        result = specSize;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>就是根据 specMode 的不同值，返回不同的大小，当 AT_MOST 和 EXACTLY 模式下，就是返回 specSize 的值，也就是 View 测量后的大小。</li><li>在 UNSPECIFIED 模式下，View 的大小就是 getDefaultSize 方法的第一个参数 size ，即宽高分别为 getSuggestedMinimumWidth() 和 getSuggestedMinimumHeight() 这两个函数的返回值。在看下这两个函数(只贴出width的代码)：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>若 View 没有指定背景，那么 View 的宽度为 mMinWidth ，这个值是由 View 的 android:minWidth 属性指定的，若没有指定这个属性，那么这个 mMinWidth 为 0。</li><li>若 View 指定了背景，那么 View 的宽度就是 mMinWidth 和 mBackground.getMinimumWidth() 两者中较大的一个。前者上面已经说了是什么，那么后者又是什么东西呢？mBackground 是一个 Drawable，那么点进 Drawable 里面去看就知道了：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimumWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> intrinsicWidth = getIntrinsicWidth();</div><div class="line">    <span class="keyword">return</span> intrinsicWidth &gt; <span class="number">0</span> ? intrinsicWidth : <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>getMinimumWidth 返回的就是 Drawable 的原始高度，前提是这个 Drawable 有原始高度，不然就返回0；</p><h3 id="ViewGroup-的-measure-过程"><a href="#ViewGroup-的-measure-过程" class="headerlink" title="ViewGroup 的 measure 过程"></a>ViewGroup 的 measure 过程</h3><p>ViewGroup 是一个抽象类，因此他没有重写 View 的 onMeasure 方法，它提供了一个 measureChildren 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildren</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = mChildrenCount;</div><div class="line">    <span class="keyword">final</span> View[] children = mChildren;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</div><div class="line">        <span class="keyword">final</span> View child = children[i];</div><div class="line">        <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</div><div class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个方法就是调用 ViewGroup 的所有子 View 的 measureChild 方法，这个 measureChild方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child, <span class="keyword">int</span> parentWidthMeasureSpec,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> parentHeightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> LayoutParams lp = child.getLayoutParams();</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class="line">            mPaddingLeft + mPaddingRight, lp.width);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class="line">            mPaddingTop + mPaddingBottom, lp.height);</div><div class="line"></div><div class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>就是拿到子 View 的 LayoutParams ，然后通过 getChildMeasureSpec 方法生成子 View 的 MeasureSpec，接着就将生成的 MeasureSpec 直接传递给子 View 的 measure 方法进行测量。 getChildMeasureSpec  的逻辑上述已经说明。</p><p>可以发现 ViewGroup 并没有定义其本身具体的测量过程，因为 ViewGroup 是一个抽象类， onMeasure 需要各个具体的子类去实现，不想 View 一样，对 onMeasure 方法做具体实现，是因为不同的 ViewGroup 的实现类，有不同的布局特性，这导致他们的测量细节各不相同，比如 LinearLayout 和 RelativeLayout 两者的布局特性显然不同。</p><h2 id="layout-过程"><a href="#layout-过程" class="headerlink" title="layout 过程"></a>layout 过程</h2><ul><li>layout 方法确定 View 本身的位置</li><li>onLayout 方法确定子 View 的位置</li></ul><p>layout 的作用是 ViewGroup 用于确定子 View 的位置，当 ViewGroup 的位置确定了之后，它会在 onLayout 中遍历所有子 View ，并且调用其 layout 方法，而在子 View 的 layout 方法中，onLayout 方法又会被调用，先看 View 的layout 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class="number">0</span>) &#123;</div><div class="line">        onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class="line">        mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> oldL = mLeft;</div><div class="line">    <span class="keyword">int</span> oldT = mTop;</div><div class="line">    <span class="keyword">int</span> oldB = mBottom;</div><div class="line">    <span class="keyword">int</span> oldR = mRight;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class="line">            setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class="line">        onLayout(changed, l, t, r, b);</div><div class="line">        ...</div><div class="line">        ListenerInfo li = mListenerInfo;</div><div class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class="keyword">null</span>) &#123;</div><div class="line">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</div><div class="line">                    (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</div><div class="line">            <span class="keyword">int</span> numListeners = listenersCopy.size();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</div><div class="line">                listenersCopy.get(i).onLayoutChange(<span class="keyword">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>14 行调用了 setFrame 方法，这个方法就是用于确定 View 的四个顶点的位置，一旦四个顶点确定了，那么 View 在 ViewGroup 中的位置也就确定了。贴出 setFrame 中的一段代码，稍后用于说明问题。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">setFrame</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        mLeft = left;</div><div class="line">        mTop = top;</div><div class="line">        mRight = right;</div><div class="line">        mBottom = bottom;</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>17 行，会调用 onLayout 方法，这个方法的用途是父容器确定子 View 的位置，和 onMeasure 方法类似，onLayout 的实现和具体的布局相关，所以 View 和 ViewGroup 都没有实现这个方法。看看 LinearLayout 中的 onLayout 方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</div><div class="line">        layoutVertical(l, t, r, b);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        layoutHorizontal(l, t, r, b);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>这里分为竖直方向上的 layout 和水平方向上的 layout，这里看看 竖直方向上的： </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">layoutVertical</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = getVirtualChildCount();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">final</span> View child = getVirtualChildAt(i);</div><div class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">            childTop += measureNullChild(i);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childWidth = child.getMeasuredWidth();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight();</div><div class="line">            </div><div class="line">            <span class="keyword">final</span> LinearLayout.LayoutParams lp =</div><div class="line">                    (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class="line">            </div><div class="line">           ...</div><div class="line">           </div><div class="line">            <span class="keyword">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class="line">                childTop += mDividerHeight;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            childTop += lp.topMargin;</div><div class="line">            setChildFrame(child, childLeft, childTop + getLocationOffset(child),</div><div class="line">                    childWidth, childHeight);</div><div class="line">            childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</div><div class="line"></div><div class="line">            i += getChildrenSkipCount(child, i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>首先遍历竖直方向上的所有子 View ，并且调用 setChildFrame 方法来为子 View 确定位置</li><li>注意 childTop 值会逐渐增加，这个增量包括分割线宽度、margin 值、childHeight，这样一来，在竖直方向上就符合 LinearLayout 的特性了。</li></ul><p>接下来看看 setChildFrame 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setChildFrame</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;        </div><div class="line">    child.layout(left, top, left + width, top + height);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>就是直接调用子 View 的 layout 方法，这样 LinearLayout 是父容器，父容器在 layout 中完成自己的定位之后，就通过 onLayout 去调用子 View 的 layout 方法，让子 View 完成其对自身的 layout 过程，然后在子 View 的 layout 方法中，又会通过 onLayout 方法去调用下一级子 View 的 layout 方法… 这样一层一层的传递下去之后，就会遍历完整个 View 树。</li></ul><h3 id="测量宽高和最终宽高的区别"><a href="#测量宽高和最终宽高的区别" class="headerlink" title="测量宽高和最终宽高的区别"></a>测量宽高和最终宽高的区别</h3><p>这个问题可以具体为：getMeasureWidth/height 和 getWidth/height 有什么区别。</p><p>前者很明显，就是 measure 过程中得到的宽高，那么重点在后者，先看看 View 中的 getWidth 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mRight - mLeft;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在就是要搞清楚 mRight 和 mLeft 两个变量是在什么时候赋值的。</p><ul><li>还是看看 LinearLayout 的竖直方向的 layout 过程，也就是上面的 layoutVertical 方法，在第 9、10 行可以看到：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> childWidth = child.getMeasuredWidth();</div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight();</div></pre></td></tr></table></figure><ul><li>然后在 22 行的 setChildFrame 方法，将 childWidth 和 childHeight 作为参数传入，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">setChildFrame(child, childLeft, childTop + getLocationOffset(child),</div><div class="line">        childWidth, childHeight);</div></pre></td></tr></table></figure><ul><li>然后在 setChildFrame 中会去调用子 View 的 layout 方法，继续讲参数传递</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">child.layout(left, top, left + width, top + height);</div></pre></td></tr></table></figure><ul><li>在 View 的 layout 方法中会调用 setFrame(l, t, r, b)，这里的 l、t、r、b 和上面的参数对应，在 setFrame 中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">setFrame</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        mLeft = left;</div><div class="line">        mTop = top;</div><div class="line">        mRight = right;</div><div class="line">        mBottom = bottom;</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码之前提到过，在这里，就将 mLeft mTop mRight mBottom 给赋值了，这个值就是在 LinearLayout 中通过 getMeasureWidth 和 getMeasureHeight 方法得到的。</p><ul><li><p>现在可以知道区别了<strong>在 View 的默认实现中，View 的测量宽高和最终宽高是相等的，只是两者的赋值时机不同，测量宽高形成于View 的 measure 过程，而最终宽高形成于View 的 layout 过程，在日常开发中，就可以认为 View 的测量宽高就等于 View 的最终宽高。</strong></p></li><li><p>一个好习惯就是：<strong>在 onLayout 方法中去拿 View 的测量宽高或者是最终宽高</strong>，因为在某些极端的情况下，系统需要经过多次的 measure 才能确定最终的宽高，这种情况下，在 onMeasure 方法中拿到的测量宽高可能是不准确的。</p></li></ul><h2 id="draw-过程"><a href="#draw-过程" class="headerlink" title="draw 过程"></a>draw 过程</h2><p>一个完整的绘制过程会依次绘制以下几个内容：</p><ol><li>背景</li><li>主体（onDraw()）</li><li>子 View（dispatchDraw()）</li><li>滑动边缘渐变和滑动条</li><li>前景</li></ol><p><strong>一般来说，一个 View（或 ViewGroup）的绘制不会这几项全都包含，但必然逃不出这几项，并且一定会严格遵守这个顺序</strong>。例如通常一个 LinearLayout 只有背景和子 View，那么它会先绘制背景再绘制子 View；一个 ImageView 有主体，有可能会再加上一层半透明的前景作为遮罩，那么它的前景也会在主体之后进行绘制。需要注意，前景的支持是在 Android 6.0（也就是 API 23）才加入的；之前其实也有，不过只支持  FrameLayout，而直到 6.0 才把这个支持放进了 View 类里。</p><h3 id="绘制背景"><a href="#绘制背景" class="headerlink" title="绘制背景"></a>绘制背景</h3><p>它的绘制发生在一个叫 drawBackground() 的方法里，但这个方法是 private 的，不能重写，你如果要设置背景，只能用自带的 API 去设置（xml 布局文件的 android:background 属性以及 Java 代码的 View.setBackgroundXxx() 方法），而不能自定义绘制</p><h3 id="绘制主体"><a href="#绘制主体" class="headerlink" title="绘制主体"></a>绘制主体</h3><p>这个过程是在 onDraw 方法中执行的，但是在 View 中，这个方法是没有实现的，因为具体的 View 需要如何绘制，需要 View 的子类去具体的定制。所以当我们自定义 View 的绘制的时候，就就可以直接重写 onDraw 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        ... <span class="comment">// 自定义绘制代码</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里注意，是将自定义绘制的代码写在 super 的下面，不过这里写在 super 的上面和下面其实都是一样的， 因为上面提到，View 的这个方法是一个空实现，所以。</p><p>下面来讨论自定义 View 的绘制方法时，自定义的代码写在 super 上下的区别。</p><h4 id="写在-super-onDraw-的下面"><a href="#写在-super-onDraw-的下面" class="headerlink" title="写在 super.onDraw() 的下面"></a>写在 super.onDraw() 的下面</h4><p>把绘制代码写在 super.onDraw() 的下面，由于绘制代码会在原有内容绘制结束之后才执行，<strong>所以绘制内容就会盖住控件原来的内容</strong>。这是最为常见的情况：为控件增加点缀性内容。比如，在 Debug 模式下绘制出 ImageView 的图像尺寸信息：<br><img src="https://ws3.sinaimg.cn/large/52eb2279ly1fih2ihfxpxj207306q40e.jpg" alt="image"></p><h4 id="写在-super-onDraw-的上面"><a href="#写在-super-onDraw-的上面" class="headerlink" title="写在 super.onDraw() 的上面"></a>写在 super.onDraw() 的上面</h4><p>如果把绘制代码写在 super.onDraw() 的上面，由于绘制代码会执行在原有内容的绘制之前，<strong>所以绘制的内容会被控件的原内容盖住</strong>。 这种方式可以实现马克笔的效果：</p><p><img src="https://ws3.sinaimg.cn/large/52eb2279ly1fih2i89d63j20fk0abmyy.jpg" alt="image"></p><h3 id="绘制子-View"><a href="#绘制子-View" class="headerlink" title="绘制子 View"></a>绘制子 View</h3><p>有部分的遮盖关系是无法通过 onDraw 方法来实现的，例如，你继承了一个 LinearLayout，重写了它的 onDraw() 方法，在 super.onDraw() 中插入了你自己的绘制代码，使它能够在内部绘制一些斑点作为点缀：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpottedLinearLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">       ... <span class="comment">// 绘制斑点</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/52eb2279ly1fih3a2izowj205e06cmx3.jpg" alt="image"></p><p>没毛病。</p><p>但是当添加了子 View 之后，</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;SpottedLinearLayout  </div><div class="line">    android:orientation=<span class="string">"vertical"</span></div><div class="line">    ... &gt;</div><div class="line"></div><div class="line">    &lt;ImageView ... /&gt;</div><div class="line"></div><div class="line">    &lt;TextView ... /&gt;</div><div class="line"></div><div class="line">&lt;/SpottedLinearLayout&gt;</div></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/52eb2279ly1fih3qaplxjj20d508cn0c.jpg" alt="image"></p><p>造成这种情况的原因是 Android 的绘制顺序：在绘制过程中，<strong>每一个 ViewGroup 会先调用自己的 onDraw() 来绘制完自己的主体之后再去绘制它的子 View</strong>。对于上面这个例子来说，就是你的 LinearLayout 会在绘制完斑点后再去绘制它的子 View。那么在子 View 绘制完成之后，先前绘制的斑点就被子 View 盖住了。</p><p>具体来讲，这里说的「绘制子 View」是通过另一个绘制方法的调用来发生的，这个绘制方法叫做：dispatchDraw()。也就是说，<strong>在绘制过程中，每个 View 和 ViewGroup 都会先调用 onDraw() 方法来绘制主体，再调用 dispatchDraw() 方法来绘制子 View</strong>。</p><blockquote><p>注：虽然 View 和 ViewGroup 都有 dispatchDraw() 方法，不过由于 View 是没有子 View 的，所以一般来说 dispatchDraw() 这个方法只对 ViewGroup（以及它的子类）有意义。</p></blockquote><p>回到刚才的问题：怎样才能让 LinearLayout 的绘制内容盖住子 View 呢？只要让它的绘制代码在子 View 的绘制之后再执行就好了。</p><h4 id="写在-super-dispatchDraw-的下面"><a href="#写在-super-dispatchDraw-的下面" class="headerlink" title="写在 super.dispatchDraw() 的下面"></a>写在 super.dispatchDraw() 的下面</h4><p>只要重写 dispatchDraw()，并在 super.dispatchDraw() 的下面写上你的绘制代码，这段绘制代码就会发生在子 View 的绘制之后，从而让绘制内容盖住子 View 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpottedLinearLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// 把 onDraw() 换成了 dispatchDraw()</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.dispatchDraw(canvas);</div><div class="line"></div><div class="line">       ... <span class="comment">// 绘制斑点</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fihvsxhkblj305l072glu.jpg" alt="image"></p><h4 id="写在-super-dispatchDraw-的上面"><a href="#写在-super-dispatchDraw-的上面" class="headerlink" title="写在 super.dispatchDraw() 的上面"></a>写在 super.dispatchDraw() 的上面</h4><p>同理，<strong>把绘制代码写在 super.dispatchDraw() 的上面，这段绘制就会在 onDraw() 之后、  super.dispatchDraw() 之前发生</strong>，也就是绘制内容会出现在主体内容和子 View 之间。而这个……</p><p>其实和前面讲的，重写 onDraw() 并把绘制代码写在 super.onDraw() 之后的做法，效果是一样的。</p><h3 id="onDrawForeground"><a href="#onDrawForeground" class="headerlink" title="onDrawForeground()"></a>onDrawForeground()</h3><p>滑动边缘渐变和滑动条以及前景，这两部分被合在一起放在了 onDrawForeground() 方法里，这个方法是可以重写的。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fiiwb2nr63j30ga0bddgg.jpg" alt="enter image description here"></p><p>滑动边缘渐变和滑动条可以通过 xml 的 android:scrollbarXXX 系列属性或 Java 代码的  View.setXXXScrollbarXXX() 系列方法来设置；前景可以通过 xml 的 android:foreground 属性或 Java 代码的  View.setForeground() 方法来设置。而重写 onDrawForeground() 方法，并在它的 super.onDrawForeground() 方法的上面或下面插入绘制代码，则可以控制绘制内容和滑动边缘渐变、滑动条以及前景的遮盖关系。</p><h4 id="写在-super-onDrawForeground-的下面"><a href="#写在-super-onDrawForeground-的下面" class="headerlink" title="写在 super.onDrawForeground() 的下面"></a>写在 super.onDrawForeground() 的下面</h4><p>如果你把绘制代码写在了 super.onDrawForeground() 的下面，绘制代码会在滑动边缘渐变、滑动条和前景之后被执行，那么绘制内容将会盖住滑动边缘渐变、滑动条和前景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawForeground</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onDrawForeground(canvas);</div><div class="line"></div><div class="line">       ... <span class="comment">// 绘制「New」标签</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;!-- 使用半透明的黑色作为前景，这是一种很常见的处理 --&gt;  </div><div class="line">&lt;AppImageView  </div><div class="line">    ...</div><div class="line">    android:foreground=<span class="string">"#88000000"</span> /&gt;</div></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fihyhundspj30g008ggma.jpg" alt="enter image description here"></p><blockquote><p>左上角的标签没有被前景遮盖住，而是保持了它本身的颜色</p></blockquote><h4 id="写在-super-onDrawForeground-的上面"><a href="#写在-super-onDrawForeground-的上面" class="headerlink" title="写在 super.onDrawForeground() 的上面"></a>写在 super.onDrawForeground() 的上面</h4><p>如果你把绘制代码写在了 super.onDrawForeground() 的上面，绘制内容就会在 dispatchDraw() 和  super.onDrawForeground() 之间执行，那么绘制内容会盖住子 View，但被滑动边缘渐变、滑动条以及前景盖住：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawForeground</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       ... <span class="comment">// 绘制「New」标签</span></div><div class="line"></div><div class="line">       <span class="keyword">super</span>.onDrawForeground(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fihyqsu2x3j30fn084js1.jpg" alt="enter image description here"></p><blockquote><p>由于被黑色的前景给遮住了，这里看到的标签也是这种半透明的黑色</p></blockquote><h3 id="想在滑动边缘渐变、滑动条和前景之间插入绘制代码？"><a href="#想在滑动边缘渐变、滑动条和前景之间插入绘制代码？" class="headerlink" title="想在滑动边缘渐变、滑动条和前景之间插入绘制代码？"></a>想在滑动边缘渐变、滑动条和前景之间插入绘制代码？</h3><p>很简单：不行。</p><p>虽然这三部分是依次绘制的，但它们被一起写进了 onDrawForeground() 方法里，所以你要么把绘制内容插在它们之前，要么把绘制内容插在它们之后。而想往它们之间插入绘制，是做不到的。</p><h3 id="draw-总调度的方法"><a href="#draw-总调度的方法" class="headerlink" title="draw() 总调度的方法"></a>draw() 总调度的方法</h3><p>除了 onDraw() dispatchDraw() 和 onDrawForeground() 之外，还有一个可以用来实现自定义绘制的方法：  draw()。</p><p>draw() 是绘制过程的总调度方法。一个 View 的整个绘制过程都发生在 draw() 方法里。前面讲到的背景、主体、子 View 、滑动相关以及前景的绘制，它们其实都是在 draw() 方法里的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// View.java 的 draw() 方法的简化版大致结构（是大致结构，不是源码哦）：</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    drawBackground(Canvas); <span class="comment">// 绘制背景（不能重写）</span></div><div class="line">    onDraw(Canvas); <span class="comment">// 绘制主体</span></div><div class="line">    dispatchDraw(Canvas); <span class="comment">// 绘制子 View</span></div><div class="line">    onDrawForeground(Canvas); <span class="comment">// 绘制滑动相关和前景</span></div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从上面的代码可以看出，onDraw() dispatchDraw() onDrawForeground() 这三个方法在 draw() 中被依次调用，因此它们的遮盖关系也就像前面所说的——dispatchDraw() 绘制的内容盖住 onDraw() 绘制的内容；onDrawForeground() 绘制的内容盖住 dispatchDraw() 绘制的内容。而在它们的外部，则是由 draw() 这个方法作为总的调度。所以，你也可以重写 draw() 方法来做自定义的绘制。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fiix28rb6mj30ru0c8jsb.jpg" alt="enter image description here"></p><h4 id="写在-super-draw-的下面"><a href="#写在-super-draw-的下面" class="headerlink" title="写在 super.draw() 的下面"></a>写在 super.draw() 的下面</h4><p>由于 draw() 是总调度方法，所以如果把绘制代码写在 super.draw() 的下面，那么这段代码会在其他所有绘制完成之后再执行，也就是说，它的绘制内容会盖住其他的所有绘制内容。</p><p>它的效果和重写 onDrawForeground()，并把绘制代码写在 super.onDrawForeground() 下面时的效果是一样的：都会盖住其他的所有内容。</p><blockquote><p>当然了，虽说它们效果一样，但如果你既重写 draw() 又重写 onDrawForeground() ，那么 draw() 里的内容还是会盖住 onDrawForeground() 里的内容的。所以严格来讲，它们的效果还是有一点点不一样的。</p><p>但这属于抬杠……</p></blockquote><h4 id="写在-super-draw-的上面"><a href="#写在-super-draw-的上面" class="headerlink" title="写在 super.draw() 的上面"></a>写在 super.draw() 的上面</h4><p>同理，由于 draw() 是总调度方法，所以如果把绘制代码写在 super.draw() 的上面，那么这段代码会在其他所有绘制之前被执行，所以这部分绘制内容会被其他所有的内容盖住，包括背景。是的，背景也会盖住它。</p><p>是不是觉得没用？觉得怎么可能会有谁想要在背景的下面绘制内容？别这么想，有的时候它还真的有用。</p><p>例如我有一个 EditText：</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fii503vailj30dz03ajrd.jpg" alt="enter image description here"></p><p>它下面的那条横线，是 EditText 的背景。所以如果我想给这个 EditText 加一个绿色的底，我不能使用给它设置绿色背景色的方式，因为这就相当于是把它的背景替换掉，从而会导致下面的那条横线消失：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;EditText  </div><div class="line">    ...</div><div class="line">    android:background=<span class="string">"#66BB6A"</span> /&gt;</div></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fii56ecfwqj30a602kq2x.jpg" alt="enter image description here"></p><p>在这种时候，你就可以重写它的 draw() 方法，然后在 super.draw() 的上方插入代码，以此来在所有内容的底部涂上一片绿色：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> AppEditText extends EditText &#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        canvas.drawColor(Color.parseColor(<span class="string">"#66BB6A"</span>)); <span class="comment">// 涂上绿色</span></div><div class="line"></div><div class="line">        <span class="keyword">super</span>.draw(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fii53vch7mj30ag02l3yk.jpg" alt="enter image description here"></p><p>###draw 过程注意</p><p>关于绘制方法，有两点需要注意一下：</p><ol><li>出于效率的考虑，ViewGroup 默认会绕过 draw() 方法，换而直接执行 dispatchDraw()，以此来简化绘制流程。所以如果你自定义了某个 ViewGroup 的子类（比如 LinearLayout）并且需要在它的除  dispatchDraw() 以外的任何一个绘制方法内绘制内容，你可能会需要调用 View.setWillNotDraw(false) 这行代码来切换到完整的绘制流程（是「可能」而不是「必须」的原因是，有些 ViewGroup 是已经调用过 setWillNotDraw(false) 了的，例如 ScrollView）。<p></p></li><li>有的时候，一段绘制代码写在不同的绘制方法中效果是一样的，这时你可以选一个自己喜欢或者习惯的绘制方法来重写。但有一个例外：如果绘制代码既可以写在 onDraw() 里，也可以写在其他绘制方法里，那么优先写在 onDraw() ，因为 Android 有相关的优化，可以在不需要重绘的时候自动跳过  onDraw() 的重复执行，以提升开发效率。享受这种优化的只有 onDraw() 一个方法。</li></ol><p>###draw 过程总结</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fii5jk7l19j30q70e0di5.jpg" alt="enter image description here"></p><p>另外别忘了上面提到的那两个注意事项：</p><ol><li>在 ViewGroup 的子类中重写除 dispatchDraw() 以外的绘制方法时，可能需要调用  setWillNotDraw(false)；</li><li>在重写的方法有多个选择时，优先选择 onDraw()。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对 View 的绘制过程都清楚了之后，就可以进行各种自定义 View 了，Hencoder 说过，自定义 View 无非就是三个：<strong>绘制、布局、触摸反馈</strong>。 </p><p>其中绘制和布局这里总结了，在这两个操作过程中会大量使用到 Paint Canvas 和 Property Animation，这些后面再做总结。</p><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><p>[1] 《Android 开发艺术探索》</p><p>[2] <a href="http://hencoder.com/ui-1-5/" target="_blank" rel="external">HenCoder Android 开发进阶：自定义 View 1-5 绘制顺序</a></p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>自定义流式布局，刚好是对上面总结内容的一个很好的实践。</p><p><a href="https://github.com/zengfanyu/FlowView" target="_blank" rel="external">View 工作流程的相关实践项目</a></p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1511596823582&amp;amp;di=8f750b93754500efca5af505cb251355&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fwww.hack50.com%2Farticle%2FUploadPic%2F2015-10%2F2015101020525216441.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要：一直关注 Hencoder 的教程，前阵子刚好出了一期 View 的工作流程系列，然后结合《Android开发艺术探索》相关章节，做一下笔记。&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>新姿势学习之Java8---Lambda Expressions And Stream</title>
    <link href="http://zengfanyu.top/2017/11/13/Java8---Lambda%20Expressions/"/>
    <id>http://zengfanyu.top/2017/11/13/Java8---Lambda Expressions/</id>
    <published>2017-11-12T16:37:15.000Z</published>
    <updated>2018-01-06T08:33:13.392Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/N5q8tne.png" alt=""></p><p><em>摘要: 去年逛 <code>Github</code> 准备秋招项目时,就发现 <code>Android</code> 有的项目使用的语法似乎从来没见过,类似于 <code>(parameters)-&gt;expression</code> 还有<code>ObjectReference::methodName</code> 这种类 <code>C++</code> 语法形式,查找资料之后,知道这个是 <code>Java8</code> 的新特性:<code>Lambda</code>,所以就记下了 <code>Lambda</code> 这个词,后来忙于秋招春招实习,一直也没有取好好学习,昨天在项目当中又看到了这个熟悉的表达式,一脸懵逼,所以准备找几篇 <code>Java8</code> 教程,好好学习一下”新”姿势.</em><br><a id="more"></a></p><font face="黑体"><br><br><br><br>分别总结 <code>java8</code> 中涉及到的一些名词，可能没什么条理，都是有助于理解 <code>java8</code> 中的新特性，特别是 <code>Lambda</code> 和 <code>Stream</code> 相关的知识，至少我是怎么认为的，哈哈~。<br><br>## 为什么需要 Java8<br><br>原因众多,其中最主要的原因是: <strong>可以让多线程并行处理 <code>Colloection</code> 的代码变得容易编写</strong>.<br>商业发展需要复杂的应用,更过的应用都跑在多核的 <code>CPU</code> 上,既然是多核,就需要保证它的并行操作,所以之前 <code>java</code> 中推出了 <code>java.util.concurrent</code> 包来解决并行的问题,但是在大数据的处理上,这些类库的层抽象级别还不够,缺乏高效的并行操作,我们需要编写复杂的集合处理算法,用于处理大数据问题,<strong>这种算法已经很难在工具层面来解决了,所以只能上升到语言层面:增加 <code>Lambda</code> 表达式</strong>,<br><br><br>## Streams API<br><br>标题太广泛，需要一篇文章来总结<br><br>## 函数式编程<br><br>标题范围太广，需要一篇文章来总结<br><br><br>## 函数式接口<br><br>简单来说，函数式接口<font color="#ff4081"><strong>是只包含一个方法</strong></font>的接口。比如 <code>Java</code> 标准库中的 <code>java.lang.Runnable</code> 和<code>java.util.Comparator</code> 都是典型的函数式接口。<code>java 8</code> 提供 <strong><code>@FunctionalInterface</code></strong> 作为注解,这个注解是<font color="#ff4081"><strong>非必须的</strong></font>，只要接口符合函数式接口的标准（即只包含一个方法的接口），虚拟机会自动判断，但最好在接口上使用注解 <code>@FunctionalInterface</code> 进行声明，以免团队的其他人员错误地往接口中添加新的方法。这里使用一个例子来说明：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="comment">//定义一个函数式接口</span></div><div class="line">FunctionalInterface</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WorkerInterface</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeWork</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerInterfaceTest</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkerInterface worker)</span> </span>&#123;</div><div class="line">    worker.doSomeWork();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//invoke doSomeWork using Annonymous class</span></div><div class="line">    execute(<span class="keyword">new</span> WorkerInterface() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeWork</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"Worker invoked using Anonymous class"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//invoke doSomeWork using Lambda expression </span></div><div class="line">    execute( () -&gt; System.out.println(<span class="string">"Worker invoked using Lambda expression"</span>) );</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>## Lambda 语法 ##<br><br>语法的定义比较简单:<br><br>1. 一个括号内,用逗号分隔的<strong>形式参数</strong>,这些个形参是函数式接口里的方法的参数<br><br>2. 一个箭头符号<font color="#ff4081"> <code>-&gt;</code> </font><ol><li>方法体,可以是<font color="#ff4081">表达式</font>或者<font color="#ff4081">代码块</font>,是函数式接口里面的方法的具体实现.如果是代码块,就必须要用  <font color="#ff4081"> <code>{}</code> </font> 包裹起来,且需要一个 <code>return</code> 返回值.但是如果函数式接口里面的方法本身的返回类型就是 <code>void</code> ,那么代码块是不需要用 <font color="#ff4081"> <code>{}</code> </font> 包裹,也不需要返回值的.<br>总结起来,就是它的形式类似于:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(parameters) -&gt; <span class="function">expression <span class="title">or</span> <span class="params">(parameters)</span> -&gt; </span>&#123; statements; &#125;</div></pre></td></tr></table></figure><p>4.方法引用.其实是  <code>Lambda</code>  表达式的一个简化写法，所引用的方法其实是  <code>Lambda</code>  表达式的方法体实现，语法也很简单，左边是容器（可以是类名，实例名），中间是 <code>&quot;::&quot;</code>，右边是相应的方法名。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ObjectReference::methodName</div></pre></td></tr></table></figure><ul><li><p>如果是<strong>静态方法</strong>，则是 <code>ClassName::methodName</code>。如 <code>Object ::equals</code></p></li><li><p>如果是<strong>实例方法</strong>，则是 <code>Instance::methodName</code>。如 <code>Object obj=new Object();obj::equals;</code></p></li><li><p>如果是<strong>构造函数</strong> ,   则是 <code>ClassName::new</code></p></li><li><p>如果是<strong>接口方法</strong>  ,  则是 <code>InterfaceName::methodName</code>.如 <code>List::add , List::addAll</code></p></li></ul><blockquote><font color="#ff4081"><strong><code>Java</code> 中的  <code>Lambda</code>  无法单独出现，它需要一个函数式接口来盛放， <code>Lambda</code>  表达式方法体其实就是函数接口的实现.</strong> </font></blockquote><h2 id="Lambda-应用场景"><a href="#Lambda-应用场景" class="headerlink" title="Lambda 应用场景"></a>Lambda 应用场景</h2><p>个人觉得，学习 <code>Lambda</code> 最好的方法，就是通过对比的方式去学，将实现某一功能使用 <code>Lambda</code> 表达式和不使用 <code>Lambda</code>  两套代码进行对比，这样记忆更加深刻，这一小节中也涉及到部分操作符的使用总结。</p><h3 id="用-Lambda-表达式实现-Runnable"><a href="#用-Lambda-表达式实现-Runnable" class="headerlink" title="用 Lambda 表达式实现 Runnable"></a>用 Lambda 表达式实现 Runnable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Before java8</span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This is before java8"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div><div class="line"></div><div class="line"><span class="comment">//In java8 way</span></div><div class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"Java8 coming!"</span>)).start();</div></pre></td></tr></table></figure><h3 id="使用-Lambda-表达式进行事件处理"><a href="#使用-Lambda-表达式进行事件处理" class="headerlink" title="使用 Lambda 表达式进行事件处理"></a>使用 Lambda 表达式进行事件处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Before Java8</span></div><div class="line">mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"Button clicked!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="comment">//In java8 way    </span></div><div class="line">   mButton.setOnClickListener((v)-&gt; &#123;</div><div class="line">       System.out.println(<span class="string">"Button clicked!"</span>);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure><ul><li>这种方式其实跟上面对 <code>Runnable</code> 的操作是一样的,都是将匿名内部类使用  <code>Lambda</code>  来替换,唯一不同的就是,上面 <code>Runnable</code> 的例子里,方法是没有参数的,但是这个例子中, <code>onClick(View view)</code> 回调方法是有一个参数的.</li><li>此处的 <code>Lambda</code> 表达式用用的是 <code>(v)</code> ,而不是回调函数本身的 <code>view</code> ,是因为在  <code>Lambda</code>  表达式中的参数是形参,不恰当的例子:形参随便你写什么都行.</li><li>上面例子中,方法体的 <code>{}</code> 是可以不用的,这里是为了和上面保证格式一致,方便对比. </li></ul><h3 id="用-Lambda-表达式对集合进行迭代"><a href="#用-Lambda-表达式对集合进行迭代" class="headerlink" title="用 Lambda 表达式对集合进行迭代"></a>用 Lambda 表达式对集合进行迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">      List&lt;String&gt; features = Arrays.asList(<span class="string">"Lambdas"</span>, <span class="string">"Default Method"</span>, <span class="string">"Stream API"</span>, <span class="string">"Date and Time API"</span>);</div><div class="line"></div><div class="line"><span class="comment">//Before java8</span></div><div class="line">      <span class="keyword">for</span> (String feature : features) &#123;</div><div class="line">          System.out.println(feature);</div><div class="line">      &#125;</div><div class="line"><span class="comment">//In java8 way</span></div><div class="line">      features.forEach((String feature) -&gt; System.out.println(feature));</div><div class="line">      <span class="comment">//or </span></div><div class="line">      features.forEach(System.out::println);</div></pre></td></tr></table></figure><ul><li>第 <code>10</code> 行使用的是方法引用,但是要注意:<strong>方法引用不能修改 <code>Lambda</code> 表达式提供的参数.</strong></li></ul><h3 id="使用-Lambda-的-filter-操作"><a href="#使用-Lambda-的-filter-操作" class="headerlink" title="使用  Lambda  的 filter 操作"></a>使用  <code>Lambda</code>  的 filter 操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(args[])</span></span>&#123;</div><div class="line">    List languages = Arrays.asList(<span class="string">"Java"</span>, <span class="string">"Scala"</span>, <span class="string">"C++"</span>, <span class="string">"Haskell"</span>, <span class="string">"Lisp"</span>);</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Languages which starts with J :"</span>);</div><div class="line">    filter(languages, (str)-&gt;str.startsWith(<span class="string">"J"</span>));</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Languages which ends with a "</span>);</div><div class="line">    filter(languages, (str)-&gt;str.endsWith(<span class="string">"a"</span>));</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Print all languages :"</span>);</div><div class="line">    filter(languages, (str)-&gt;<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Print no language : "</span>);</div><div class="line">    filter(languages, (str)-&gt;<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Print language whose length greater than 4:"</span>);</div><div class="line">    filter(languages, (str)-&gt;str.length() &gt; <span class="number">4</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(List&lt;String&gt; names, Predicate&lt;String&gt; condition)</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">for</span>(String name: names)  &#123;</div><div class="line">           <span class="keyword">if</span>(condition.test(name)) &#123;</div><div class="line">               System.out.println(name + <span class="string">" "</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">//另一种写法</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(List&lt;String&gt; names, Predicate&lt;String&gt; condition)</span> </span>&#123;</div><div class="line">       names.stream().filter((name) -&gt; (condition.test(name)))</div><div class="line">               .forEach((name) -&gt; System.out.println(name + <span class="string">" "</span>));</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">//另另一种写法</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(List&lt;String&gt; names, Predicate&lt;String&gt; condition)</span> </span>&#123;</div><div class="line">       names.forEach((String str) -&gt; &#123;</div><div class="line">           <span class="keyword">if</span> (condition.test(str)) &#123;</div><div class="line">               System.out.println(str + <span class="string">""</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>关于 <font color="#ff4081"><code>Predicate</code></font>,笔者的一些理解:</p><ol><li>可以看到下面的 <code>filter</code> 方法,它接受一个类型为 <code>Predicate</code> 的参数,<code>Predicate</code> 本身是「<strong>谓语</strong>」的意思（也有翻译做「断言」的，不过我个人觉得，「谓语」更好理解，原因如下）比如:“我打你”,那么这个”打”就是谓语,很明显这是一个谓语动词,其实这个”打”是有一个返回的「<strong>结果</strong>」的,只是在语言本身的语法当中是没有关注的,比如,打到没有?打疼没有?打死没有? <code>true or false ?</code></li><li>而 <code>Predicate</code>的描述是这样的: <code>Represents a predicate (boolean-valued function) of one argument.</code> ,代表一个参数的”谓语”,这个谓语是有返回值的,返回值的类型要是 <code>boolean</code> 的.</li><li><code>boolean test(T t)</code> 方法: <code>Evaluates this predicate on the given argument</code> ,用于返回这个参数的谓语的结果.拿上面的例子来说,调用 <code>test(T t)</code> 之后,如果返回的是 <code>false</code> ,那么表示「我没有打到你或者我没有打疼你或者我没打死你」,返回 <code>true</code> 表示,「我打到你了或者我打疼你了或者我打死你了」.</li><li>对应到上面代码第 <code>5</code> 行, <code>Argument</code> 「参数」指的是 <code>languages</code> 集合中的元素,<code>predicate</code> 「谓语」指的是 <code>(str)-&gt;str.startWith(&quot;J&quot;)</code>,很明显,这个谓语是有返回值的,<code>true</code> 表示 <code>languages</code> 中的当前遍历的元素是 <code>J</code> 开头的,反之则不是.</li></ol><blockquote><p>再一次感叹老外命名的巧夺天工!</p></blockquote><h3 id="在-Lambda-表达式中加入-Predicate"><a href="#在-Lambda-表达式中加入-Predicate" class="headerlink" title="在 Lambda 表达式中加入 Predicate"></a>在 Lambda 表达式中加入 Predicate</h3><p>上面的例子一次只使用了一个 <code>Predicate</code> ,可以通过逻辑操作符,将两个或者多个 <code>Predicate</code> 的逻辑运算结果作为一个 <code>Predicate</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Predicate&lt;String&gt; lengthFilter = (String str) -&gt; str.length() == <span class="number">4</span>;</div><div class="line">Predicate&lt;String&gt; startFilter = (String str) -&gt; str.startsWith(<span class="string">"J"</span>);</div><div class="line">languages.stream()</div><div class="line"> .filter(lengthFilter.and(startFilter))</div><div class="line"> .forEach(language -&gt; System.out.printLn(language));</div></pre></td></tr></table></figure><ul><li>第四行,的 <code>filter</code> 函数接收一个 <code>Predicate</code> 类型的参数,这个参数是由 <code>lengthFilter</code> 和 <code>startFilter</code> 的结果两经过与操作组成的,</li><li>同理 <code>or()</code> 是或操作, <code>or()</code> 是异或操作.</li></ul><h3 id="使用-Lambda-的-map-操作"><a href="#使用-Lambda-的-map-操作" class="headerlink" title="使用 Lambda 的 map 操作"></a>使用 Lambda 的 map 操作</h3><blockquote><p>需求:给出税前的列表,返回税后列表,税12%</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Before java8</span></div><div class="line">    List&lt;Integer&gt; costBeforeTax = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (Integer beforeTax : costBeforeTax) &#123;</div><div class="line">        <span class="keyword">double</span> costAfterTax = beforeTax + <span class="number">0.12</span> * beforeTax;</div><div class="line">        System.out.println(costAfterTax);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//In java8 way</span></div><div class="line">    List&lt;Integer&gt; costBeforeTaxL= Arrays.asList(<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>);</div><div class="line"></div><div class="line">    costBeforeTaxL.stream().map(cost -&gt; cost + cost * <span class="number">0.12</span>).forEach(System.out::println);</div></pre></td></tr></table></figure><p>这里用到了 <code>map</code> 操作符,它的作用就是:<font color="#ff4081"><strong>将 <code>Input Strean</code> 的每一个元素转换成 <code>Output Stream</code> 的另一个元素,这是一个 <code>1:1</code> 的映射</strong></font>.</p><ul><li><p><code>map</code> 的定义:<code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</code> 官方给的注解是这么说的: <code>Returns a stream consisting of the results of applying the given function to the elements of this stream.</code>翻译成中文 : <font color="#ff4081"><strong>返回由</strong></font> <em>将给定函数 <code>Function</code> 应用于此流的元素的结果</em> <font color="#ff4081"><strong>组成的流</strong></font>,那就来看看 <code>Function</code> 是什么咯.</p></li><li><p><code>@FunctionalInterface public interface Function&lt;T, R&gt;{...}</code> ,注解是 : <code>Represents a function that accepts one argument and produces a result.</code> 这个接口代表一个函数,这个函数接收一个参数(<code>Input Stream</code>),并且会产生一个结果( <code>Output Stream</code> ).</p></li><li><p>在看上面的例子, <code>map</code> 操作返回的就是将 <code>cost+cost*0.12</code>( <code>Function</code> ) 给应用到 <code>costBeforeTaxl</code> (<code>Input Stream</code>)的每一个元素( <code>cost</code> )之后的结果所组成的流( <code>Output Stream</code> ).</p></li></ul><blockquote><p>真是拗口…</p></blockquote><h3 id="使用-Lambda-的-reduce-操作"><a href="#使用-Lambda-的-reduce-操作" class="headerlink" title="使用 Lambda 的 reduce 操作"></a>使用 Lambda 的 reduce 操作</h3><blockquote><p>需求:给出税后总和</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Before java8</span></div><div class="line">List&lt;Integer&gt; costBeforeTax = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);</div><div class="line"><span class="keyword">double</span> total = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (Integer cost : costBeforeTax) &#123;</div><div class="line">    <span class="keyword">double</span> price = cost + .<span class="number">12</span> * cost;</div><div class="line">    total = total + price;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"Total : "</span> + total);</div><div class="line"></div><div class="line"><span class="comment">//In java8 way</span></div><div class="line">List&lt;Integer&gt; costBeforeTaxL = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);</div><div class="line"><span class="keyword">double</span> bill = costBeforeTaxL.stream().map((cost) -&gt; cost + <span class="number">0.12</span> * cost).reduce((sum, cost) -&gt; sum + cost).get();</div><div class="line"><span class="comment">//或者可以用 reduce 两个参数的方法,两个参数的形式,返回的就不是 Optional&lt;T&gt; 对象了, 而直接是 T 对象</span></div><div class="line"><span class="keyword">double</span> bill = costBeforeTaxL.stream().map((cost) -&gt; cost + <span class="number">0.12</span> * cost).reduce(<span class="number">0</span>d,(sum, cost) -&gt; sum + cost)</div><div class="line">System.out.println(<span class="string">"Total : "</span> + bill);</div></pre></td></tr></table></figure><ul><li>先用 <code>map</code> 操作符求出税后的金额,然后在用 <code>reduce</code> 求和.</li><li><code>reduce</code> 有两个重载方法,一个有起始参数,也就种子参数,一个是没有起始参数的.</li></ul><ol><li>一个参数定义: <code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</code> 这个方法的主要作用是把 <code>Stream</code> 元素组合起来。这种方式是没有起始值的,直接依照运算规则（<code>BinaryOperator</code>），和前面 <code>Stream</code> 的第一个、第二个、第 <code>n</code> 个元素组合,返回的是 <code>Optional</code>.</li><li>两个参数定义: <code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator);</code> 其中 <code>T identity</code> 表示的是起始值.上面的例子传入的值是 <code>0d</code> ,所以输出和一个参数形式的输出结果一样,都是 <code>1680</code>,假设此处传入的起始值是 <code>100</code> ,那么输出的结果就是 <code>1780</code>.<code>accumulator</code>：计算的「组合器」，其方法签名为 <code>apply(T t,U u)</code>，在该 <code>reduce</code> 方法中第一个参数 <code>t</code>为上次函数计算的返回值，第二个参数 <code>u</code> 为 <code>Stream</code> 中的元素，这个函数把这两个值计算 <code>apply</code>，得到的「组合」会被赋值给下次执行这个方法的第一个参数。</li><li>也就是说，有起始值的 <code>reduce</code> 返回的是具体的对象，没有起始值返回的是 <code>optianal</code> 对象，因为它可能没有返回的对象，会产生 <code>NOE</code> 异常。</li></ol><ul><li><code>Optional</code> 可以简单的理解为一个容器,可能含有某值,也可能不含,使用这个类的目的是为了尽可能的避免 <code>NullPointerException</code>,若含有,则调用 <code>get()</code> 方法之后,就返回这个值,否则抛 <code>NoSuchElementException</code>.在更复杂的 <code>if (xx != null)</code> 的情况中，使用 <code>Optional</code> 代码的可读性更好，而且它提供的是编译时检查，能极大的降低 <code>NPE</code> 这种 <code>Runtime Exception</code> 对程序的影响，或者迫使程序员更早的在编码阶段处理空值问题，而不是留到运行时再发现和调试。</li><li>上面的例子，<code>BinaryOperator</code> 指的就是  <code>(sum, cost) -&gt; sum + cost</code> ，<code>recuxe</code>  函数返回的就是个 <code>Optional</code> 对象，然后我们通过 <code>get（）</code> 方法拿到 <code>Optional</code> 中含有的值。</li></ul><h3 id="使用-Lambda-的-Collect-操作"><a href="#使用-Lambda-的-Collect-操作" class="headerlink" title="使用 Lambda 的 Collect 操作"></a>使用 Lambda 的 Collect 操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; originalList= Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</div><div class="line">List&lt;Integer&gt; afterFilter = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).filter(n -&gt; n &gt; <span class="number">2</span>).collect(Collectors.toList());</div><div class="line">System.out.printf(<span class="string">"Original List : %s, afterFilter list : %s %n"</span>, originalList, afterFilter);</div></pre></td></tr></table></figure><p>输出:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Original List : [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], afterFilter list : [<span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure></p><ul><li><code>collect</code> 操作用处收集结果，当处理完一个流之后，想看一下处理后的结果，而不是将它们聚合起来，那么就可以用到 <code>Collect</code> 操作符。</li><li>首先是对流里面的每一个元素进行 <code>filter</code> 操作,谓语 <code>x.length()&gt;2</code> 这个表达式返回值为 <code>true</code> 的元素,然后对这些符合标准的元素组成的流进行 <code>collect</code> 操作.</li><li><code>collect</code> 操作也有两个重载的方法:</li></ul><ol><li><code>&lt;R&gt; R collect(Supplier&lt;R&gt; supplier, BiConsumer&lt;R,? super T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</code><ul><li><code>supplier</code> 一个能够创造目标类型实例的<strong>方法</strong></li><li><code>accumulator</code> 一个将元素添加到目标中的<strong>方法</strong></li><li><code>combiner</code> 一个将中间状态的结果整合到一起的<strong>方法</strong><font color="#ff4081">注意上面三个参数都是方法.</font></li></ul></li><li><code>&lt;R,A&gt; R collect(Collector&lt;? super T,A,R&gt; collector)</code><ul><li><code>collector</code> 可以看到,它就是上面 <code>supplier,accumulator,combiner</code> 的聚合体.</li></ul></li></ol><ul><li><p>将上述例子用三个参数的方法改写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</div><div class="line">ArrayList&lt;Integer&gt; result = integerStream.collect(() -&gt; <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), (list, item) -&gt; list.add(item), (aList, bList) -&gt; aList.addAll(bList));</div><div class="line"><span class="comment">//此处也可以使用方法引用</span></div><div class="line"><span class="comment">//ArrayList&lt;Integer&gt; result=integerStream.collect(ArrayList::new,List::add,List::addAll);</span></div><div class="line">System.out.printf(<span class="string">"Original List : %s, afterFilter list : %s %n"</span>, integerStream, result);</div></pre></td></tr></table></figure></li><li><p><code>Collectors</code> :看这个类的名字就类似于 <code>Arrays,Executors</code> 这两工具类，点进源码一看，这确实也是一个工具类，它里面都是静态的工厂方法，用于产生 <code>Collector</code> 类型的参数，<code>toList</code> 和 <code>toSet</code> 就是其中最常见的两个。而通过 <code>Collectors</code> 的静态工厂方法产生的 <code>Collector</code> 的类型由其输入类型和输出类型决定。以 <code>toList()</code> 为例，它的输入类型为 <code>T</code> ，输出类型为 <code>List&lt;T&gt;</code>。对应到上面的例子中，输入类型为 <code>Integer</code> ，所以输出的类型为 <code>List&lt;Integer&gt;</code></p></li></ul><h3 id="使用-Lambda-的-distinct-操作"><a href="#使用-Lambda-的-distinct-操作" class="headerlink" title="使用 Lambda 的 distinct 操作"></a>使用 Lambda 的 distinct 操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">              Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">              .map(x -&gt; x * x)</div><div class="line">              .distinct()</div><div class="line">              .collect(Collectors.toList())</div><div class="line">              .forEach(n-&gt;System.out.print(n+<span class="string">" "</span>));</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">9</span> <span class="number">16</span> <span class="number">25</span> <span class="number">36</span></div></pre></td></tr></table></figure><ul><li>通过上面的例子可以看出来，<code>distince</code> 操作就是去重。</li></ul><h3 id="使用-summaryStatistics-获取几个统计值"><a href="#使用-summaryStatistics-获取几个统计值" class="headerlink" title="使用 summaryStatistics 获取几个统计值"></a>使用 summaryStatistics 获取几个统计值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">IntSummaryStatistics intSummaryStatistics = Stream</div><div class="line">.of(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">56</span>, <span class="number">7</span>, <span class="number">89</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">345</span>, <span class="number">76</span>, <span class="number">8</span>)</div><div class="line">.mapToInt(value -&gt; value)</div><div class="line">.summaryStatistics();</div><div class="line"></div><div class="line">       System.out.println(<span class="string">"max value is:"</span>+ intSummaryStatistics.getMax());</div><div class="line">       System.out.println(<span class="string">"min value is:"</span>+ intSummaryStatistics.getMin());</div><div class="line">       System.out.println(<span class="string">"the average is:"</span>+ intSummaryStatistics.getAverage());</div><div class="line">       System.out.println(<span class="string">"the value is:"</span>+ intSummaryStatistics.getSum());</div><div class="line">       System.out.println(<span class="string">"the count is:"</span>+ intSummaryStatistics.getCount());</div></pre></td></tr></table></figure><ul><li>此方法用于返回流当中各种在摘要数据，包括最大值，最小值，平均值，和，元素个数。</li><li><code>summaryStatistics</code> 方法只有 <code>IntStream、LongStream 和 DoubleStream</code>有。</li></ul><h2 id="Lambda-表达式-VS-匿名类"><a href="#Lambda-表达式-VS-匿名类" class="headerlink" title="Lambda 表达式 VS 匿名类"></a>Lambda 表达式 VS 匿名类</h2><ul><li>从上面举的例子里可以看到，<code>Lambda</code> 表达式用于提到匿名内部类，这两者有一个关键不同之处就是 <code>this</code>.</li><li>匿名类的 <code>this</code> 指向匿名类，而 <code>Lambda</code> 表达式的 <code>this</code> 指向包围 <code>Lambda</code> 表达式的类。</li><li>还有一点不同就是编译方式。<code>Java</code> 编译器将 <code>Lambda</code> 表达式是编译成类的私有方法的。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p><code>Lambda</code>  表达式仅能放入如下代码：预定义使用了 <code>@FunctionalInterface</code> 注释的函数式接口，自带一个抽象函数的方法，或者<code>SAM</code> （<code>Single Abstract Method</code> 单个抽象方法）类型。这些称为  <code>Lambda</code>  表达式的目标类型，可以用作返回类型，或 <code>Lambda</code>  目标代码的参数。例如，若一个方法接收 <code>Runnable</code>、<code>Comparable</code> 或者 <code>Callable</code> 接口，都有单个抽象方法，可以传入  <code>Lambda</code>  表达式。类似的，如果一个方法接受声明于 <code>java.util.function</code> 包内的接口，例如 <code>Predicate、Function、Consumer 或 Supplier</code>，那么可以向其传  <code>Lambda</code>  表达式。</p><p></p></li><li><p><code>Lambda</code>  表达式内可以使用方法引用，仅当该方法不修改 <code>Lambda</code> 表达式提供的参数。本例中的 <code>Lambda</code> 表达式可以换为方法引用，因为这仅是一个参数相同的简单方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list.forEach(n -&gt; System.out.println(n)); </div><div class="line">list.forEach(System.out::println);  <span class="comment">// 使用方法引用</span></div></pre></td></tr></table></figure></li></ol><p>然而，若对参数有任何修改，则不能使用方法引用，而需键入完整地 <code>Lambda</code> 表达式，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list.forEach((String s) -&gt; System.out.println(<span class="string">"*"</span> + s + <span class="string">"*"</span>));</div></pre></td></tr></table></figure></p><p>事实上，可以省略这里的 <code>Lambda</code> 参数的类型声明，编译器可以从列表的类属性推测出来。</p><p></p><ol><li><p><code>Lambda</code> 内部可以使用静态、非静态和局部变量，这称为 <code>Lambda</code> 内的变量捕获。</p><p></p></li><li><p><code>Lambda</code> 表达式在 <code>Java</code> 中又称为闭包或匿名函数。</p><p></p></li><li><p><code>Lambda</code> 方法在编译器内部被翻译成私有方法，并派发 <code>invokedynamic</code> 字节码指令来进行调用。可以使用 <code>JDK</code> 中的 <code>javap</code> 工具来反编译 <code>class</code> 文件。使用 <code>javap -p</code> 或 <code>javap -c -v</code> 命令来看一看 <code>Lambda</code> 表达式生成的字节码。大致应该长这样：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> java.lang.Object  Lambda $<span class="number">0</span>(java.lang.String);</div></pre></td></tr></table></figure><ol><li><code>Lambda</code> 表达式有个限制，那就是只能引用 final 或 final 局部变量，这就是说不能在 <code>Lambda</code> 内部修改定义在域外的变量。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; primes = Arrays.asList(<span class="keyword">new</span> Integer[]&#123;<span class="number">2</span>, <span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;);</div><div class="line"><span class="keyword">int</span> factor = <span class="number">2</span>;</div><div class="line">primes.forEach(element -&gt; &#123; factor++; &#125;);</div><div class="line">Compile time error : <span class="string">"local variables referenced from a  `Lambda`  expression must be final or effectively final"</span></div></pre></td></tr></table></figure></li></ol><p>另外，只是访问它而不作修改是可以的，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; primes = Arrays.asList(<span class="keyword">new</span> Integer[]&#123;<span class="number">2</span>, <span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;);</div><div class="line"><span class="keyword">int</span> factor = <span class="number">2</span>;</div><div class="line">primes.forEach(element -&gt; &#123; System.out.println(factor*element); &#125;);</div></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">10</span></div><div class="line"><span class="number">14</span></div></pre></td></tr></table></figure></p><p>因此，它看起来更像不可变闭包，类似于Python。</p><ol><li>刚开始使用 <code>Lambda</code> 表达式的时候，会感觉特别困惑，有时不能理解这一个箭头一个参数代表的是什么，这种写法引用的是哪个接口的回调方法，这个回调方法的实现是什么，但是会出现这种情况，就是因为 <code>Lambda</code> 将原来需要由客户定义的一些流程给封装了，现在用户只要告诉它「应该怎么做」，具体的操作过程，不需要我们用户来实施，所以这就是最开始使用起来，感觉疑惑的原因吧，这也是函数式编程所带来的影响。</li></ol><h2 id="引用列表"><a href="#引用列表" class="headerlink" title="引用列表"></a>引用列表</h2><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/" target="_blank" rel="external">Java 8 中的 Streams API 详解</a></li><li><a href="http://blog.zhouhaocheng.cn/posts/35" target="_blank" rel="external">Java8中聚合操作collect、reduce方法详解</a></li><li><a href="https://wizardforcel.gitbooks.io/java8-tutorials/content/Java%208%20lambda%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html" target="_blank" rel="external">Java 8 lambda 最佳实践</a></li><li><a href="https://wizardforcel.gitbooks.io/java8-tutorials/content/Java%208%20lambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F10%E4%B8%AA%E7%A4%BA%E4%BE%8B.html" target="_blank" rel="external">Java8 lambda表达式10个示例</a></li><li><a href="https://win-man.github.io/2016/09/24/%E5%85%B3%E4%BA%8E%20Lambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/" target="_blank" rel="external">关于 Lambda 表达式的一些事</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html" target="_blank" rel="external">函数式编程初探</a></li><li><a href="https://my.oschina.net/benhaile/blog/175012" target="_blank" rel="external">Java 8新特性探究（一）通往lambda之路_语法篇</a></li></ul></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/N5q8tne.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要: 去年逛 &lt;code&gt;Github&lt;/code&gt; 准备秋招项目时,就发现 &lt;code&gt;Android&lt;/code&gt; 有的项目使用的语法似乎从来没见过,类似于 &lt;code&gt;(parameters)-&amp;gt;expression&lt;/code&gt; 还有&lt;code&gt;ObjectReference::methodName&lt;/code&gt; 这种类 &lt;code&gt;C++&lt;/code&gt; 语法形式,查找资料之后,知道这个是 &lt;code&gt;Java8&lt;/code&gt; 的新特性:&lt;code&gt;Lambda&lt;/code&gt;,所以就记下了 &lt;code&gt;Lambda&lt;/code&gt; 这个词,后来忙于秋招春招实习,一直也没有取好好学习,昨天在项目当中又看到了这个熟悉的表达式,一脸懵逼,所以准备找几篇 &lt;code&gt;Java8&lt;/code&gt; 教程,好好学习一下”新”姿势.&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://zengfanyu.top/categories/Java/"/>
    
    
      <category term="Java" scheme="http://zengfanyu.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android官方TODO-MVP项目分析（上）---View 层 Presenter 层以及 Contract 分析</title>
    <link href="http://zengfanyu.top/2017/11/13/google-TODO-MVP-sample/"/>
    <id>http://zengfanyu.top/2017/11/13/google-TODO-MVP-sample/</id>
    <published>2017-11-12T16:37:15.000Z</published>
    <updated>2017-11-12T16:19:45.743Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/WQ274RY.png" alt=""></p><p><em>摘要:最近看了一下 <a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">google 官方的 sample</a> ,做的是一个 <code>TODO</code> 应用，使用的是 <code>MVP</code> 模式，之前笔者也学习了一段时间的 <code>MVP</code>，前面写了几篇文章记录学习过程，也有一些思考，最后呈现出来的问题就是 Presenter 层臃肿问题，以及 <code>View</code> 层接口难以管理的问题。比方说 <code>View</code> 层，它是负责 <code>UI</code> 的更新工作，我们希望它里面都是 <code>showXXXZZZ（@Nullable Param p）</code> 这样的更新 <code>UI</code> 状态的方法。在这个 <code>sample</code> 里， <code>google</code> 提供了一种解决接口混乱的方法，用「契约」接口，统一管理 <code>View</code> 层和 <code>Presenter</code> 层的接口，下面就分析下我对这个项目的理解。</em><br><a id="more"></a></p><font face="黑体"><h2 id="项目整体结构分析"><a href="#项目整体结构分析" class="headerlink" title="项目整体结构分析"></a>项目整体结构分析</h2><p><img src="https://i.imgur.com/y37IAgK.png" alt="@TODO-MVP项目结构图"></p><p>因为项目整体使用的是 <code>MVP</code> 模式，所以下面从 <code>MVP</code> 分层的角度来分析；在上面的结构图中，除了 <code>data</code> 包是 <code>Model</code> 层的内容，剩余的四个包里，都是一个包对应一个界面（Activity/Fragment），然后每一个包里有四个类文件,形式分别如下：</p><ul><li><p><code>XxxxActivity</code>：这是 <code>Fragment</code> 的宿主 <code>Acitivity</code>， 同是也是 <code>View</code> 层，但是并没有实现 <code>View</code> 层的接口，主要的 <code>UI</code> 状态更新工作是由 <code>Fragment</code> 来进行的。</p></li><li><p><code>YyyyFragment</code>：这是 <code>MVP</code> 模式中的 <code>View</code> 层，它实现了 <code>View</code> 层的接口，都是 <code>showXxxYyy</code>() 形式的更新 <code>UI</code> 的回调方法。</p></li><li><p><code>ZzzzPresenter</code>：这是 <code>MVP</code> 模式中的 <code>Presenter</code> 层，它负责处理 <code>UI</code> 的事件，并且和 <code>Model</code> 层打交道，通过 <code>Model</code> 层拿到数据。</p></li><li><p><code>PpppContract</code>: 这个类不属于传统 <code>MVP</code> 模式当中的任何一层，它是用于管理 <code>View</code> 层和 Presenter 层的接口的，这个类同一个界面对应的 <code>View</code> 和 <code>Presenter</code> 都要实现， 这样就统一的管理了接口，当我们需要知道 这个 <code>View</code> 层，做了哪些操作的时候，只需要看这个 <code>Contract</code> 类即可，并且对代码模块的移植也有帮助。</p></li><li><p>整个 <code>data</code> 包下，都是 <code>MVP</code> 模式的 <code>Model</code> 层，用于从数据源取数据，在这个 <code>Sample</code> 里涉及到三种类型的数据，服务器端数据，本地数据库数据和内存缓存中的数据，当然了，这里的服务器端数据时模拟耗时过程的，并没有真正涉及到网络连接的操作。</p></li></ul><p>下面拿 <code>task</code> 包下的类来做说明。(其中 <code>ScrollChildSwipeRefreshLayout</code> 和 <code>TaskFilterType</code> 是业务需求相关的辅助类， 这里暂不做分析。)</p><h2 id="tasks-包结构分析"><a href="#tasks-包结构分析" class="headerlink" title="tasks 包结构分析"></a>tasks 包结构分析</h2><p>先看看这个包对应的界面长什么样子：</p><p><img src="https://i.imgur.com/6gtv7ha.png" alt="@图 2.1 主界面图|480*800"></p><p>左边还有一个 <code>DrawerLayout</code> ：</p><p><img src="https://i.imgur.com/uQyWBF4.png" alt="@图 2.2 DrawerLayout 图|480*800"></p><p>点击 <code>ToolBar</code> 上最右边的 <code>icon</code>：</p><p><img src="https://i.imgur.com/3kubJxx.png" alt="@图 2.3 Menu 图 1|480*800"></p><p>点击 <code>ToolBar</code> 上次右边的 <code>icon</code>：</p><p><img src="https://i.imgur.com/H3IAu8H.png" alt="@图 2.4 Menu 图 2|480*800"></p><p>当列表中存在任务时：<br><img src="https://i.imgur.com/2jtMYdN.png" alt="@图 2.5 任务状态为ACTIVE |480*800"><br><img src="https://i.imgur.com/3WzptSU.png" alt="@图 2.6 任务状态为COMPLETED|480*800"></p><p>点击任务，跳转到详情页面，（这个页面不属于这个包下）<br><img src="https://i.imgur.com/Q93mecI.png" alt="@图 2.7 任务详情页面 |480*800"></p><h3 id="TasksActivity"><a href="#TasksActivity" class="headerlink" title="TasksActivity"></a>TasksActivity</h3><p>这是 <code>TasksFragment</code> 的宿主 <code>Activity</code>，它做的工作就是一些控件的初始化操作，然后实例化 <code>TasksFragment</code> 。</p><ul><li>初始化 <code>ToolBar</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Set up the toolbar.</span></div><div class="line">Toolbar toolbar = (Toolbar) find`View`ById(R.id.toolbar);</div><div class="line">setSupportActionBar(toolbar);</div><div class="line">ActionBar ab = getSupportActionBar();</div><div class="line">ab.setHomeAsUpIndicator(R.drawable.ic_menu);</div><div class="line">ab.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure><ul><li>初始化 <code>Navigation Drawer</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Set up the navigation drawer.</span></div><div class="line">mDrawerLayout = (DrawerLayout) find`View`ById(R.id.drawer_layout);</div><div class="line">mDrawerLayout.setStatusBarBackground(R.color.colorPrimaryDark);</div><div class="line">Navigation`View` navigation`View` = (Navigation`View`) find`View`ById(R.id.nav_`View`);</div><div class="line"><span class="keyword">if</span> (navigation`View` != <span class="keyword">null</span>) &#123;</div><div class="line">    setupDrawerContent(navigation`View`);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>初始化对应的 <code>Fragment</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">TasksFragment tasksFragment =</div><div class="line">        (TasksFragment) getSupportFragmentManager().findFragmentById(R.id.contentFrame);</div><div class="line"><span class="keyword">if</span> (tasksFragment == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">// Create the fragment</span></div><div class="line">    tasksFragment = TasksFragment.newInstance();</div><div class="line">    ActivityUtils.addFragmentToActivity(</div><div class="line">            getSupportFragmentManager(), tasksFragment, R.id.contentFrame);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>Presenter</code> 注入 <code>View</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Create the presenter 注入到TaskFragment中</span></div><div class="line">mTasksPresenter = <span class="keyword">new</span> TasksPresenter(</div><div class="line">        Injection.provideTasksRepository(getApplicationContext()), tasksFragment);</div></pre></td></tr></table></figure><p>这里同时将 <code>Model</code> 层的对象给注入到了 <code>Presenter</code> 中，这个 <code>TasksRepository</code> 就是属于 <code>Model</code> 层的，后面分析。</p><ul><li>状态恢复(<code>onCreate</code> 中，也可以直接在 <code>onRestoreInstanceState</code> 方法中操作)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Load previously saved state, if available.</span></div><div class="line"><span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">    TasksFilterType currentFiltering =</div><div class="line">            (TasksFilterType) savedInstanceState.getSerializable(CURRENT_FILTERING_KEY);</div><div class="line">    mTasksPresenter.setFiltering(currentFiltering);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>保存当前显示的 <code>Task</code> 的类别的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">    <span class="comment">//此处需要保存的信息是当前 Task 列表展示界面展示的 Filter Type 信息,</span></div><div class="line">    <span class="comment">// 目的是为了下一次重其他的页面跳回到此页面时,能够正确的显示 对应 Filter Type 的 Task</span></div><div class="line">    outState.putSerializable(CURRENT_FILTERING_KEY, mTasksPresenter.getFiltering());</div><div class="line"></div><div class="line">    <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从一个 <code>Activity</code> 跳到另外一个 <code>Activity</code> 的时候会调用，用于存储当前 <code>Activity</code> 正在显示的 <code>Task</code> 的类别，类别有三种，分别是 <code>COMPLETED_TASK , ACTIVT_TASK , ALL_TASK;</code> 很好理解，就是用于辨别当前界面是显示已经完成的 <code>Task</code> 还是显示暂未完成的，还是都显示，用于下一次从另外页面回到当前页面的时候，显示的是用户上一次的操作。</p><ul><li>剩下的就是 <code>Mene</code> 的初始化 和点击时间的处理了。这里就不贴出代码了。</li></ul><h3 id="TasksContract-中-View-层接口分析"><a href="#TasksContract-中-View-层接口分析" class="headerlink" title="TasksContract 中 View 层接口分析"></a>TasksContract 中 View 层接口分析</h3><p>之前说过， TasksContract 适用于管理 <code>View</code> 层和 <code>Presenter</code> 层的接口的契约接口，我们希望 <code>View</code> 层的方法都是类似于 <code>showXxxZzz()</code> 形式的方法，用于改变 <code>UI</code> 的状态，那么根据上面的截面图，我们分析一下这里的 <code>View</code> 层需要改变哪些状态。</p><blockquote><p>此处涉及到具体的业务逻辑，项目需求，包括每一个控件的点击事件，每一种状态的显示页面 。具体的思路就是，将每一个改变 <code>UI</code> 状态的操作都抽象成接口方法。</p></blockquote><ol><li>当我们从 <code>Model</code> 层取数据的时候，需要展示一个友好交互的页面，提示用户正在加载数据。这里对应接口：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示正在加载中的指示器</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> active true 展示 false 不展示</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLoadingIndicator</span><span class="params">(<span class="keyword">boolean</span> active)</span></span>;</div></pre></td></tr></table></figure><ol><li>当从数据源重拿到数据之后，需要将数据展示到列表上。这里对应接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示列表中的Task</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> tasks tasks</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showTasks</span><span class="params">(List&lt;Task&gt; tasks)</span></span>;</div></pre></td></tr></table></figure><ol><li>当从数据源重拿到数据之后产生错误时回调</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 加载错误回调</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showLoadingTasksError</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>点击右下角的 <code>FloatingActionButton</code>，会调到创建任务的界面。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示添加任务界面,用于跳转至AddEditTaskActivity</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showAddTask</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>点击列表中已经存在的任务，会调转至任务详情页面（图 <code>2.7</code>所示界面），这个操作由点击列表 <code>Item</code> 触发。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示Task的详细信息,跳转至 TaskDetailActivity</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> taskId taskId</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">void</span> showTaskDetails`UI`(String taskId);</div></pre></td></tr></table></figure><ol><li>当任务被标记为 <code>COMPLETED</code> 时更新 <code>UI</code> 状态（图2.6所示），这个操作是 <code>checkBox</code> 被点击触发的。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * FilterType 被置为 completed 状态时回调</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showTaskMarkedComplete</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>当任务被标记为 <code>ACTIVE</code> 时更新 <code>UI</code> 状态 （图2.7所示），这个操作是 <code>checkBox</code> 被点击触发的。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * FilterType 被置为 Active 状态时的回调</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showTaskMarkedActive</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>当被标记为 <code>COMPLETED</code> 状态的任务被删除时 <code>UI</code> 状态的更新，这个操作是图 <code>2.3</code> 当中所示 <code>Menu</code> 中 <code>Clear Completed</code> 被点击时触发。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 清除FilterType为Completed状态的Task</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showCompletedTasksCleared</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>展示所有状态为 <code>ACTIVE</code> 的任务，这个操作是图 <code>2.4</code> 当中所示 <code>Menu</code> 中 <code>Active</code> 被点击时触发</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示所有 FilterType 为 Active 的 Task 的回调</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showActiveFilterLabel</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>没有状态为 <code>ACTIVE</code> 的任务，更新 <code>UI</code> 界面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示没有 FilterType为 Active 时的界面 回调</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showNoActiveTasks</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>展示所有状态为 <code>COMPLETED</code> 的任务，这个操作是图 <code>2.4</code> 当中所示 <code>Menu</code> 中 <code>COMPLETED</code> 被点击时触发</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示所有 FilterType 为 Completed 的Task的回调</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showCompletedFilterLabel</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>没有状态为 <code>COMPLETED</code> 的任务，更新界面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示没有 FilterType为 Completed 时的界面 回调</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showNoCompletedTasks</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>展示所有的任务，这个操作是图 <code>2.4</code> 当中所示 <code>Menu</code> 中 <code>All</code> 被点击时触发</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示所有 FilterType的回调</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showAllFilterLabel</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>当前还没有任务展示时，更新 <code>UI</code> 的状态</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 没有Task 时的回调</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showNoTasks</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>当成功添加了一条任务之后，需要更新 <code>UI</code> 的状态，</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示add一条Task成功后的 回调</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showSuccessfullySavedMessage</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>因为这里的 <code>View</code> 层是用 <code>Fragment</code> 对象实现的，所以这里用于判断当前 <code>Fragment</code> 视图是否还存在</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 当前视图的活跃状态</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> true active&lt;p&gt;&lt;/p&gt;false destroy</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>如图 <code>2.4</code> 所示，这里的显示的效果是使用 <code>PopMenu</code> 做的，所以当我们点击 <code>ToolBar</code> 上次右边的图标时，回调此方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示 Toolbar上面的Menu的 选择 展示 FilterType 的popmenu</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showFilteringPopUpMenu</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><blockquote><p>可以发现 <code>View</code> 层接口大体分为四类：</p><ul><li>涉及到数据更新或者数据获取的改变 <code>UI</code> 状态，第 6，7，8，9 ，11 ，13，15。</li><li>页面跳转，第 4 ，5 两个用于启动其他 Activity 的。</li><li>不涉及到数据更新和数据获取的改变 <code>UI</code> 状态，1，2，3，10，12 ，14。其中第 2 条只是展示已经获取到的数据，没有涉及到数据的获取和改变。</li><li>辅助方法 16，17</li></ul></blockquote><h3 id="Contract-中-Presenter-层接口分析"><a href="#Contract-中-Presenter-层接口分析" class="headerlink" title="Contract 中 Presenter 层接口分析"></a>Contract 中 Presenter 层接口分析</h3><p>在 <code>TasksContract</code> 当中，不仅仅定义了 <code>View</code> 层的接口，并且还定义了 <code>Presenter</code> 层的接口。<strong>这一层的接口肯定是服务于 <code>View</code> 层的</strong>，应为 <code>Presenter</code> 层需要响应 <code>View</code> 层的事件，然后和 <code>Model</code> 层交互，然后再根据和 <code>Model</code> 层交互的接口，通知 <code>View</code> 层更新对应的 <code>UI</code> 状态。所以 <code>Presenter</code> 层接口的设置肯定与上面 <code>View</code> 层的 <code>UI</code> 状态改变接口有关，下面来分析一下：</p><ol><li>针对 <code>View</code> 层的第 <code>9， 11， 13</code> ，条需求，分别需要展示 <code>ACTIVE COMPLETED</code> 和所有状态的数据， 那么这个数据从哪儿来呢？就需要 <code>Presenter</code> 层来提供，所以这里需要有一个接口：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 从 `Model` 层获取数据的回调</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> forceUpdate 是否刷新</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadTasks</span><span class="params">(<span class="keyword">boolean</span> forceUpdate)</span></span>;</div></pre></td></tr></table></figure><ol><li>并且 <code>Presenter</code> 层还需要记录下当前页面的展示哪种类型的数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 设置当前列表显示的 Task 的 type</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> requestType &#123;<span class="doctag">@link</span> TasksFilterType&#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFiltering</span><span class="params">(TasksFilterType requestType)</span></span>;</div></pre></td></tr></table></figure><ol><li>还并且，记下当前页面展示的数据类型，是要在之前 <code>TasksActivity</code> 中的 <code>onSaveInstanceState</code> 方法中获取，然后保存的，所以这里需要提供一个 <code>Getter</code> 方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 拿到当前列表显示的 Task 的 type</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> TasksFilterType&#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">TasksFilterType <span class="title">getFiltering</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>针对 <code>View</code> 层的第 <code>4</code> 条需求，需要点击 <code>FloatingActionButton</code> 跳转至编辑界面，那么针对这个需求，<code>Presenter</code> 层提供一个接口方法给他调用：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 添加新的 Task 的回调</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addNewTask</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><p>其实这个方法在最终实现的时候，就是调用 <code>View</code> 第 4 个需求的接口：<code>void showAddTask();</code> 然后在这个接口的实现方法就是实例化 <code>Intent</code> 然后 <code>startActivityForResult</code>。其实完全可以直接在 <code>FloatingActionButton</code> 的 <code>onClick</code> 回调方法里就调用其本身的 <code>showAddTask</code> 方法跳转至编辑页面，但是人家没有这样做，而是调用 <code>presenter</code> 的 <code>addNewTask</code> 方法，通过 <code>Presenter</code> 层的这个方法在去调用 <code>View</code> 层的 <code>showAddTask</code> 方法，为什么做么做？仔细看项目代码可以发现，<font color="#ff4081"><strong><code>View</code> 层「不涉及到数据更新和数据获取的改变 <code>UI</code> 状态」类别的接口方法都是被 <code>Presenter</code> 层调用的，而 <code>Presenter</code> 层所有的接口方法都是被 <code>View</code> 层调用的，因为各自的接口方法是需要对方的事件来驱动。</strong></font> 所以为了保证这一特性的统一表现，这里就采取了这样迂回的方式，来跳转至编辑界面。</p><ol><li>针对 <code>View</code> 层的第 5 条需求，点击列表 Item 的时候，会跳转至详情界面，这个过程和上面点击 <code>FloatingActionButton</code> 一样，不做分析。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 查看Task详情的回调</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> requestedTask special task</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">openTaskDetails</span><span class="params">(@NonNull Task requestedTask)</span></span>;</div></pre></td></tr></table></figure><ol><li>针对 <code>View</code> 层第 6 条需求，需要将某一条任务标记为 <code>COMPLETED</code> 状态，那么不仅仅是在 <code>UI</code> 上要做改变，还要将数据源中的本条数据给标记为 <code>COMPLETED</code> 状态，所以 <code>Presenter</code> 层要提供这个需求的数据支撑：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 列表Item的checkBox 从false到true时的回调</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> completedTask special task</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">completeTask</span><span class="params">(@NonNull Task completedTask)</span></span>;</div></pre></td></tr></table></figure><ol><li>针对 <code>View</code> 层的第 7 条需求，和上一条一样，不做分析。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 列表Item的checkBox 从true到false时的回调</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> activeTask special task</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">activateTask</span><span class="params">(@NonNull Task activeTask)</span></span>;</div></pre></td></tr></table></figure><ol><li>针对 <code>View</code> 层的第 8 条需求，删除标记为 <code>COMPLETED</code> 的任务，不仅仅要在 <code>UI</code> 上做改变，在数据源中也是需要将它删除的，所以在 <code>Presenter</code> 层提供这个需求的数据支撑。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 清除FilterType为Completed状态的Task</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearCompletedTasks</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><ol><li>针对 <code>View</code> 层的第 <code>15</code> 条需求，<code>showSuccessfullySavedMessage</code> 这个方法是成功添加了一条数据返回此界面之后调用，那么就<strong>本应该</strong>是在此界面的的 <code>onActivityResult</code> 方法中调用，但是由于和 Presenter 层第 <code>4</code> 个方法一样的原因，这里也是采取了迂回的方式，先通知 <code>Presenter</code> 层，再由 <code>Presenter</code> 层来回调。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 当一个Task成功添加进来时,返回到TasksFragment时的回调</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> requestCode requestCode</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> resultCode  resultCode</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">result</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode)</span></span>;</div></pre></td></tr></table></figure><h3 id="View-层接口的基类"><a href="#View-层接口的基类" class="headerlink" title="View 层接口的基类"></a>View 层接口的基类</h3><p>根据 <code>MVP</code> 模式的原理，<code>View</code> 层是一定持有一个 <code>Presenter</code> 层对象的引用的，所以这里创建一个所有 <code>View</code> 层接口的基类，里面就一个接口方法，用于设置 <code>View</code> 对应的 <code>Presenter</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Base</span>`<span class="title">View</span>`&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * `View`必须要实现的方法,保持对Presenter的引用</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> presenter</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(T presenter)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Presenter-层接口的基类"><a href="#Presenter-层接口的基类" class="headerlink" title="Presenter 层接口的基类"></a>Presenter 层接口的基类</h3><p>由于每一次回到 <code>View</code> 层界面的时候，我们都需要展示当前需要被展示的数据（需要被展示的数据是根据当前的 <code>FilterType</code> 来决定的），由于 <code>View</code> 层不涉及数据的缓存，那么我们就需要有一个方法<strong>在每一次回到一个 <code>View</code> 层界面的时候</strong>都通知 <code>Presenter</code> 层去取数据。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Presenter必须实现的方法,用于开始获取数据并且刷新界面,</span></div><div class="line"><span class="comment">     * 在Fragment的onResume方法中调用</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于 <code>Fragment</code> 来说，每一次回到一个 <code>Fragment</code> 的时候，<code>onResume</code> 都会调用，就放在这里调用适合。</p><h3 id="TasksContract-接口"><a href="#TasksContract-接口" class="headerlink" title="TasksContract 接口"></a>TasksContract 接口</h3><p>分析这么多，最终这个接口长这个样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TasksContract</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> `<span class="title">View</span>` <span class="keyword">extends</span> <span class="title">Base</span>`<span class="title">View</span>`&lt;<span class="title">Presenter</span>&gt; </span>&#123;</div><div class="line">       <span class="comment">//2.2小结中分析的所有接口</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line">      <span class="comment">//2.3小结中分析的所有接口</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个接口 <code>View</code> 层和 <code>Presenter</code> 层各自实现其中的子接口。</p><h3 id="tasks-包下-View-层和-Presenter-层实现类"><a href="#tasks-包下-View-层和-Presenter-层实现类" class="headerlink" title="tasks 包下 View 层和 Presenter 层实现类"></a>tasks 包下 View 层和 Presenter 层实现类</h3><p>接口都定义好了，接下来就是用 <code>TasksFragment</code> 和 <code>TaskPresenter</code> 分别去实现 <code>TasksContract</code> 中的接口了，这部分涉及到具体的业务逻辑，所以不做分析，这里只分析项目结构方面。下面笔者从 <code>google</code> 库中 <code>fork</code> 过来的，添加了部分注释：</p><ul><li><a href="https://github.com/zengfanyu/TODO-`MVP`/blob/master/app/src/main/java/com/example/android/architecture/blueprints/todoapp/tasks/TasksContract.java" target="_blank" rel="external">TasksContract.java</a></li><li><a href="https://github.com/zengfanyu/TODO-`MVP`/blob/master/app/src/main/java/com/example/android/architecture/blueprints/todoapp/tasks/TasksActivity.java" target="_blank" rel="external">TasksActivity.java</a></li><li><a href="https://github.com/zengfanyu/TODO-`MVP`/blob/master/app/src/main/java/com/example/android/architecture/blueprints/todoapp/tasks/TasksFragment.java" target="_blank" rel="external">TasksFragment .java</a></li><li><a href="https://github.com/zengfanyu/TODO-`MVP`/blob/master/app/src/main/java/com/example/android/architecture/blueprints/todoapp/tasks/TasksPresenter.java" target="_blank" rel="external">TasksPresenter.java</a></li></ul><h3 id="小结-View-层和-Presenter-层接口方法"><a href="#小结-View-层和-Presenter-层接口方法" class="headerlink" title="小结 View 层和 Presenter 层接口方法"></a>小结 View 层和 Presenter 层接口方法</h3><ol><li>到这里，<code>View</code> 层和 <code>Presenter</code> 层的接口都都分析完了，回过头来再看看，可以发现一个很有意思的地方，在分析完 <code>View</code> 层接口之后，笔者将 <code>View</code> 层接口归纳为了四类，那么在结合 <code>Presenter</code> 层的接口方法看看就会发现，<code>Presenter</code> 层接口方法是针对上面总结的 「涉及到数据更新或者数据获取的改变 <code>UI</code> 状态」，「页面跳转」，这两类接口方法的辅助，去除掉「页面跳转」，这个不在 <code>MVP</code> 范畴之内，那么剩下的就是，<strong>「涉及到数据更新或者数据获取的改变 <code>UI</code> 状态」</strong> 这个类别下的接口方法了。</li></ol><ul><li><strong>「涉及到数据更新或者数据获取的改变 <code>UI</code> 状态」</strong> 这个类别下的接口方法是需要数据作为支撑的，而 <code>View</code> 层本身只负责 <code>UI</code> 的状态改变，不涉及到数据的获取操作，所以这些数据就需要从 <code>Presenter</code> 层中获取。</li><li>获取到了之后，再到 <code>Presenter</code> 层的接口方法中去回调 <code>View</code> 层的 <strong>「不涉及到数据更新或者数据获取的改变 <code>UI</code> 状态」</strong>的接口方法。</li><li>这么一来，<code>View</code> 层和 <code>Presenter</code> 层通过 <code>TasksContract</code>  契约类，完美的契合在一起，这两层的实现类代码中，互相之间都是<strong>接口依赖</strong>，大大增加了代码的可扩展性。</li></ul><ol><li><p><strong><code>View</code> 层接口方法的设置完全是从业务逻辑出发的，也就是从需求的角度出发。 <code>Presenter</code> 层是服务于 <code>Presenter</code> 层，所以它的接口的设置是为了支撑 <code>View</code> 层的逻辑。</strong>。举个例子：比如说用户<strong>点击这个按钮</strong>，需要有什么样的一个效果，那么我就针对这个操作，在 <code>View</code> 层接口里写一个接口方法；<strong>获取数据成功</strong>之后，我们需要展示出来，针对这个操作在 <code>View</code> 层接口里写一个接口方法；<strong>没有获取到任何数据</strong>，需要给用户显示一个友好的界面，针对这个操作，又在 <code>View</code> 层接口里写一个接口方法。但是这些操作是需要有支撑的，因为 <code>View</code> 层本身是不具备它将要更新的 <code>UI</code> 所需要的的数据的，所以这时候就是靠 <code>Presenter</code> 层来支撑 。</p><p></p></li><li><p>这种方式，也让我联想到，如果是团队开发的话，当产品给出原型图了之后，针对每一张原型图当中每一个控件的操作，需要展示的状态，先定好接口，写好 <code>Contract</code> 契约接口，然后团队成员在到各自的分支上并行开发，是否可以大大提高工作效率？这个还有待商榷。</p></li></ol><h2 id="看完这个-Sample-之后的一些感受"><a href="#看完这个-Sample-之后的一些感受" class="headerlink" title="看完这个 Sample 之后的一些感受"></a>看完这个 Sample 之后的一些感受</h2><ol><li>如果不看人家 <code>google</code> 工程师的源码，只给我看 <code>app</code> 最后的效果，我也能百分百复制出来一个一模一样的，但是我的代码在复用性，鲁棒性，可扩展性方面肯定没有人家的棒，看这个项目的代码真的很舒服，行云流水般的感觉，在编码习惯方面有几点真的十分赞：</li></ol><ul><li>分包很明确，每一包下只有和这个包功能相关的代码，不用到处去找相关类，关看包结构就能得到项目大致结构。</li><li>包、类、变量、方法、接口等的命名十分规范，命名都是有意义的，更不存在什么 <code>MyXXXX</code> 这种命名方式，观看名字就能知道这个东西是干嘛的。</li><li>注释十分详细，虽然我在阅读的过程中，添加了中文注释，但是人家本身的英文注释就有很多，每一个文件都有注释用于说明这个文件的用途；用途不是那么显而易见的方法也都有注释，真的是大大减少了我们的阅读难度。这一点很多第三方的框架也做的特别棒，前阵子看 <code>Universal-Image-Loader</code> 的源码，注释也十分详细，并且使用 <code>javadoc</code>。</li><li>代码在多处做了容错性处理，变量只要在使用的时候，就会去 <code>checkNullOrEmpty</code>，这个项目里用的是 <code>Guava</code> 中的 <code>Preconditions</code> 工具类，很方便。</li></ul><ol><li><p>发现自己基础方面不够扎实，整个项目涉及到很多 Android 的基础知识，比如说 <code>Activity</code> 和 <code>Fragment</code> 的生命周期，重要生命周期方法的作用，调用时机；<code>Activity</code> 和 <code>Fragment</code> 之间的通信；关于 <code>ToolBar</code> 的使用；关于 <code>Menu</code> 菜单的使用；关于     <code>android.support.v4.app.NavUtils</code> 这个工具类的使用等等，不一一列举了。总之体现了一个问题，我真的还很菜。</p><p></p></li><li><p><code>contract</code> 接口和 <code>Model</code> 层的设计，确实很棒，让传统 <code>MVP</code> 模式如虎添翼。</p><p></p></li><li><p>希望自己以后再工作当中，从编码习惯方面入手，增强代码的规范性，同时也不能忘了基础的巩固，要学的真的有很多。</p><p></p></li><li>好像是 <code>Linux</code> 的爸爸说过 <code>Read the fuck code !</code>阅读源码，真的可以学习很多姿势，也能暴露出自己身上存在的很多问题，当然了，前提是这个源码十分优秀，这个是谷歌官方的 <code>Sample</code> 库，我感觉维护这个库的人就是官方文档 <code>API</code> 示例编写的那一群老哥，因为很多代码的风格和使用的方式，和官方文档上一模一样，比如说在 <code>Model</code> 层使用 <code>SQLite</code> 的代码，就和官网上的文档一模一样，所以这个源码，必须是很优秀的！</li></ol><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>上面相当于只分析了 <code>View</code> 层和 <code>Presenter</code> 层的结构和实现思路，还有 <code>Model</code> 层没有分析，<code>Model</code> 层是这个 Sample 在传统 <code>MVP</code> 模式当中，除了 <code>Contract</code> 之外，最优雅的设计方式，由于篇幅的原因，<code>Model</code> 层相关的留到下一篇文章分析。 </p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/WQ274RY.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要:最近看了一下 &lt;a href=&quot;https://github.com/googlesamples/android-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;google 官方的 sample&lt;/a&gt; ,做的是一个 &lt;code&gt;TODO&lt;/code&gt; 应用，使用的是 &lt;code&gt;MVP&lt;/code&gt; 模式，之前笔者也学习了一段时间的 &lt;code&gt;MVP&lt;/code&gt;，前面写了几篇文章记录学习过程，也有一些思考，最后呈现出来的问题就是 Presenter 层臃肿问题，以及 &lt;code&gt;View&lt;/code&gt; 层接口难以管理的问题。比方说 &lt;code&gt;View&lt;/code&gt; 层，它是负责 &lt;code&gt;UI&lt;/code&gt; 的更新工作，我们希望它里面都是 &lt;code&gt;showXXXZZZ（@Nullable Param p）&lt;/code&gt; 这样的更新 &lt;code&gt;UI&lt;/code&gt; 状态的方法。在这个 &lt;code&gt;sample&lt;/code&gt; 里， &lt;code&gt;google&lt;/code&gt; 提供了一种解决接口混乱的方法，用「契约」接口，统一管理 &lt;code&gt;View&lt;/code&gt; 层和 &lt;code&gt;Presenter&lt;/code&gt; 层的接口，下面就分析下我对这个项目的理解。&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（七）终篇---关于对MVP模式中代码臃肿问题的思考</title>
    <link href="http://zengfanyu.top/2017/11/05/MVP7/"/>
    <id>http://zengfanyu.top/2017/11/05/MVP7/</id>
    <published>2017-11-05T13:27:15.000Z</published>
    <updated>2017-11-05T13:27:20.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/d1aRBz6.png" alt=""></p><p>摘要：在学习 MVP 模式的过程当中，见到很多文章都提到一句话：「使用 MVP 模式引入了 Presenter 层，这样可以将 View 层和 Model 层解耦，但是项目的代码量会大大增加，不过这个牺牲是值得的。」但是这个如果不做处理的话，随着项目体量的扩大，项目当中会充斥着很多相同逻辑的代码，是在是不能忍，通过前面几章的封装可以缓解这个情况，但是还剩下一个问题是目前解决不了的，那就是 Presenter 的管理问题和 View 层无关代码问题，这一篇就针对这两个问题记录一下思路。</p><a id="more"></a><h2 id="学习-MVP-模式的过程中引发的一些思考"><a href="#学习-MVP-模式的过程中引发的一些思考" class="headerlink" title="学习 MVP 模式的过程中引发的一些思考"></a>学习 MVP 模式的过程中引发的一些思考</h2><p>最近一个月都在学习 <code>MVP</code> 模式，自己也动手做了几个小 <code>Demo</code>，由于 <code>Demo</code> 规模不大，所以代码臃肿的问题没有很好的反映出来，不过却是反应出来了其他的问题。比如当我需要实现另外一个需求的时候，我需要去重新创建 <code>M V P</code> 三层的代码，而这三层的代码很多逻辑都是相似的，比如说 <code>Model</code> 层就是去访问服务器端请求数据，然后将数据回调到 <code>Presenter</code> 层，只是访问的服务器端 <code>URL</code> 地址不同，返回的数据不同，这个差异性通过对网络请求工具做封装，并且封装 <code>Model</code> 层相同逻辑代码，可以很好的解决；再比如说 <code>View</code> 层会涉及到很多 <code>UI</code> 界面的刷新问题，常用的 <code>ProgressBar</code>，<code>Toast</code> ，显示错误信息状态码等基本功能，也可以通过封装 <code>BaseMvpActivity</code> 和 <code>IBaseView</code> 来解决，所以这就是前面六篇文章的由来。至于代码臃肿所体现出的问题，我总结为如下两个：</p><ul><li><p><code>View</code> 层中充斥这各种事件的分发和事件的注册，我们希望 <code>View</code> 层是这样的：只有 <code>onXxxxZzzz()</code> 形式的回调方法用于改变UI，比如： <code>onLoadMessage(List&lt;Message&gt;)</code> 回调在加载完 <code>Message</code> 之后来进行UI的更新，那么事件的注册和分发就需要到其他地方去处理。</p></li><li><p><code>View</code> 层和 <code>Prensenter</code> 层接口的管理问题，比如当我们需要移植一个模块的时候，由于 <code>View</code> 层和 <code>Presenter</code> 是紧密相连的，所以这两层需要一同移植，不过可能由于项目体量的原因，<code>Presenter</code> 和 <code>View</code> 的接口比较多，没办法一次性的移植，需要不断的测试。 </p></li></ul><blockquote><p>英国计算机学家说过一句话：<br>All problems in computer science can be solved by another level of indirection.<br>翻译成中文就是：计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。</p><p>比如十分复杂的Internet国际互联网络中数据传输的问题，也是通过分层来决绝的，这可以体现在 TCP/IP 四层模型和 OSI 七层模型当中。</p><p> 这么复杂的问题都可以引入中间层来解决，那么 MVP 中的问题就更不在话下了。</p></blockquote><h2 id="关于解决上述两个问题的思路"><a href="#关于解决上述两个问题的思路" class="headerlink" title="关于解决上述两个问题的思路"></a>关于解决上述两个问题的思路</h2><h3 id="View-层臃肿问题解决思路"><a href="#View-层臃肿问题解决思路" class="headerlink" title="View 层臃肿问题解决思路"></a>View 层臃肿问题解决思路</h3><p>第一个问题，<a href="http://www.cnblogs.com/tiantianbyconan/p/5036289.html" target="_blank" rel="external">天天_byconan</a>，大神的博客中有很好的解决思路，下图也是摘抄自他的博客。</p><p>先上两张图：</p><h4 id="引入-PresenterProxy-层"><a href="#引入-PresenterProxy-层" class="headerlink" title="引入 PresenterProxy 层"></a>引入 PresenterProxy 层</h4><p><img src="https://i.imgur.com/893kHiF.jpg" alt=""></p><ul><li>通过使用一个 <code>Presenter</code> 层代理的方式，在 <code>PresenterProxy</code> 中处理各种时间机制，<code>View</code> 中维护一个对 <code>PresenterProxy</code> 的引用，<code>PresenterProxy</code> 也实现了真实 <code>Presenter</code> 层的接口，这样就可以在 <code>View</code> 中通过代理调用真实的 <code>Presenter</code> 层对象。</li></ul><h4 id="引入-Controller-层"><a href="#引入-Controller-层" class="headerlink" title="引入 Controller 层"></a>引入 Controller 层</h4><p><img src="https://i.imgur.com/bYBS8hb.jpg" alt=""></p><ul><li>为 <code>MVP</code> 模式增加一层专门用于处理各种时间派发的 <code>Controller</code> 层，<code>Controller</code> 层的作用仅仅是用于处理事件，并根据事件通过维护的 <code>Presenter</code> 层对象派发到对应的业务当中去，也就是说 <code>View</code> 层只有一个 <code>Controller</code> 对象， <code>View</code> 层不会主动的去调用 <code>Presenter</code> 层对象，但是 <code>Controller</code> 层和 <code>Presenter</code> 层都可能回调到 <code>View</code> 层来刷新UI。</li></ul><p>这两张图就为我们提供了很好的解决思路，虽然我还没有动手实践过，但是从思路上来说，是没有问题的。</p><h3 id="Presenter-和-View-层接口管理问题解决思路"><a href="#Presenter-和-View-层接口管理问题解决思路" class="headerlink" title="Presenter 和 View 层接口管理问题解决思路"></a>Presenter 和 View 层接口管理问题解决思路</h3><p>在笔者查看了大量的文章资料之后，发现这个问题 <code>Google</code> 已经给出了一个十分好的的解决思路，这个答案就在 <a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/" target="_blank" rel="external">官方的TODO-MVP Sample</a>里，这个 <code>Demo</code> 通过用 <code>MVP</code> 模式实现了一个TODO应用，先贴一下这个应用在 <code>Android Studio</code> 中的代码分包情况：</p><p><img src="https://i.imgur.com/y37IAgK.png" alt=""></p><p>整个 <code>APP</code> 等架构十分的清晰，不愧是出自 <code>Google</code> 大牛之手！！！</p><ul><li><p>管理接口的核心类是每一个模块当中的 <code>XXXXContract</code> 接口</p></li><li><p>并且这个项目当中的 <code>Model</code> 层是它最大亮点， 上图中 <code>data</code> 包下就是它的 <code>Model</code> 层， <code>TasksRepository</code> 维护了两个数据源，一个是本地（<code>SQLite</code> 数据库），一个是远程（网络服务器），并且将不同的数据源抽象成为 <code>TaskDataSource</code> 接口，这种面向接口编程的思想，让我们很容易的修改数据源，或者是扩展数据源，这也是依赖倒置原则的体现。</p></li></ul><p>放一下项目整体架构图：</p><p><img src="https://github.com/googlesamples/android-architecture/wiki/images/mvp.png" alt=""></p><blockquote><p>出自：<a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/" target="_blank" rel="external">https://github.com/googlesamples/android-architecture/tree/todo-mvp/</a></p></blockquote><p>接下来准备好好研究一下这个项目的架构和实现，并且这个 <code>Google</code> 的开源库是用不同的架构去实现相同的 APP，提供了很多架构的基本应用：<code>clean</code> <code>dagger</code> <code>rxjava</code> <code>databinding</code> 等，有空一定好好研究。</p><h2 id="又立-Flag"><a href="#又立-Flag" class="headerlink" title="又立 Flag"></a>又立 Flag</h2><ul><li><p><code>MVP</code> 模式也算是入门了吧，后面准备结合上面的 <code>TODO-MVP</code> 项目，在练练手，然后把上面提到的几个思路好好梳理一下，关于 <code>TODO-MVP</code> 项目也准备写一篇文章总结记录一下。</p></li><li><p>关于 <code>Retrofit</code> 的使用我也看了好几篇文章，基本的使用应该是没问题的了，不过在这个过程中，感觉自己缺乏服务器端知识，什么 <code>RESTful API</code> ，什么 <code>URL</code> 的构成什么的，没有系统的了解过(对，就是写 <code>Retrofit</code> 的网络请求接口的时候，有点迷失了~)，后面这一块要恶补一下。</p></li><li><p>下一个就是 <code>Dagger2</code> 了， 关于 <code>Dagger2</code> 也看了几篇文章，感觉它的概念性的东西确实挺多的，上手不是太容易，不过也没关系，慢慢来。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/d1aRBz6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;摘要：在学习 MVP 模式的过程当中，见到很多文章都提到一句话：「使用 MVP 模式引入了 Presenter 层，这样可以将 View 层和 Model 层解耦，但是项目的代码量会大大增加，不过这个牺牲是值得的。」但是这个如果不做处理的话，随着项目体量的扩大，项目当中会充斥着很多相同逻辑的代码，是在是不能忍，通过前面几章的封装可以缓解这个情况，但是还剩下一个问题是目前解决不了的，那就是 Presenter 的管理问题和 View 层无关代码问题，这一篇就针对这两个问题记录一下思路。&lt;/p&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2基础内容归纳</title>
    <link href="http://zengfanyu.top/2017/11/04/Dagger/"/>
    <id>http://zengfanyu.top/2017/11/04/Dagger/</id>
    <published>2017-11-04T06:37:15.000Z</published>
    <updated>2017-11-04T10:08:19.466Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/eJQyHTv.png" alt=""></p><p><em>摘要：最近看了很多讲 Dagger2 的文章，发现Dagger中很多基础的概念问题真的挺缥缈，很难理解透彻，其中有几篇确实写得不错，这里将他们总结一下，底部给上参考文章链接。</em></p><a id="more"></a><h2 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h2><p><code>@Inject</code> 注解只是 <code>JSR-330</code> 中定义的注解,这个注解本身是没有意义的,它需要依赖于注入框架才有意义,用于标记需要被注入框架注入的方法,属性,构造方法,也就是说呗 <code>@Inject</code> 标记的就是用于提供依赖的.</p><h3 id="Inject-定义"><a href="#Inject-定义" class="headerlink" title="@Inject 定义"></a>@Inject 定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inject &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Inject-的使用"><a href="#Inject-的使用" class="headerlink" title="@Inject 的使用"></a>@Inject 的使用</h3><ol><li>构造方法注入</li></ol><p><code>@inject</code> 注解在在构造器注入上又有两层意思</p><ul><li><p>告诉 <code>Dragger2</code> 可以使用这个构造方法构建对象用于提供依赖</p></li><li><p>注入构造方法所需要的参数的依赖</p></li></ul><ol><li>属性注入</li></ol><p>用于标注在属性上,<font color="#ff8000">被标注的属性不能用 private 修饰</font>,否则无法注入</p><ol><li>方法注入</li></ol><p>标注在 <code>public</code> 方法上,<code>Dagger2</code> 会在构造方法执行结束之后,立刻调用被 <code>@inject</code> 标注的方法.</p><blockquote><p>方法注入和属性注入没有本质的区别，那么什么时候用该使用方法注入，什么时候应该使用属性注入呢，比如依赖需要使用 <code>this</code> 对象的时候，就适合使用方法注入，因为方法注入是在构造方法执行结束之后就调用的，所以它可以提供安全的 <code>this</code> 对象。</p></blockquote><h3 id="Inject-的-弊端"><a href="#Inject-的-弊端" class="headerlink" title="Inject 的 弊端"></a>Inject 的 弊端</h3><ol><li><p>假设我们现在依赖了第三方的框架,这个第三方的框架我们是不能修改的,所以我们无法注入.</p></li><li><p>如果某个用于提供依赖的类具有多个构造方法,我们只能标注一个,无法标注多个</p></li><li><p>当我们使用依赖倒置原则的时候，因为需要注入的对象是抽象的，因此也如法注入</p></li></ol><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>Component 负责将 被依赖对象 给注入到 需要依赖对象 当中,类似于一个中间层.</p><h3 id="Component-定义"><a href="#Component-定义" class="headerlink" title="Component 定义"></a>Component 定义</h3><p><code>Dagger2</code> 是使用 <code>@Component</code> 来完成依赖注入的, 定义如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</div><div class="line">    Class&lt;?&gt;[] modules() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">    Class&lt;?&gt;[] dependencies() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>需要注意几点:</p><ol><li><code>Component</code> 需要用接口来定义,</li><li>接口命名方式推荐为: <code>*TargetClassName*Component</code></li><li>在编译之后,<code>Dagger2</code> 会生成 <code>Dagger*TargetClassName*Component</code> ,这是 <code>*TargetClassName*Component</code> 接口的实现</li><li>在 <code>TargetClass</code> 中使用 <code>DaggerTargetClassNameComponent</code> 就可以实现依赖注入</li></ol><h3 id="Component-中定义方法的方式"><a href="#Component-中定义方法的方式" class="headerlink" title="@Component 中定义方法的方式"></a>@Component 中定义方法的方式</h3><p><strong>1. <code>void inject(TargetClassName calss)</code></strong></p><p><code>Dagger2</code> 会从 <code>TargetClass</code> 开始查找 <code>@Inject</code> 注解,自动生成依赖注入的代码,调用 <code>inject</code> 即可完成依赖的注入</p><p><strong>2. <code>TargetClass getTargetClass()</code></strong></p><p><code>Dagger2</code> 会到 <code>TargetClass</code> 中寻找被<code>@Inject</code> 注解的构造方法,自动生成提供 <code>TargetClass</code> 依赖的代码,这种方式一般用于为其他的 <code>Component</code> 提供依赖,即一个 <code>Component</code> 作为另外一个 <code>Component</code> 的依赖</p><p><strong>3. 使用 @SubComponent 的方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AComponpent</span> </span>&#123;</div><div class="line">    <span class="function">XxxComponent <span class="title">plus</span><span class="params">(Module... modules)</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">@<span class="title">Subcomponent</span><span class="params">(modules = xxxxx)</span></span></div><div class="line"><span class="function">interface XxxComponent </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>xxxComponent</code> 是该 <code>AComponpent</code> 的依赖，被 <code>@Subcomponent</code> 标注。</li><li><code>modules</code> 参数则是 <code>xxxComponent</code> 指定的 <code>Module</code>。</li><li>在重新编译后，<code>Dagger2</code> 生成的代码中，<code>Subcomponent</code> 标记的类是 <code>Componpent</code> 的内部类。</li></ul><p>总结一下 <font color="#ff0000"><strong>目前为止(后面还有Module注解)</strong></font> Component 的作用:</p><p><code>Dagger2</code> 以 <code>Component</code> 中定义的方法作为入口,到 <code>TargetClass</code> 中去寻找被 <code>@Inject</code> 标注的属性,查找到这个属性之后,就会去接着查找该属性对应的 用 <code>@Inject</code> 标注的构造函数,剩下的工作就是初始化该属性的实例,并且将实例赋值给属性.这是通过生成一系列提供依赖的 <code>Factory</code> 类和注入依赖的 <code>Injector</code> 类,来实现的.</p><h2 id="Component-和-Inject-的关系小结"><a href="#Component-和-Inject-的关系小结" class="headerlink" title="Component 和 Inject 的关系小结"></a>Component 和 Inject 的关系小结</h2><p><img src="https://i.imgur.com/1i9579w.png" alt="Component"></p><ol><li>用 <code>@Inject</code> 标注目标类中的其他类</li><li>用 <code>@Inject</code> 标注其他类中的构造方法</li><li>若其他类中还依赖于别的类，那么重复上述两个步骤</li><li>调用 <code>Component</code> 的 <code>injectXXX</code> 方法，<code>Component</code> 会把目标类依赖的实例给注入到目标类当中，用于初始化目标类当中的依赖。</li></ol><h2 id="Module"><a href="#Module" class="headerlink" title="@Module"></a>@Module</h2><h3 id="Module-定义"><a href="#Module-定义" class="headerlink" title="Module 定义"></a>Module 定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Module &#123;</div><div class="line">    Class&lt;?&gt;[] includes() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Module-引入原因"><a href="#Module-引入原因" class="headerlink" title="@Module 引入原因"></a>@Module 引入原因</h3><p>如果我们项目当中使用了第三方的框架，那么可能某个 <code>TargetClass</code> 就持有对框架中某个类 <code>C</code> 实例的引用，那么按照上面两个注解的方式，我们就需要到框架当中 <code>C</code> 类的构造方法上面去标注一个 <code>@Inject</code>，况且不说构造方法多样性的问题（比如 <code>Universal-Image-Loader</code> 的 <code>ImageLoader</code> 类构造方法二三十个），框架当中的源码我们是不可以修改的啊。这个时候 <code>@Inject</code> 就失效了，我们就需要一个新的工具去注解，这时就引入了 <code>@Module</code> 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleClass</span></span>&#123;</div><div class="line">      <span class="comment">//A是第三方类库中的一个类</span></div><div class="line">      <span class="function">A <span class="title">provideA</span><span class="params">()</span></span>&#123;</div><div class="line">           <span class="keyword">return</span> A();</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>Module</code> 是一个简单工厂模式，<code>Module</code> 里面的方法基本上都是创建类实例的方法，那么此时如何让 <code>Component</code> 和 <code>Module</code> 产生联系呢？</p><h3 id="Component-的新职责"><a href="#Component-的新职责" class="headerlink" title="Component 的新职责"></a>Component 的新职责</h3><p><code>Component</code> 是注入器，它一端连接 <code>TargetClass</code>，另一端连接 <code>TargetClass</code> 依赖的实例，它把 <code>TargetClass</code> 依赖<strong>实例注入到 <code>TargetClass</code> 中</strong>。上文中的 <code>Module</code> 是一个<strong>提供类实例的类</strong>，所以 <strong>Module 应该是属于 Component 的实例端的</strong>（连接各种目标类依赖实例的端），<code>Component</code> 的<strong>新职责就是管理好 <code>Module</code></strong>，<code>Component</code> 中的 <code>modules</code> 属性可以把 <code>Module</code> 加入 <code>Component</code>，<code>modules</code> 可以加入多个 <code>Module</code>。</p><p><img src="https://i.imgur.com/Gx1Kq5v.png" alt=""></p><p>那么接下来的问题就是，如何将 Module 中各种提供实例的方法同 <code>TargetClass</code> 中 <code>Inject</code> 标注的类属性给链接起来，这个时候 <code>Provides</code> 就可以出来了。</p><p>##@Provides##</p><p>###Provides 定义###</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Provides &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Module 中创建实例的方法是用 <code>Provides</code> 标注的，之前说过，<code>Component</code> 搜索到 <code>TargetClass</code> 中用 <code>@Inject</code> 标注的属性之后，他就会去这个属性的类中寻找标注了 <code>@Inject</code> 的构造方法 ，<font color="#ff0000"><strong>其实在这个步骤之前，它优先去 @Module 标注的类中查找 @Provides 标注的用于创建实例的方法，如果没有找到，那么才会去查找标注了 @Inject 的构造方法。</strong></font></p><blockquote><p>这么一来，第三方类库的依赖注入问题就解决了。</p></blockquote><h2 id="上述注解小结"><a href="#上述注解小结" class="headerlink" title="上述注解小结"></a>上述注解小结</h2><p>1.<code>Inject</code> 是用于标注 <code>TargetClass</code> 中的依赖和依赖类中的构造函数的。</p><p>2.<code>Component</code> 是一个注入器（<code>Injector</code>） ，同时也起着桥梁的作用， 一端是<font color="#ff0000"><strong>类创建实例端</strong></font>(即负责创建生产类的实例),另外一端是<font color="#ff0000"> <strong><code>TargetClass</code> 端</strong></font>（即需要进行依赖初始化的类），同时也负责管理 <code>Module</code>。</p><p><img src="https://i.imgur.com/ZljyOnL.png" alt=""></p><p>3.<code>Module</code> 和 <code>Provides</code> 是为觉得第三方库注入问题而引出的，<code>Module</code> 是一个简单工厂模式，<code>Module</code> 包含创建实例的方法，这个方法用 <code>Provides</code> 来标注。</p><p>4.创建依赖类有两个途径：通过 <code>@Inject</code> 标注的构造方法来创建； 通过 <code>@Provides</code> 标注的创建实例的方法来创建； 但是后者的优先级要大于前者，也就是说，<code>Component</code> 如果找到了后者，他就不会再接着去找前者。</p><p>5.<code>@Module</code> 要和 <code>@Provides</code> 配套使用，并且 <code>@Component</code> 也指定了该 <code>Module</code> 的时候，才能正常使用，<code>@Module</code> 告诉 <code>@Component</code> ，你可以从我这儿标注了 <code>@Privides</code> 的方法中获取实例。</p><p>6.<code>Component</code> 和 <code>Module</code> 是匹配关系 ， <code>Component</code> 依赖哪一个 <code>Module</code> 就需要在注解中用 <code>muduls</code> 属性标明。</p><font color="#ff0000"><strong>@Inject @Component @Module @Provides 就是 Dagger2 框架中最核心的部分，奠定了整个框架的基础，下面的标签就是针对细节问题的处理。</strong></font><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><h3 id="问题的引出"><a href="#问题的引出" class="headerlink" title="问题的引出"></a>问题的引出</h3><p>现在有种情况，用上述注解无法解决：</p><p>根据依赖倒置原则，我们应该面向接口编程，或者是面向抽象编程，在 <code>Java</code> 中多态的性质很好的支持了这一原则，所以我们经常会在类中申明的是某一属性的接口，或者是抽象类，这样操作在程序编译的时刻，是不能确定这个属性的具体实例是哪一个子类，只能在运行时才能确定下来，那么这个时候 <code>Component</code> 怎么知道应该将哪一个子类给注入到 <code>TargetClass</code> 的属性当中 ？</p><p><strong>基于上面两个问题，就提出了 <code>@Qualifier</code> 注解，它就是用于解决上述问题的。</strong></p><p><img src="https://i.imgur.com/aODbhRv.png" alt=""></p><p>这个时候就需要给各个 抽象类或者接口 的子类的构造方法标注 <code>@Qualifier</code>，类似于给他们一个 <code>ID</code> ，通过这个 <code>ID</code> 就可以区分不同的子类。</p><h3 id="Qualifier-的定义"><a href="#Qualifier-的定义" class="headerlink" title="Qualifier 的定义"></a>Qualifier 的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Qualifier &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>这个注解跟 <code>@Inject</code> 一样，不是 <code>Dagger</code> 定义的， 而是 <code>JSR-330</code> 中定义的。</p></blockquote><ul><li><code>Qualifier</code> 是用于<strong>定义注解</strong>的。</li></ul><h3 id="Qualifier-使用方法"><a href="#Qualifier-使用方法" class="headerlink" title="Qualifier 使用方法"></a>Qualifier 使用方法</h3><ol><li>使用 <code>@Qualifier</code> 根据子类的不同，分别定义新的注解，注解要有含义</li><li>分别使用新的注解去标注生成不同子类实例的地方，然后要使用哪一个子类的实例，是到抽象属性上标注子类对应的新的注解。</li></ol><h2 id="Scope-和-Single"><a href="#Scope-和-Single" class="headerlink" title="@Scope 和 @Single"></a>@Scope 和 @Single</h2><h3 id="Scole-的定义"><a href="#Scole-的定义" class="headerlink" title="Scole 的定义"></a>Scole 的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scope &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>也是 <code>JSR-330</code> 定义的，不是 <code>Dagger</code> 中定义的</li><li>用于自定义注解</li><li><code>@Single</code> 是 <code>@Scope</code> 的默认实现，如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Singleton &#123;&#125;</div></pre></td></tr></table></figure><h3 id="Scope-的作用"><a href="#Scope-的作用" class="headerlink" title="Scope 的作用"></a>Scope 的作用</h3><ul><li><p>它的作用只是保证依赖在 <code>@Component</code> 中是唯一的，可以理解为“局部单例”。</p></li><li><p><code>@Scope</code> 是需要成对存在的，在 <code>Module</code> 的 <code>Provide</code> 方法中使用了 <code>@Scope</code>，那么对应的 <code>Component</code> 中也必须使用 <code>@Scope</code> 注解，当两边的 <code>@Scope</code> 名字一样时（比如同为 <code>@Singleton</code>）, 那么该 <code>Provide</code> 方法提供的依赖将会在 <code>Component</code> 中保持“局部单例”。</p></li><li>而在 <code>Component</code> 中标注 <code>@Scope</code>，<code>provide</code> 方法没有标注，那么这个 <code>Scope</code> 就不会起作用，而 <code>Component</code> 上的 <code>Scope</code> 的作用也只是为了能顺利通过编译。</li></ul><p>这么说 <code>@Single</code> 是没有创建单例的能力，因为他只是保证在 <code>Component</code> 中的唯一的，那怎么实现真正的单例呢？</p><h3 id="单例的实现"><a href="#单例的实现" class="headerlink" title="单例的实现"></a>单例的实现</h3><ol><li>依赖在 <code>Component</code> 中是单例的（供该依赖的 <code>provide</code> 方法和对应的 <code>Component</code> 类使用同一个 <code>Scope</code> 注解。）</li><li>对应的 <code>Component</code> 在 <code>App</code> 中只初始化一次，每次注入依赖都使用这个 <code>Component</code> 对象。（在 <code>Application</code> 中创建该 <code>Component</code>）</li></ol><h2 id="Lazy"><a href="#Lazy" class="headerlink" title="Lazy"></a>Lazy</h2><p>这个比较简单，延迟加载模式，用 <code>Lazy&lt;T&gt;</code> 装饰需要被 <code>@Inject</code> 标注的属性 <code>T</code> ，这样，在 <code>Inject</code> 的时候并不会初始化它，而是在使用 <code>T</code> 的时候，通过 <code>T.gey()</code> 来得到他的实例，然后再使用。</p><h2 id="Component-组织方式"><a href="#Component-组织方式" class="headerlink" title="Component 组织方式"></a>Component 组织方式</h2><p>这是重中之重，前面的概念都是做铺垫，这里从一个 <code>APP</code> 的角度将他们融合起来。</p><h3 id="一个app中应该根据什么来划分Component"><a href="#一个app中应该根据什么来划分Component" class="headerlink" title="一个app中应该根据什么来划分Component"></a>一个app中应该根据什么来划分Component</h3><p>假如一个 <code>app</code> （<code>app</code> 指的是 <code>Android app</code>）中只有一个 <code>Component</code>，那这个 <code>Component</code> 是很难维护、并且变化率是很高，很庞大的，就是因为 <code>Component</code> 的职责太多了导致的。所以就有必要把这个庞大的 <code>Component</code> 进行划分，划分为粒度小的 <code>Component</code>。那划分的规则这样的：</p><ol><li><p>要有一个全局的 <code>Component</code> (可以叫 <code>ApplicationComponent</code> ),负责管理整个 <code>app</code> 的全局类实例（全局类实例整个 <code>app</code> 都要用到的类的实例，这些类基本都是单例的）</p></li><li><p>每个<strong>页面</strong>对应一个 <code>Component</code>，比如一个 <code>Activity</code> 页面定义一个 <code>Component</code>，一个 <code>Fragment</code> 定义一个 <code>Component</code>。当然这不是必须的，有些页面之间的依赖的类是一样的，可以公用一个 <code>Component</code>。</p></li></ol><p>第一个规则应该很好理解，具体说下第二个规则，为什么以<strong>页面</strong>为粒度来划分 <code>Component</code>？</p><ol><li>一个 <code>app</code> 是由很多个页面组成的，从组成 <code>app</code> 的角度来看一个页面就是一个完整的最小粒度了。</li></ol><ol><li>一个页面的实现其实是要依赖各种类的，可以理解成一个页面把各种依赖的类组织起来共同实现一个大的功能，每个页面都组织着自己的需要依赖的类，一个页面就是一堆类的组织者。</li></ol><ol><li>划分粒度不能太小了。假如使用 <code>mvp</code> 架构搭建 <code>app</code>，划分粒度是基于每个页面的<code>m 、v 、p</code> 各自定义 <code>Component</code> 的，那 <code>Component</code> 的粒度就太小了，定义这么多的 <code>Component</code>，管理、维护就很非常困难。</li></ol><p>所以以页面划分 <code>Component</code> 在管理、维护上面相对来说更合理。</p><h2 id="组织Component"><a href="#组织Component" class="headerlink" title="组织Component"></a>组织Component</h2><p>我们已经把一个 <code>app</code> 按照上面的规则划分为不同的 <code>Component</code> 了，全局类实例也创建了单例模式。问题来了：其他的 <code>Component</code> 想要把全局的类实例注入到目标类中该怎么办呢？<br>这就涉及到<strong>类实例共享</strong>的问题了，因为 <code>Component</code> 有管理创建类实例的能力。因此只要能很好的组织 <code>Component</code> 之间的关系，问题就好办了。具体的组织方式分为以下2种：</p><ol><li><p><strong>依赖方式</strong><br>一个 <code>Component</code> 是依赖于一个或多个 <code>Component</code>，<code>Component</code> 中的 <code>dependencies</code> 属性就是依赖方式的具体实现</p></li><li><p><strong>包含方式</strong><br>一个 <code>Component</code> 是包含一个或多个 <code>Component</code> 的，被包含的 <code>Component</code> 还可以继续包含其他的 <code>Component</code>。这种方式特别像 <code>Activity</code> 与 <code>Fragment</code> 的关系。<code>SubComponent</code> 就是包含方式的具体实现。</p></li></ol><h2 id="Dagger-注入一次的流程"><a href="#Dagger-注入一次的流程" class="headerlink" title="Dagger 注入一次的流程"></a>Dagger 注入一次的流程</h2><p>步骤1：查找 <code>Module</code> 中是否存在创建该类的方法。</p><p>步骤2：若存在创建类方法，查看该方法是否存在参数</p><pre><code>步骤2.1：若存在参数，则按从**步骤1**开始依次初始化每个参数步骤2.2：若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</code></pre><p>步骤3：若不存在创建类方法，则查找 <code>Inject</code> 注解的构造函数，看构造函数是否存在参数</p><pre><code>步骤3.1：若存在参数，则从**步骤1**开始依次初始化每个参数步骤3.2：若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</code></pre><h2 id="总结对象"><a href="#总结对象" class="headerlink" title="总结对象"></a>总结对象</h2><blockquote><ol><li><a href="http://www.jianshu.com/p/cd2c1c9f68d4" target="_blank" rel="external">Android：dagger2让你爱不释手-基础依赖注入框架篇</a></li><li><a href="http://www.jianshu.com/p/1d42d2e6f4a5" target="_blank" rel="external">Android：dagger2让你爱不释手-重点概念讲解、融合篇</a></li><li><a href="http://www.jianshu.com/p/65737ac39c44" target="_blank" rel="external">Android：dagger2让你爱不释手-终结篇</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/eJQyHTv.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要：最近看了很多讲 Dagger2 的文章，发现Dagger中很多基础的概念问题真的挺缥缈，很难理解透彻，其中有几篇确实写得不错，这里将他们总结一下，底部给上参考文章链接。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Dagger" scheme="http://zengfanyu.top/categories/Dagger/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="Dagger" scheme="http://zengfanyu.top/tags/Dagger/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（六）View 层 Activity 的基类--- BaseMvpActivity 的封装</title>
    <link href="http://zengfanyu.top/2017/11/03/MVP6/"/>
    <id>http://zengfanyu.top/2017/11/03/MVP6/</id>
    <published>2017-11-03T12:37:15.000Z</published>
    <updated>2017-11-04T09:49:07.998Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/AzE3pww.png" alt=""></p><p><em>摘要：使用封装之后的 MVP 模式实现一个新的界面，也就是 Vie 层，那么就需要去实现 IBaseView 接口，可能还需要针对当前要实现的界面情况，在 IBaseView 的基础之上派生出一个新的接口 IXxxView,之前的 SohuAlbumInfoActivity 用于展示搜狐电视剧主要信息的 View 就是这种情况,由 IBaseView 派生了一个 ISohuSerials ,再由 SohuAlbumInfoActivity 去实现,那么随着需要展示的界面越来越多,它们坐着大量重复的工作,我们就要像个方法来简化这个过程了。</em></p><a id="more"></a><h2 id="回顾前几篇中-View-层的写法"><a href="#回顾前几篇中-View-层的写法" class="headerlink" title="回顾前几篇中 View 层的写法"></a>回顾前几篇中 View 层的写法</h2><p>根据<a href="http://zengfanyu.top/2017/10/22/MVP2/">MVP系列第二篇</a>当中的分析， <code>View</code> 层的职责如下：</p><ol><li>Loading 状态的展示隐藏</li><li>接收 Presenter 层处理后的数据</li><li>接收 Presenter 层处理后的错误信息</li><li>接收 Presenter 层处理后的服务器拒绝信息</li></ol><p>所以当就将着一些职责抽象成方法，放在 <code>IBaseView</code> 接口中，看看之前的的 <code>IBaseView</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by fanyuzeng on 2017/10/20.</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> : ZengFanyu</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 进行耗时操作时的用户友好交互接口，比如显示ProgressBar</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> isShow</span></div><div class="line"><span class="comment">     * <span class="doctag">@author</span> zfy</span></div><div class="line"><span class="comment">     * <span class="doctag">@created</span> at 2017/10/21/021 14:12</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showProgress</span><span class="params">(<span class="keyword">boolean</span> isShow)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 显示网络请求错的的接口</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> errorDesc</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> errorUrl</span></div><div class="line"><span class="comment">     * <span class="doctag">@author</span> zfy</span></div><div class="line"><span class="comment">     * <span class="doctag">@created</span> at 2017/10/21/021 14:14</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showOkHttpError</span><span class="params">(<span class="keyword">int</span> errorCode, String errorDesc, String errorUrl)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 现实服务器端请求错误的接口</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> errorDesc</span></div><div class="line"><span class="comment">     * <span class="doctag">@author</span> zfy</span></div><div class="line"><span class="comment">     * <span class="doctag">@created</span> at 2017/10/21/021 14:14</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showServerError</span><span class="params">(<span class="keyword">int</span> errorCode, String errorDesc)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 请求成功或者失败之后，对应UI做出改变的接口</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> isSuccess</span></div><div class="line"><span class="comment">     * <span class="doctag">@author</span> zfy</span></div><div class="line"><span class="comment">     * <span class="doctag">@created</span> at 2017/10/21/021 14:15</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showSuccess</span><span class="params">(<span class="keyword">boolean</span> isSuccess)</span></span>;</div></pre></td></tr></table></figure><p><code>View</code> 层每需要添加一个类， <code>View</code> 层的对象都需要在它的基础上去实现，比如说，在 <a href="http://zengfanyu.top/2017/10/25/MVP3/">MVP系列第三篇</a>中，需要对搜狐视频电视剧频道的主要信息做分页展示，当时是在 <code>IBaseView</code> 的基础上派生出了一个 <code>ISohuSerials</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示搜狐电视剧频道具体信息的接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISohuSerials</span> <span class="keyword">extends</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 展示搜狐视频API电视剧主要信息的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> videoList 处理好的VideoInfo集合</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAlbumMainInfo</span><span class="params">(List&lt;VideoInfo&gt; videoList)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后再使用 <code>SohuAlbumInfoActivity</code> 去实现这个接口，对 <code>IBaseView</code> 和 <code>ISohuSerials</code> 中的方法<strong>又做了一遍实现</strong>，但是这次的实现过程，跟<a href="http://zengfanyu.top/2017/10/22/MVP2/">MVP系列第二篇</a>中的 <code>LatestNewsTitleActivity</code> 实现的<strong>功能几乎一致</strong>，并且这个时候，我就意识到 <code>IBaseView</code> 接口<strong>设计的缺陷</strong>，我们在 <code>IBaseView</code> 的基础上派生出 <code>ISohuSerials</code> 接口 <code>ILatestNewsView</code> 接口，无非就是要展示不同类型的数据，那这个功能完全可以整合进 <code>IBaseView</code> 接口中，至于不同页面的数据类型不同，我们完全可以使用泛型来解决。</p><p>下面就来解决这两个问题：</p><ol><li>将展示 <code>Presenter</code> 层实例好的数据的方法，由派生接口整合至基类接口中，使用泛型解决数据类型不同的问题。</li><li>封装 <code>BaseMvpActivity</code>，实现共有逻辑，子类不重复处理 <code>View</code> 层基类接口（<code>IBaseView</code>）中的方法。</li></ol><h2 id="IBaseView-的重构"><a href="#IBaseView-的重构" class="headerlink" title="IBaseView 的重构"></a>IBaseView 的重构</h2><p>再回顾一下，之前要展示知乎日报的最新消息的标题内容，我写了一个 <code>ILatestNewsView</code> 接口，它长这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> inerface ILatestNewsView extends IBaseView &#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showLatestNewsTitle</span><span class="params">(List&lt;String&gt; titles)</span></span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure><p>后来又需要展示搜狐电视剧主要信息，于是写了一个 <code>ISohuSerials</code> ，：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISohuSerials</span> <span class="keyword">extends</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAlbumMainInfo</span><span class="params">(List&lt;VideoInfo&gt; videoList)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>当时怎么想的，要整个这接口出来 - - ！</p></blockquote><p>现在把他们都整合进 <code>IBaseView</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaseView</span>&lt;<span class="title">Data</span>&gt; </span>&#123;</div><div class="line">  </div><div class="line"><span class="comment">//省略代码</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * 显示presenter层处理好之后的数据</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> data data</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">showDataFromPresenter</span><span class="params">(Data data)</span></span>;</div></pre></td></tr></table></figure><p>此处添加了一个泛型 <code>Data</code> ，它就可以用于指代上面两个接口中的 <code>List&lt;String&gt; titles</code> 和 <code>List&lt;VideoInfo&gt; videoList</code> ，或者是其他的数据了类型，然后在实现接口的类中去指明参数的类型就可以动态的更改它的类型了。</p><h2 id="BaseMvpActivity-的封装"><a href="#BaseMvpActivity-的封装" class="headerlink" title="BaseMvpActivity 的封装"></a>BaseMvpActivity 的封装</h2><p>上述是对之前遗留问题的一个解决，从这儿开始才正式对基类 <code>BaseMvpActivity</code> 进行封装。</p><h3 id="ToolBar-的统一处理"><a href="#ToolBar-的统一处理" class="headerlink" title="ToolBar 的统一处理"></a>ToolBar 的统一处理</h3><p>首先， <code>Demo</code> 是在 <code>API 25</code> ，所以对 <code>ToolBar</code> 也要有良好的支持，所以首先是对 <code>ToolBar</code> 的封装，将 <code>ToolBar</code> 写到一个单独的 <code>Layout</code> 文件之中，方便其他文件引用。<code>top_action_bar</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;android.support.design.widget.AppBarLayout</div><div class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"?attr/actionBarSize"</span></div><div class="line">    android:theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</div><div class="line">&lt;!-- android:popupTheme 用于自定义弹出的菜单的样式--&gt;</div><div class="line">    &lt;android.support.v7.widget.Toolbar</div><div class="line">        android:id=<span class="string">"@+id/id_tool_bar"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        android:background=<span class="string">"?attr/colorPrimary"</span></div><div class="line">        android:popupTheme=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></div><div class="line">        app:titleTextColor=<span class="string">"#ffffff"</span></div><div class="line">        &gt;</div><div class="line">    &lt;/android.support.v7.widget.Toolbar&gt;</div><div class="line"></div><div class="line">&lt;/android.support.design.widget.AppBarLayout&gt;</div></pre></td></tr></table></figure><p>在 <code>BaseMvpActivity</code> 中的统一处理如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setSupportActionBar</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mToolbar != <span class="keyword">null</span>) &#123;</div><div class="line">        setSupportActionBar(mToolbar);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setActionBarIcon</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mToolbar != <span class="keyword">null</span>) &#123;</div><div class="line">        mToolbar.setNavigationIcon(resId);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setSupportArrowActionBar</span><span class="params">(<span class="keyword">boolean</span> isSupport)</span> </span>&#123;</div><div class="line">    getSupportActionBar().setDisplayHomeAsUpEnabled(isSupport);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样处理了之后，在子类当中，就可以直接调用上述方法，就可以使用 <code>ToolBar</code>了， 当然，对 <code>ToolBar</code> 的自定义需要另外去处理。</p><h3 id="BaseMvpActivity-的布局文件的处理"><a href="#BaseMvpActivity-的布局文件的处理" class="headerlink" title="BaseMvpActivity 的布局文件的处理"></a>BaseMvpActivity 的布局文件的处理</h3><p>由于 <code>BaseMvpActivity</code> 是要作为 <code>MVP</code> 模式下，所有 <code>View</code> 层的基类，所以它自己需要有布局文件，将 <code>IBaseView</code> 中的接口实现，<br>  <code>activity_base_mvp</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">              android:layout_width=<span class="string">"match_parent"</span></div><div class="line">              android:layout_height=<span class="string">"match_parent"</span></div><div class="line">              android:orientation=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    &lt;include</div><div class="line">        layout=<span class="string">"@layout/top_action_bar"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=<span class="string">"@+id/id_tip_content"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:gravity=<span class="string">"center_horizontal"</span></div><div class="line">        android:textSize=<span class="string">"16sp"</span></div><div class="line">        android:text=<span class="string">"tip"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;RelativeLayout</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">        &lt;FrameLayout</div><div class="line">            android:id=<span class="string">"@+id/id_content_container"</span></div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"match_parent"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;ProgressBar</div><div class="line">            android:id=<span class="string">"@+id/id_progress_bar"</span></div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_centerInParent=<span class="string">"true"</span></div><div class="line">            android:visibility=<span class="string">"gone"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure><ul><li>第 <code>7</code> 行的 <code>include</code> 文件，就是对上面 <code>top_action_bar</code> 的引用。</li><li>第 <code>10</code> 行的 <code>TextView</code> 这里用来实现 <code>IBaseView</code> 中 <code>showOkHttpError</code> 和 <code>showServerError</code>接口的。</li><li><p><font color="#ff0000">第 <code>22</code> 行的 <code>FrameLayout</code> <strong>很重要</strong>，看 <code>id</code> 就知道了，它是用于展示子类页面的方法的，<strong>直接将子类的布局文件给 <code>add</code> 进来</strong>。类似于：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">View contentView = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.activity_album_view, <span class="keyword">null</span>);</div><div class="line">FrameLayout.LayoutParams lp = <span class="keyword">new</span> FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);</div><div class="line">mContentContainer.addView(contentView, lp);</div></pre></td></tr></table></figure></li><li><p>第 <code>27</code> 行的 <code>ProgressBar</code> 就是用于实现 <code>IBaseView</code> 中 <code>showProgress</code> 的。</p></li></ul><h3 id="BaseMvpActivity-对-IBaseView-的实现"><a href="#BaseMvpActivity-对-IBaseView-的实现" class="headerlink" title="BaseMvpActivity 对 IBaseView 的实现"></a>BaseMvpActivity 对 IBaseView 的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/30 13:50</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseMvpActivity</span>&lt;<span class="title">Data</span>&gt; <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">IBaseView</span>&lt;<span class="title">Data</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BaseMvpActivity"</span>;</div><div class="line">    <span class="keyword">protected</span> Toolbar mToolbar;</div><div class="line">    <span class="keyword">protected</span> ProgressBar mProgressBar;</div><div class="line">    <span class="keyword">protected</span> TextView mTipView;</div><div class="line">    <span class="keyword">protected</span> FrameLayout mContentContainer;</div><div class="line">    <span class="keyword">protected</span> Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line">    <span class="keyword">protected</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_base_mvp);</div><div class="line">        mContext = <span class="keyword">this</span>;</div><div class="line">        mToolbar = bindViewId(R.id.id_tool_bar);</div><div class="line">        mProgressBar = bindViewId(R.id.id_progress_bar);</div><div class="line">        mTipView = bindViewId(R.id.id_tip_content);</div><div class="line">        mContentContainer = bindViewId(R.id.id_content_container);</div><div class="line">        beforeInitViews();</div><div class="line">        initViews();</div><div class="line">        afterInitViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">protected</span> &lt;T extends View&gt; <span class="function">T <span class="title">bindViewId</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (T) findViewById(resId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//统一处理ToolBar</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isShow)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (isShow) &#123;</div><div class="line">                    mProgressBar.setVisibility(View.VISIBLE);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mProgressBar.setVisibility(View.GONE);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showOkHttpError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc, <span class="keyword">final</span> String errorUrl)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mTipView.setText(<span class="string">"errorCode:"</span> + errorCode + <span class="string">",errorDesc:"</span> + errorDesc + <span class="string">",errorUrl:"</span> + errorUrl);    </div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showServerError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mTipView.setText(<span class="string">"errorCode:"</span> + errorCode + <span class="string">",errorDesc:"</span> + errorDesc);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSuccess</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isSuccess)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (isSuccess) &#123;</div><div class="line">                    mContentContainer.setBackgroundResource(android.R.color.white);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mContentContainer.setBackgroundResource(R.color.colorAccent);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">            <span class="keyword">case</span> android.R.id.home:</div><div class="line">                finish();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类实现,用于初始化控件</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类实现 在初始化控件之后进行的操作</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">afterInitViews</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类实现, 在初始化控件之前的操作</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">beforeInitViews</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>做了几点事情</p><ol><li>实现了 <code>IBaseView</code> 中的接口</li><li>对 <code>ToolBar</code> 做统一处理</li><li><code>findViewById</code>方法处理</li><li><code>Menu Item</code> 中返回按键的处理</li></ol><p>还有一个问题，似乎少了一个方法？就是在上一小节中，整合进 <code>IBaseView</code> 接口中的 <code>void showDataFromPresenter(Data data)</code> ,还没有实现。</p><p><br>由于这里的 <code>BaseMvpView</code> 是 <code>abstract</code> 的，所以它可以不实现，也实现不了，因为实现这方法需要知道泛型参数 <code>Data</code> 的具体类型，所以这个函数是留给子类去实现的。</p><p>上面三个抽象方法也很好理解，就是用于子类初始化操作的，并且都在基类初始化之后才执行，这一点很重要，因为子类中是需要将布局文件给 <code>add</code> 到基类布局当中的，所以基类的组件也必须提前初始化好。</p><p>下面就看看子类中是如何处理的。</p><h2 id="SohuAlbumInfoActivity-的重构"><a href="#SohuAlbumInfoActivity-的重构" class="headerlink" title="SohuAlbumInfoActivity 的重构"></a>SohuAlbumInfoActivity 的重构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu </span></div><div class="line"><span class="comment"> * Function:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SohuAlbumInfoActivity</span> <span class="keyword">extends</span> <span class="title">BaseMvpActivity</span>&lt;<span class="title">List</span>&lt;<span class="title">VideoInfo</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SohuAlbumInfoActivity"</span>;</div><div class="line">    <span class="keyword">private</span> PullLoadRecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> AlbumPresenter mAlbumPresenter;</div><div class="line">    <span class="keyword">private</span> BasePaginationParam mParam = <span class="keyword">new</span> BasePaginationParam(<span class="number">1</span>, <span class="number">10</span>);</div><div class="line">    <span class="keyword">private</span> VideoInfoAdapter mAdapter;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsFromRefresh = <span class="keyword">false</span>;</div><div class="line"><span class="comment">//    private View mContentView;</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeInitViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        mRecyclerView = <span class="keyword">new</span> PullLoadRecyclerView(<span class="keyword">this</span>);</div><div class="line">        FrameLayout.LayoutParams lp = <span class="keyword">new</span> FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);</div><div class="line">        mContentContainer.addView(mRecyclerView, lp); </div><div class="line"></div><div class="line"><span class="comment">//        View contentView = LayoutInflater.from(this).inflate(R.layout.activity_album_view, null);</span></div><div class="line"><span class="comment">//        FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);</span></div><div class="line"><span class="comment">//        mContentContainer.addView(contentView, lp);</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        setSupportActionBar(); <span class="comment">//表示当前页面支持ActionBar</span></div><div class="line">        setTitle(TAG);</div><div class="line">        setSupportArrowActionBar(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        mAlbumPresenter = <span class="keyword">new</span> AlbumPresenter(<span class="keyword">this</span>, Album.class);</div><div class="line"></div><div class="line">        mTipView.setText(TAG);</div><div class="line"></div><div class="line"><span class="comment">//        mRecyclerView = (PullLoadRecyclerView)mContentView.findViewById(R.id.id_recycler_view);</span></div><div class="line">        mRecyclerView.setLinearLayout();</div><div class="line">        mAdapter = <span class="keyword">new</span> VideoInfoAdapter(mContext);</div><div class="line">        mAlbumPresenter.requestServer(mParam);</div><div class="line"></div><div class="line">        mRecyclerView.setAdapter(mAdapter);</div><div class="line">        mRecyclerView.setOnPullLoadMoreListener(<span class="keyword">new</span> PullLoadRecyclerView.OnPullLoadMoreListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">                mIsFromRefresh = <span class="keyword">true</span>;</div><div class="line">                mParam.setPageIndex(<span class="number">1</span>);</div><div class="line">                mAlbumPresenter.refresh(mParam);</div><div class="line">                mRecyclerView.setRefreshCompleted();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadMore</span><span class="params">()</span> </span>&#123;</div><div class="line">                mAlbumPresenter.loadingNext();</div><div class="line">                mRecyclerView.setLoadMoreCompleted();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterInitViews</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDataFromPresenter</span><span class="params">(List&lt;VideoInfo&gt; albumList)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mIsFromRefresh) &#123;</div><div class="line">            mAdapter.cleanData();</div><div class="line">            mIsFromRefresh = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (albumList != <span class="keyword">null</span> &amp;&amp; albumList.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (VideoInfo videoInfo : albumList) &#123;</div><div class="line">                mAdapter.addData(videoInfo);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mAdapter.notifyDataSetChanged();</div><div class="line">                    mTipView.setText(TAG);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>15</code> 行的 <code>beforeInitViews</code> 方法，就是用于初始化子类的布局的，由于这个子类布局比较简单， 就是一个 <code>RecyclerView</code> ，所以可以直接用代码实现，然后给 <code>add</code> 进父类的 <code>mContentContainer</code>，或者用下面注释掉的，常规尝试来实现。</li><li>第 <code>5</code> 行，泛型参数为 <code>List&lt;VideoInfo&gt;</code> ,这个参数就是用于上面提到的，未实现的方法当中的，指定了泛型参数的类型。</li><li>第 <code>26</code> 行的 <code>initViews</code> 方法就用户初始化子类的 <code>View</code></li><li><code>showDataFromPresenter</code> 的写法和未封装之前是一样的。</li></ul><h2 id="LatestNewsTitleActivity-的重构"><a href="#LatestNewsTitleActivity-的重构" class="headerlink" title="LatestNewsTitleActivity 的重构"></a>LatestNewsTitleActivity 的重构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> ZengFanyu</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LatestNewsTitleActivity</span> <span class="keyword">extends</span> <span class="title">BaseMvpActivity</span>&lt;<span class="title">List</span>&lt;<span class="title">String</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> ListView mListView;</div><div class="line">    <span class="keyword">private</span> LatestNewsPresenter mBasePresenter;</div><div class="line">    LatestNewsAdapter mAdapter;</div><div class="line">    <span class="keyword">private</span> View mContentView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeInitViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        mContentView = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.activity_latest_news, <span class="keyword">null</span>);</div><div class="line">        FrameLayout.LayoutParams lp = <span class="keyword">new</span> FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);</div><div class="line">        mContentContainer.addView(mContentView, lp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        mBasePresenter = <span class="keyword">new</span> LatestNewsPresenter(<span class="keyword">this</span>, LatestNews.class);</div><div class="line">        mTipView.setText(LatestNews.class.getSimpleName());</div><div class="line">        mListView = (ListView) mContentView.findViewById(R.id.id_list_view);</div><div class="line">        Button btnLatestNews = (Button) mContentView.findViewById(R.id.id_btn_latest_news);</div><div class="line">        btnLatestNews.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                mBasePresenter.requestServer(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterInitViews</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDataFromPresenter</span><span class="params">(List&lt;String&gt; titles)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</div><div class="line">            mAdapter.clear();</div><div class="line">            mAdapter = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mAdapter = <span class="keyword">new</span> LatestNewsAdapter(titles, mContext);</div><div class="line">        mListView.setAdapter(mAdapter);</div><div class="line">        mAdapter.notifyDataSetChanged();</div><div class="line">        mTipView.setText(LatestNews.class.getSimpleName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>写法和上面一样，但是比起之前的代码量来说，已经少了很多了，并且对比这两个子类，都没有重复的实现方法，只专注于自己需要实现的逻辑。</p><p>还有其他的 <code>View</code> 层类和上述的实现过程类似，此处不再赘述。</p><blockquote><p>下一篇这个系列的最后一篇准备些关于 <code>MVP</code> 模式在开发中使用，随着项目的复杂程度的提高， <code>Presenter</code> 会越来越臃肿的问题的解决思路。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/AzE3pww.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要：使用封装之后的 MVP 模式实现一个新的界面，也就是 Vie 层，那么就需要去实现 IBaseView 接口，可能还需要针对当前要实现的界面情况，在 IBaseView 的基础之上派生出一个新的接口 IXxxView,之前的 SohuAlbumInfoActivity 用于展示搜狐电视剧主要信息的 View 就是这种情况,由 IBaseView 派生了一个 ISohuSerials ,再由 SohuAlbumInfoActivity 去实现,那么随着需要展示的界面越来越多,它们坐着大量重复的工作,我们就要像个方法来简化这个过程了。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（五）封装之后的OkHttp工具在Model层的使用</title>
    <link href="http://zengfanyu.top/2017/11/02/MVP5/"/>
    <id>http://zengfanyu.top/2017/11/02/MVP5/</id>
    <published>2017-11-02T12:37:15.000Z</published>
    <updated>2017-11-04T09:39:14.077Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/Fadz300.png" alt=""></p><p><em>摘要:在<a href="http://zengfanyu.top/2017/10/27/MVP4/">上一篇</a>中对 OkHttp 进行了简单的封装,但是没有使用到这个系列当中的 Demo 里面,这一章就使用上一篇封装的 OkHttp 工具,替换掉之前 Demo 里面的 Model 层的网络请求.并且之前的部分接口方法都没有使用,比如说 IBasePresenter 接口中的 HashMap<string, string=""> getParams() 方法, IBasePaginationPresenter 中的 boolean hasMoreData() 方法，算是对上一篇的补充。</string,></em></p><a id="more"></a><h2 id="Model-层原来的写法"><a href="#Model-层原来的写法" class="headerlink" title="Model 层原来的写法"></a>Model 层原来的写法</h2><p>拿分页数据获取的 <code>Model</code> 层举例,当时在 <code>SohuAlbumModel</code> 中是这样获取数据的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRequestToServer</span><span class="params">(Param param)</span> </span>&#123;</div><div class="line">    String validUrl = <span class="keyword">null</span>;</div><div class="line">    Log.d(TAG, <span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"has more data ?"</span> + mPaginationPresenter.hasMoreData());</div><div class="line">    <span class="keyword">if</span> (param != <span class="keyword">null</span> &amp;&amp; !TextUtils.isEmpty(url) &amp;&amp; mPaginationPresenter.hasMoreData()) &#123;</div><div class="line">        validUrl = getValidUrl(url, param);</div><div class="line">        Log.d(TAG, <span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"ValidUrl:"</span> + validUrl);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(validUrl)) &#123;</div><div class="line">        HttpUtils.executeByGet(validUrl, <span class="keyword">new</span> Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"&gt;&gt; onFailure &gt;&gt; "</span>);</div><div class="line">                e.printStackTrace();</div><div class="line">                mPaginationPresenter.okHttpError(Constants.URL_ERROR, e.getMessage(), url);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!response.isSuccessful()) &#123;</div><div class="line">                    Log.d(TAG, <span class="string">"&gt;&gt; onResponse &gt;&gt; "</span> + <span class="string">"Not successful"</span>);</div><div class="line">                    mPaginationPresenter.okHttpError(Constants.SERVER_ERROR, response.message(), url);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                String responseJson = response.body().string();</div><div class="line">                Log.d(TAG, <span class="string">"&gt;&gt; onResponse &gt;&gt; "</span> + <span class="string">"responseJson:"</span> + responseJson);</div><div class="line">                mPaginationPresenter.accessSuccess(responseJson);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Log.d(TAG, <span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"Valid Url is empty"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getValidUrl</span><span class="params">(String url, Param param)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> String.format(url, param.getPageIndex(), param.getPageSize());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>url</code> 当中的参数是直接在 <code>sendRequestToServer</code> 方法中传递进来的,这么一来会让 <code>Model</code> 层的职责变得不那么单一,因为 <code>Model</code> 层只应该负责数据相关的工作,此处的 <code>params</code> 传递进来,还需要进行一个 <code>url</code> 的拼接工作,所以在这里是可以优化的地方。</p><p>在看看<a href="http://zengfanyu.top/2017/10/27/MVP4/">上一篇</a>中的 <code>OkHttpManager</code> 类中请求服务器数据的核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 使用&#123;<span class="doctag">@link</span> OkHttpClient&#125;想服务器端请求数据的方法</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> method &#123;<span class="doctag">@link</span> Constants#HTTP_GET_METHOD&#125; Get方式,&#123;<span class="doctag">@link</span> Constants#HTTP_POST_METHOD&#125; Post方式</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> baseUrl baseUrl</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> paramsMap 请求url的参数,以键值对的形式存放</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> handler</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestServerData</span><span class="params">(<span class="keyword">int</span> method, String baseUrl, HashMap&lt;String, String&gt; paramsMap, DisposeDataHandler handler)</span> </span>&#123;</div><div class="line">    RequestParams requestParams = <span class="keyword">new</span> RequestParams(paramsMap);</div><div class="line">    Request request = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (method == Constants.HTTP_GET_METHOD) &#123;</div><div class="line">        request = CommonRequest.createGetRequest(baseUrl, requestParams);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method == Constants.HTTP_POST_METHOD) &#123;</div><div class="line">        request = CommonRequest.createPostRequest(baseUrl, requestParams);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</div><div class="line">        mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> CommonJsonCallback(handler));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用 <code>OkHttpManager</code> 来请求服务器获得数据，第二个参数 <code>HashMap&lt;String, String&gt; paramsMap</code> 就是已经在 <code>Presenter</code> 层中处理好的键值对参数，然后在 <code>CommonRequest.createGetRequest(baseUrl, requestParams);</code> 或者是 <code>CommonRequest.createPostRequest(baseUrl, requestParams)</code> 中就已经把完整的 <code>url</code> 拼接出来了。具体如何拼接，如何构造 <code>Request</code> 对象，<code>Model</code> 层完全不用关心，它只需要在请求成功或者是请求失败的回调接口中将数据回调到 <code>Presenter</code> 层去即可。</p><p>那么现在就开始重构 <code>Model</code> 层的方法。</p><h2 id="Model-层现在的写法"><a href="#Model-层现在的写法" class="headerlink" title="Model 层现在的写法"></a>Model 层现在的写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRequestToServer</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mPaginationPresenter.hasMoreData()) &#123;</div><div class="line">        OkHttpManager.getInstance().requestServerData(method, baseUrl, mPaginationPresenter.getParams(), <span class="keyword">new</span> DisposeDataHandler(<span class="keyword">new</span> DisposeDataListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object responseObj)</span> </span>&#123;</div><div class="line">                String responseJson = (String) responseObj;</div><div class="line">                Log.d(TAG, <span class="string">"&gt;&gt; onSuccess &gt;&gt; "</span> + responseJson);</div><div class="line">                mPaginationPresenter.accessSuccess(responseJson);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(OkHttpException exception)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"&gt;&gt; onFailure &gt;&gt; "</span> + exception.getErrorCode());</div><div class="line">                mPaginationPresenter.okHttpError(exception.getErrorCode(), exception.getErrorMsg(), url);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">null</span>));</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        Log.d(TAG,<span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"No more data!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>是不是简单了很多！和之前的方法相比较，有三处不同的地方：</p><ul><li>第 <code>2</code> 行的 <code>sendRequestToServer()</code> 方法中已经没有了 <code>param</code> 参数了。（那么参数从哪儿来呢？）</li><li>第 <code>3</code> 行多了一个 <code>hasMoreData()</code> 的方法，用于判断服务器端还有没有更多的数据。若没有，那就没有必要去请求了。它是在哪儿初始化的？</li><li>第 <code>4</code> 行的多了 <code>mPaginationPresenter.getParams()</code> ，它是在什么地方初始化的?</li><li>第 <code>4</code> 行的 <code>baseurl</code> 不是之前 <code>Model</code> 层的 <code>url</code></li></ul><p>下面就解释为什么可以这么操作。</p><h3 id="BasePaginationPresenter-的修改"><a href="#BasePaginationPresenter-的修改" class="headerlink" title="BasePaginationPresenter 的修改"></a>BasePaginationPresenter 的修改</h3><p>观察之前 <code>Model</code> 层的写法就知道，这个地方的参数，主要是从其中取出 <code>pageIndex</code> 和 <code>pageSize</code> ，用于拼接新的 <code>url</code> ，然后再请求数据，这儿不需要这个参数了， 那肯定就是有地方已经提供了这个参数了咯。 对，就是 <code>mPaginationPresenter.getParams()</code> 这个之前没有用过的方法，先回顾一下这个方法在哪儿定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBasePresenter</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line"><span class="comment">//省略部分代码</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 在Model层中调用，此方法用于获取Presenter层处理好的参数</span></div><div class="line"><span class="comment">     * <span class="doctag">@author</span> zfy</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 请求参数</span></div><div class="line"><span class="comment">     * <span class="doctag">@Created</span> at 2017/10/21/021 15:05</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">HashMap&lt;String, String&gt; <span class="title">getParams</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在<a href="http://zengfanyu.top/2017/10/22/MVP2/">第二篇</a>中，针对每一层封装的时候，这个接口就已经定义好了，只是一直没有使用上，在这儿就用上了。而 <code>BasePaginationPresenter</code> 类是实现这个街口的，并且这个 <code>Presenter</code> 是分页请求数据中 <code>Presenter</code> 层的基类，在<a href="http://zengfanyu.top/2017/10/25/MVP3/">第三篇</a>也提到过。下面看看 <code>BasePaginationPresenter</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>：2017/10/20</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePaginationPresenter</span>&lt;<span class="title">Param</span> <span class="keyword">extends</span> <span class="title">BasePaginationParam</span>, <span class="title">Data</span>&gt; <span class="keyword">implements</span> <span class="title">IBasePaginationPresenter</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line">  </div><div class="line"><span class="comment">//省略部分代码</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类实现，用于确认服务器端是否还有数据</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> true-还有数据 false-没有数据</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">serverHaveMoreData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类实现,用于返回请求服务器的url当中的参数</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> HashMap&lt;String,String&gt; url 中的 kay value 对</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> HashMap&lt;String, String&gt; <span class="title">getHttpRequestParams</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//省略部分代码</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, String&gt; <span class="title">getParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getHttpRequestParams();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> serverHaveMoreData();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>只贴出和之前不同的部分，</p><ul><li>多了一个 <code>serverHaveMoreData()</code> 抽象方法，子类去实现的，用于判断服务器还有没有更多的数据。</li><li>多了以个 <code>getHttpRequestParams()</code> 抽象方法，子类去实现，用于将参数填充到 <code>HashMap</code> 中，供 <code>Model</code> 层使用。</li></ul><p>接下里看看子类 <code>AlbumPresenter</code> 的实现：</p><h3 id="AlbumPresenter-的修改"><a href="#AlbumPresenter-的修改" class="headerlink" title="AlbumPresenter 的修改"></a>AlbumPresenter 的修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> * Function:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlbumPresenter</span> <span class="keyword">extends</span> <span class="title">BasePaginationPresenter</span>&lt;<span class="title">BasePaginationParam</span>, <span class="title">Album</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTotalCount=-<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AlbumPresenter</span><span class="params">(BaseMvpActivity baseListView, Class&lt;Album&gt; aClass)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(baseListView, aClass);</div><div class="line">        <span class="keyword">this</span>.mBaseListView = baseListView;</div><div class="line">        getModel().setRequestMethod(Constants.HTTP_GET_METHOD);</div><div class="line">        getModel().setRequestUrl(Constants.SOHU_SERIALS_URL_BASE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//省略代码</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serverResponse</span><span class="params">(Album album)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//省略代码</span></div><div class="line"></div><div class="line">        mTotalCount = album.getData().getCount();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">serverHaveMoreData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//此处pageIndex是从1开始的， 实际适用需要注意pageIndex的起始值</span></div><div class="line">        <span class="keyword">int</span> pageSize = mParam.getPageSize();</div><div class="line">        <span class="keyword">int</span> pageIndex = mParam.getPageIndex();</div><div class="line">        <span class="comment">//第一次需要返回true 才能进到 serverResponse 方法中去初始化 mTotalCount 值</span></div><div class="line">        <span class="keyword">return</span> mTotalCount == -<span class="number">1</span> || (pageIndex * pageSize) &lt;= mTotalCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, String&gt; <span class="title">getHttpRequestParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        HashMap&lt;String, String&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        paramsMap.put(<span class="string">"cid"</span>, <span class="string">"2"</span>);</div><div class="line">        paramsMap.put(<span class="string">"o"</span>, <span class="string">"1"</span>);</div><div class="line">        paramsMap.put(<span class="string">"plat"</span>, <span class="string">"6"</span>);</div><div class="line">        paramsMap.put(<span class="string">"poid"</span>, <span class="string">"1"</span>);</div><div class="line">        paramsMap.put(<span class="string">"api_key"</span>, <span class="string">"9854b2afa779e1a6bff1962447a09dbd"</span>);</div><div class="line">        paramsMap.put(<span class="string">"sver"</span>, <span class="string">"6.2.0"</span>);</div><div class="line">        paramsMap.put(<span class="string">"sysver"</span>, <span class="string">"4.4.2"</span>);</div><div class="line">        paramsMap.put(<span class="string">"partner"</span>, <span class="string">"47"</span>);</div><div class="line">        paramsMap.put(<span class="string">"page"</span>, String.valueOf(mParam.getPageIndex()));</div><div class="line">        paramsMap.put(<span class="string">"page_size"</span>, String.valueOf(mParam.getPageSize()));</div><div class="line">        <span class="keyword">return</span> paramsMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>与之前实现不同地方在于：</p><ul><li>构造方法当中设置的 <code>url</code> ，现在是 <code>baseUrl</code> ，后面的参数由 <code>getHttpRequestParams</code>方法生成，在<code>CommonRequest</code> 中生成完整 <code>url</code>。</li><li><code>serverResponse()</code> 方法中，对 <code>mTotalCount</code> 进行了初始化， 这个值就是记录服务器端一共有多少条数据的。</li><li><code>serverHaveMoreData()</code>拿当前已经加载的数据条数和 <code>mTotalCount</code> 进行对比，判断是否还有数据。</li><li><code>getHttpRequestParams()</code> 构造参数的 <code>HashMap</code> 。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>从这一章的从重构部分代码，很明显可以看到，各层之间的依赖关系：</p><ul><li>主要是替换网络请求的工具，那么就是只涉及到 <code>Model</code> 层的改动。</li><li>这里 <code>Presenter</code> 层改动了，其实是不需要改动的， 这里改动了的原因是，我把之前没有实现的功能补上了，并且将<code>sendRequestToServer()</code> 的参数去掉了导致的。</li><li>可以发现， <code>View</code> 层代码没有进行一点修改，也就是 <code>Activity</code> 并没有动。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Fadz300.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要:在&lt;a href=&quot;http://zengfanyu.top/2017/10/27/MVP4/&quot;&gt;上一篇&lt;/a&gt;中对 OkHttp 进行了简单的封装,但是没有使用到这个系列当中的 Demo 里面,这一章就使用上一篇封装的 OkHttp 工具,替换掉之前 Demo 里面的 Model 层的网络请求.并且之前的部分接口方法都没有使用,比如说 IBasePresenter 接口中的 HashMap&lt;string, string=&quot;&quot;&gt; getParams() 方法, IBasePaginationPresenter 中的 boolean hasMoreData() 方法，算是对上一篇的补充。&lt;/string,&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
      <category term="okHttp" scheme="http://zengfanyu.top/tags/okHttp/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（四）插曲-封装OkHttp</title>
    <link href="http://zengfanyu.top/2017/10/27/MVP4/"/>
    <id>http://zengfanyu.top/2017/10/27/MVP4/</id>
    <published>2017-10-27T14:37:15.000Z</published>
    <updated>2017-10-29T12:38:18.194Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/CdNDgLr.png" alt=""></p><p><em>摘要</em>：<em>前两篇中使用的网络请求工具是 <code>OkHttp</code> ，并没有经过封装，都是简单的使用 <code>get</code> 请求，并且将错误全部都抛到上层去解决了， 这无形之中增加了上层的编码复杂度，即使要抛向上层，起码也要给一个 <code>errorCode</code> 或者是 <code>errorMsg</code> 吧，并且可用性也不高，所以这边文章就针对 <code>OkHttp</code> 进行封装，然后将封装之后的工具使用到上一小结的 <code>Demo</code> 之中。</em><br><a id="more"></a></p><h2 id="官方给的例子"><a href="#官方给的例子" class="headerlink" title="官方给的例子"></a>官方给的例子</h2><ul><li><p>同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function">String <span class="title">run</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(url)</div><div class="line">      .build();</div><div class="line"></div><div class="line">  Response response = client.newCall(request).execute();</div><div class="line">  <span class="keyword">return</span> response.body().string();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>异步方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(url)</div><div class="line">        .build();</div><div class="line"></div><div class="line"> client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="封装思路"><a href="#封装思路" class="headerlink" title="封装思路"></a>封装思路</h2><p>结合上面异步方法，稍作分析，涉及到如下几个对象<font color="#FF8000"> <strong><code>OkHttpClient</code></strong> , <strong><code>Request</code></strong> , <strong><code>Call</code></strong>,<strong><code>Response</code></strong> </font>,其他的都一些方法的调用，而 <strong><code>Response</code></strong> 是返回结果的对象，所以我们的封装应该重点针对剩余三个对象来进行。</p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p><code>Request</code> 在 <code>Okhttp</code> 当中是抽象出来的一个请求对象，它封装了请求报文信息：请求的 <code>Url</code> 地址，请求的方法（<code>Get Post</code>等），各种请求头（<code>Content-Type Cookie</code>）以及可以选择的请求体，一般通过内部的 <code>Builder</code> 类来构建对象，建筑者设计模式。</p><p>那么我们这里就针对 <code>Post Get</code> 两种请求方式做封装，但是这里又涉及到一个问题，就是我们还需要参数，用于拼接请求 <code>Url</code> 的参数，举个栗子：</p><p>这是搜狐电视剧频道的 <code>API</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">http:<span class="comment">//api.tv.sohu.com/v4/search/channel.json%22%20+%20%22?cid=2&amp;o=1&amp;plat=6&amp;poid=1&amp;api_key=9854b2afa779e1a6bff1962447a09dbd&amp;%22%20+%20%22sver=6.2.0&amp;sysver=4.4.2&amp;partner=47&amp;page=1&amp;page_size=10</span></div></pre></td></tr></table></figure><p>这么看可能特别的麻烦，我们把它拆分一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String baseUrl=http:<span class="comment">//api.tv.sohu.com/v4/search/channel.json%22%20+%20%22</span></div></pre></td></tr></table></figure><p>然后剩下的都是参数了，以键值对的形式存在：</p><p><img src="https://i.imgur.com/YGahFXU.png" alt=""></p><p>这些参数拼接在 <code>baseUrl</code> 后面的顺序是没有要求的，<strong>不一定要按照上面的顺序来，只要每个参数都按照固定的格式出现就可以</strong>。</p><p>看上面的完整 <code>Url</code> 可以发现规律，在 <code>baseUrl</code> 后面有一个 <code>？</code>， 然后就就是 <code>key1=value1&amp;key2=value2&amp;key3=value3</code> 这种形式的</p><p>其实遵循 <code>RESTful API</code> 设计的接口，都会是这种形式，所以这里也利于我们进行封装了。而 <code>key-value</code> 这种形式，就特别适合使用 <code>Map</code> 结构来封装。</p><p>说这么多，上代码，首先是对参数进行封装：</p><font color="#FF8000"><strong>RequestParam</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 13:55</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>: 封装url中的参数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParams</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用&#123;<span class="doctag">@link</span> ConcurrentHashMap&#125;是为了保证线程安全</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;String, String&gt; urlParams = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestParams</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestParams</span><span class="params">(Map&lt;String, String&gt; source)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : source.entrySet()) &#123;</div><div class="line">            put(entry.getKey(), entry.getValue());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestParams</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">        put(key, value);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(key) &amp;&amp; !TextUtils.isEmpty(value)) &#123;</div><div class="line">            urlParams.put(key, value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ConcurrentHashMap&lt;String, String&gt; <span class="title">getUrlParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> urlParams;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这地方使用 <code>ConcurrentHashMap</code> 就是为了保证线程安全的，这个类使用的是<font color="#FF8000">锁分段技术</font>，不同于一般的同步方法或者是同步代码块，它只会锁住其中一个 <code>segment</code>，其他的 <code>segment</code> 仍然是可以访问的，所以他的效率会比 <code>synchronized</code> 高。</p><p>有了 <code>RequestParam</code> 之后，就可以使用它来拼接 <code>url</code>，有了 <code>url</code> 之后，就可以使用它来构建 <code>Request</code>对象了。</p><font color="#FF8000"><strong>CommonRequest</strong> </font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 2  * <span class="doctag">@author</span>: fanyuzeng</span></div><div class="line"><span class="comment"> 3  * <span class="doctag">@date</span>: 2017/10/27 14:08</span></div><div class="line"><span class="comment"> 4  * <span class="doctag">@desc</span>: response for build various kind of &#123;<span class="doctag">@link</span> okhttp3.Request&#125; include Get Post upload etc.</span></div><div class="line"><span class="comment"> 5  */</span></div><div class="line"> <span class="number">6</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonRequest</span> </span>&#123;</div><div class="line"> <span class="number">7</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"CommonRequest"</span>;</div><div class="line"> <span class="number">8</span>     <span class="comment">/**</span></div><div class="line"><span class="comment"> 9      * create a Get request</span></div><div class="line"><span class="comment">10      *</span></div><div class="line"><span class="comment">11      * <span class="doctag">@param</span> baseUrl base url</span></div><div class="line"><span class="comment">12      * <span class="doctag">@param</span> params see &#123;<span class="doctag">@link</span> RequestParams&#125;</span></div><div class="line"><span class="comment">13      * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Request&#125;</span></div><div class="line"><span class="comment">14      * <span class="doctag">@created</span> at 2017/10/27 14:39</span></div><div class="line"><span class="comment">15      */</span></div><div class="line"><span class="number">16</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Request <span class="title">createGetRequest</span><span class="params">(@NonNull String baseUrl, @Nullable RequestParams params)</span> </span>&#123;</div><div class="line"><span class="number">17</span>         StringBuilder urlBuilder = <span class="keyword">new</span> StringBuilder(baseUrl).append(<span class="string">"?"</span>);</div><div class="line"><span class="number">18</span>         <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">19</span>             <span class="comment">//将请求参数合并进url中</span></div><div class="line"><span class="number">20</span>             <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.getUrlParams().entrySet()) &#123;</div><div class="line"><span class="number">21</span>                 urlBuilder.append(entry.getKey()).append(<span class="string">"="</span>).append(entry.getValue()).append(<span class="string">"&amp;"</span>);</div><div class="line"><span class="number">22</span>             &#125;</div><div class="line"><span class="number">23</span> </div><div class="line"><span class="number">24</span>             Log.d(TAG,<span class="string">"&gt;&gt; createGetRequest &gt;&gt; "</span> + urlBuilder.toString());</div><div class="line"><span class="number">25</span>         &#125;</div><div class="line"><span class="number">26</span>         <span class="keyword">return</span> <span class="keyword">new</span> Request.Builder().get().url(urlBuilder.substring(<span class="number">0</span>, urlBuilder.length() - <span class="number">1</span>)).build();</div><div class="line"><span class="number">27</span>     &#125;</div><div class="line"><span class="number">28</span> </div><div class="line"><span class="number">29</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">30      * create a post request</span></div><div class="line"><span class="comment">31      *</span></div><div class="line"><span class="comment">32      * <span class="doctag">@param</span> baseUrl base url</span></div><div class="line"><span class="comment">33      * <span class="doctag">@param</span> params see &#123;<span class="doctag">@link</span> RequestParams&#125;</span></div><div class="line"><span class="comment">34      * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Request&#125;</span></div><div class="line"><span class="comment">35      * <span class="doctag">@created</span> at 2017/10/27 14:39</span></div><div class="line"><span class="comment">36      */</span></div><div class="line"><span class="number">37</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Request <span class="title">createPostRequest</span><span class="params">(@NonNull String baseUrl, @NonNull RequestParams params)</span> </span>&#123;</div><div class="line"><span class="number">38</span>         FormBody.Builder mFormBodyBuilder = <span class="keyword">new</span> FormBody.Builder();</div><div class="line"><span class="number">39</span>         <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.getUrlParams().entrySet()) &#123;</div><div class="line"><span class="number">40</span>             mFormBodyBuilder.add(entry.getKey(), entry.getValue());</div><div class="line"><span class="number">41</span>         &#125;</div><div class="line"><span class="number">42</span>         FormBody formBody = mFormBodyBuilder.build();</div><div class="line"><span class="number">43</span>         <span class="keyword">return</span> <span class="keyword">new</span> Request.Builder().post(formBody).url(baseUrl).build();</div><div class="line"><span class="number">44</span>     &#125;</div><div class="line"><span class="number">45</span> </div><div class="line"><span class="number">46</span> &#125;</div></pre></td></tr></table></figure><p>第 <code>16</code> 行的 <code>createGetRequest</code> 方法是用于创建一个 <code>Get</code> 请求，主要就是使用 <code>StringBuilder</code> 进行 <code>Url</code> 的拼接，第 <code>37</code> 行的 <code>createPostRequest</code> 方法是用于创建一个 <code>Post</code> 请求的。 <code>Post</code> 请求是先创建 <code>FormBody</code> ，然后和 <code>baseUrl</code> 一个构造 <code>Request</code> 。</p><p>封装到这里， <code>Request</code> 就算是封装完了， 当然这里只封装了 <code>Post Get</code> ，也可以继续封装文件上传和文件下载的Request。</p><h3 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h3><p><code>Call</code> 代表的是一个实际的 <code>HTTP</code> 请求，它是链接 <code>Request</code> 和 <code>Response</code> 的桥梁，通过 <code>Request</code> 对象的 <code>newCall</code> 方法可以得到一个 <code>Call</code> 对象，既支持同步获取数据，也支持异步，在上面官方例子里，也可以看出来，在异步回调中，当获取到数据，会将 <code>Response</code> 对象传入 <code>Callback</code> 的 <code>onSuccess</code> 方法中，如果请求没有成功，就会调用 <code>onFailure</code> 方法（<code>Response</code> 下面说）。那么看看  <code>Callback</code> 是什么。</p><p>先看看官方的 <code>Callback</code> 是什么 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span></span>;</div><div class="line"></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对，把注释删除了之后，其实就是两个接口，简单的理解成，一个是请求成功时的回调，一个是请求失败时的回调。</p><p>那么对这一层的<strong>封装思路</strong>是这样子的：</p><p>一般来说，在上层，我们是需要去处理上面两个回调的，在 <code>onFailure</code> 中，请求失败，应该做什么操作，在 <code>onResponse</code> 中，<code>HTTP</code> 返回的状态码在 <code>[200,300）</code>之间应该有什么操作，在其他区间又应该有什么操作。<font color="#FF8000">那么在这里，我们就创建一个类，去实现这个接口，将基本的处理都在这个类里写好，出错误了，就拿到 <code>erroeCode errorMsg</code> 回调给上层，正确的返回信息，就直接回调给上一层</font>。</p><p>那么这里就涉及到我们自定义的一个 <code>Exception</code> 和 <code>Listener</code> 以及实现了 <code>Callback</code> 接口的 <code>CommonCallback</code> 类。</p><font color="#FF8000"><strong>OkHttpException</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 13:44</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mErrorCode;</div><div class="line">    <span class="keyword">private</span> String mErrorMsg;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OkHttpException</span><span class="params">(<span class="keyword">int</span> errorCode, String errorMsg)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mErrorCode = errorCode;</div><div class="line">        <span class="keyword">this</span>.mErrorMsg = errorMsg;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mErrorCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorMsg</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mErrorMsg;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><font color="#FF8000"><strong>DisposeDataListener</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 13:49</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisposeDataListener</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 请求服务器数据成功时回调的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> responseObj 需要回调到上层的请求结果</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object responseObj)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 请求服务器失败时候的回调方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> exception 需要回调到上层的错误反馈</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(OkHttpException exception)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再将这个 <code>Listener</code> 用<font color="#FF8000">代理设计模式</font>再封装一层</p><font color="#FF8000"><strong>DisposeDataHandler</strong></font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 13:52</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>: 代理模式,使用DisposeDataHandler 代理 DisposeDataListener的操作</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisposeDataHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> DisposeDataListener mListener;</div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; mClass;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DisposeDataHandler</span><span class="params">(DisposeDataListener listener)</span> </span>&#123;</div><div class="line">        mListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DisposeDataHandler</span><span class="params">(DisposeDataListener listener, Class&lt;?&gt; aClass)</span> </span>&#123;</div><div class="line">        mListener = listener;</div><div class="line">        mClass = aClass;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object responseObj)</span> </span>&#123;</div><div class="line">        mListener.onSuccess(responseObj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(OkHttpException exception)</span> </span>&#123;</div><div class="line">        mListener.onFailure(exception);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; getClassType() &#123;</div><div class="line">        <span class="keyword">return</span> mClass;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>此处用代理模式，主要是为了优雅（装X）的处理 <code>Class&lt;?&gt;</code> 这个对象，这是用于映射的类型，在调用 <code>Listener</code> 的回到方法之后做判断这个对象是否存在，是，则再映射在返回，否，直接返回。<br><br>然后将三面三个类聚合到一起<br><br><font color="#FF8000"><strong>CommonJsonCallback</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 14:41</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonJsonCallback</span> <span class="keyword">implements</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"CommonJsonCallback"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG_RESULT_EMPTY = <span class="string">"request could not be ececuted"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG_JSON_EMPTY = <span class="string">"json is empty or null"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG_RETURN_CODE = <span class="string">"http return code is not [200,300)"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_ERROR = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> JSON_ERROR = -<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mDeliveryHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Gson mGson = <span class="keyword">new</span> Gson();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DisposeDataHandler mDisposeDataHandler;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonJsonCallback</span><span class="params">(DisposeDataHandler dataHandler)</span> </span>&#123;</div><div class="line">        mDisposeDataHandler = dataHandler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(@NonNull Call call, @NonNull <span class="keyword">final</span> IOException e)</span> </span>&#123;</div><div class="line">        mDeliveryHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mDisposeDataHandler.onFailure(<span class="keyword">new</span> OkHttpException(NETWORK_ERROR, MSG_RESULT_EMPTY + e.getMessage()));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(@NonNull Call call, @NonNull <span class="keyword">final</span> Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!response.isSuccessful()) &#123;</div><div class="line">            mDeliveryHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mDisposeDataHandler.onFailure(<span class="keyword">new</span> OkHttpException(NETWORK_ERROR, MSG_RETURN_CODE + response.message()));</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> String resultJson = response.body().string();</div><div class="line">        mDeliveryHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                handleResponse(resultJson);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(String resultJson)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(resultJson)) &#123;</div><div class="line">            mDisposeDataHandler.onFailure(<span class="keyword">new</span> OkHttpException(NETWORK_ERROR, MSG_JSON_EMPTY));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mDisposeDataHandler.getClassType() == <span class="keyword">null</span>) &#123;</div><div class="line">            mDisposeDataHandler.onSuccess(resultJson);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Object mappedDataType = mGson.fromJson(resultJson, mDisposeDataHandler.getClassType());</div><div class="line">            <span class="keyword">if</span> (mappedDataType == <span class="keyword">null</span>) &#123;</div><div class="line">                mDisposeDataHandler.onFailure(<span class="keyword">new</span> OkHttpException(JSON_ERROR, MSG_JSON_EMPTY));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mDisposeDataHandler.onSuccess(mappedDataType);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>自我感觉用代理之后，处理对象都是 <code>DisposeHandler</code> ，不会在看到 <code>Listener</code> <code>Class&lt;?&gt;</code> ,适应起来方便些了。</p><p>要注意一点是，在 <code>onResponse</code> 方法中，还是在子线程中的，要及时切换线程。</p><p>到这里，就对 <code>Call</code> 这个对象封装完成了。</p><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p><code>Response</code> 类封装了响应报文信息：状态吗（<code>200</code>、<code>404</code> 等）、响应头（<code>Content-Type</code>、<code>Server</code> 等）以及可选的响应体。可以通过 <code>Call</code> 对象的 <code>execute()</code> 方法获得 <code>Response</code> 对象，异步回调执行 <code>Callback</code> 对象的 <code>onResponse</code> 方法时也可以获取 <code>Response</code> 对象。</p><p>这东西人家已经给我们封装好了， 需要什么直接去拿就行， 也不需要在封装。</p><h3 id="OkHttpClient"><a href="#OkHttpClient" class="headerlink" title="OkHttpClient"></a>OkHttpClient</h3><p><a href="http://square.github.io/okhttp/3.x/okhttp/" target="_blank" rel="external">官方文档</a>有这么一句话：</p><blockquote><p>OkHttp performs best when you create a single OkHttpClient instance and reuse it for all of your HTTP calls. This is because each client holds its own connection pool and thread pools. Reusing connections and threads reduces latency and saves memory. Conversely, creating a client for each request wastes resources on idle pools.</p></blockquote><p>翻译一下：当你使用一个全局的 <code>OkHttpClient</code> ，并且重用它发起 <code>HTTP</code> 请求的时候，<code>OkHttp</code> 的能够发挥最 <code>NB</code> 的性能，因为每一个客户端都持有它的连接池和线程池，如果这俩东西可以重用的话，那么就能减少潜在的因素，并且节省内存，相反的，如果为每一个客户端的每一个请求都创建一个 <code>OkHttpClient</code> ，那么就会浪费空闲的连接池和线程池中的资源。</p><p>叽叽歪歪这么多，就是说用 <code>OkHttpClient</code> 的时候要用<font color="#ff8000"><strong>单例模式</strong></font>。</p><p>刚开始我是这么设计的：</p><font color="#FF8000"><strong>CommonokHttpClient</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 15:21</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Deprecated</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonOkHttpClient</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIME_OUT = <span class="number">30</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient sOkHttpClient;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line">        builder.hostnameVerifier(<span class="keyword">new</span> HostnameVerifier() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        builder.connectTimeout(TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        builder.readTimeout(TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        builder.writeTimeout(TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        <span class="comment">//允许重定向</span></div><div class="line">        builder.followRedirects(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> 2017/10/27 https</span></div><div class="line">        sOkHttpClient = builder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 请求服务器数据的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> request Use &#123;<span class="doctag">@link</span> com.project.fanyuzeng.mvpdemo.utils.okhttp.request.CommonRequest&#125; to build</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> handler see &#123;<span class="doctag">@link</span> DisposeDataHandler&#125;  proxy class</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestServerData</span><span class="params">(Request request, DisposeDataHandler handler)</span> </span>&#123;</div><div class="line">        sOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> CommonJsonCallback(handler));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>恩，静态代码块中初始化实例化 <code>OkHttpClient</code>，我认为饿汉模式没有本质的区别， 但是这种方式比饿汗模式的初始化时间更早。</p><blockquote><p>好吧 ，我承认我懒，不想在整个单例类出来。。</p></blockquote><p>这样写，也没什么问题，但是外界在使用的使用，比较麻烦</p><ol><li>创建<code>RequestParams</code>，涉及到 <code>HashMap</code> 的好多 <code>put</code> 操作</li><li>用 <code>RequestParam</code>  去初始化 <code>CommonRequest</code></li><li>在上层根据请求方式去创建对应的 <code>Request</code></li><li>再实例化一个<code>DisposeHandler</code> </li></ol><p>所以只好接着封装吧，分析上面 <code>4</code> 个步骤，其中步骤 <code>1</code> 那是不能再简化了的，因为具体的请求参数肯定是要从外界传进来的，这里涉及到的 <code>HashMap</code> 以及它的 <code>put</code> 操作是不可避免的。步骤 <code>2</code> 和步骤 <code>3</code> 完全是可以封装一下的，步骤 <code>4</code> 也是需要从外外界回调的方法，类似于点击监听的 <code>onClick</code> 方法回调。</p><p>所以把 <code>CommonOkHttpClient</code> 给 <code>Deprecated</code> 掉，重新来一个</p><font color="#FF8000"><strong>OkHttpManager</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 17:57</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> OkHttpManager sManager;</div><div class="line">    <span class="keyword">private</span>  OkHttpClient mOkHttpClient;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">OkHttpManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line">        builder.hostnameVerifier(<span class="keyword">new</span> HostnameVerifier() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        builder.connectTimeout(Constants.HTTP_TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        builder.readTimeout(Constants.HTTP_TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        builder.writeTimeout(Constants.HTTP_TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        <span class="comment">//允许重定向</span></div><div class="line">        builder.followRedirects(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> 2017/10/27 https</span></div><div class="line">        mOkHttpClient = builder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OkHttpManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sManager == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (OkHttpManager.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sManager == <span class="keyword">null</span>) &#123;</div><div class="line">                    sManager = <span class="keyword">new</span> OkHttpManager();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用&#123;<span class="doctag">@link</span> OkHttpClient&#125;想服务器端请求数据的方法</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> method &#123;<span class="doctag">@link</span> Constants#HTTP_GET_METHOD&#125; Get方式,&#123;<span class="doctag">@link</span> Constants#HTTP_POST_METHOD&#125; Post方式</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> baseUrl baseUrl</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> paramsMap 请求url的参数,以键值对的形式存放</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestServerData</span><span class="params">(<span class="keyword">int</span> method, String baseUrl, HashMap&lt;String, String&gt; paramsMap, DisposeDataHandler handler)</span> </span>&#123;</div><div class="line">        RequestParams requestParams = <span class="keyword">new</span> RequestParams(paramsMap);</div><div class="line">        Request request = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (method == Constants.HTTP_GET_METHOD) &#123;</div><div class="line">            request = CommonRequest.createGetRequest(baseUrl, requestParams);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method == Constants.HTTP_POST_METHOD) &#123;</div><div class="line">            request = CommonRequest.createPostRequest(baseUrl, requestParams);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</div><div class="line">            mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> CommonJsonCallback(handler));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>好吧，还是用双重锁模式的单例比较放心 。</p></blockquote><p>到此就封装完了，下面简单的使用一下。</p><h2 id="使用姿势"><a href="#使用姿势" class="headerlink" title="使用姿势"></a>使用姿势</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span>  OkHttpManager.getInstance().requestServerData(method, url, mPaginationPresenter.getParams(), <span class="keyword">new</span> DisposeDataHandler(<span class="keyword">new</span> DisposeDataListener() &#123;</div><div class="line"> <span class="number">2</span>             <span class="meta">@Override</span></div><div class="line"> <span class="number">3</span>             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object responseObj)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>                 String responseJson = (String) responseObj;</div><div class="line"> <span class="number">5</span>                 Log.d(TAG, <span class="string">"&gt;&gt; onSuccess &gt;&gt; "</span> + responseJson);</div><div class="line"> <span class="number">6</span>                 mPaginationPresenter.accessSuccess(responseJson);</div><div class="line"> <span class="number">7</span>             &#125;</div><div class="line"> <span class="number">8</span>             <span class="meta">@Override</span></div><div class="line"> <span class="number">9</span>             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(OkHttpException exception)</span> </span>&#123;</div><div class="line"><span class="number">10</span>                 Log.d(TAG, <span class="string">"&gt;&gt; onFailure &gt;&gt; "</span> + exception.getErrorCode());</div><div class="line"><span class="number">11</span>                 mPaginationPresenter.okHttpError(exception.getErrorCode(), exception.getErrorMsg(), url);</div><div class="line"><span class="number">12</span>             &#125;</div><div class="line"><span class="number">13</span>         &#125;,<span class="keyword">null</span>));</div></pre></td></tr></table></figure><ul><li>没有将 <code>Json</code> 数据映射成实体类， 所以在 <code>13</code> 行构造 <code>DisposeDataHandler</code> 的时候，第二个 类参数传的是 <code>null</code>。</li><li>这个例子是结合上一篇请求分页数据来用的，所以这里直接将 <code>Json</code> 数据抛给 <code>Presenter</code> 层，让它去处理。</li><li>第 <code>1</code> 行的 <code>mPaginationPresenter.getParams()</code> 就是拿 <code>url</code> 中的参数。</li></ul><p>由于篇幅的限制，这一篇先到这里，下一篇再把这个封装的 <code>OkHttp</code> 工具用于 <code>MVP</code> 模式的 <code>Demo</code> 当中</p><p>最后，贴个 <code>AS</code> 中封装之后工具的结构图。</p><p><img src="https://i.imgur.com/OMByMTy.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/CdNDgLr.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要&lt;/em&gt;：&lt;em&gt;前两篇中使用的网络请求工具是 &lt;code&gt;OkHttp&lt;/code&gt; ，并没有经过封装，都是简单的使用 &lt;code&gt;get&lt;/code&gt; 请求，并且将错误全部都抛到上层去解决了， 这无形之中增加了上层的编码复杂度，即使要抛向上层，起码也要给一个 &lt;code&gt;errorCode&lt;/code&gt; 或者是 &lt;code&gt;errorMsg&lt;/code&gt; 吧，并且可用性也不高，所以这边文章就针对 &lt;code&gt;OkHttp&lt;/code&gt; 进行封装，然后将封装之后的工具使用到上一小结的 &lt;code&gt;Demo&lt;/code&gt; 之中。&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
      <category term="okHttp" scheme="http://zengfanyu.top/tags/okHttp/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（三）基于分页列表的封装</title>
    <link href="http://zengfanyu.top/2017/10/25/MVP3/"/>
    <id>http://zengfanyu.top/2017/10/25/MVP3/</id>
    <published>2017-10-25T12:37:15.000Z</published>
    <updated>2017-10-28T10:30:28.153Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/HCStIDG.png" alt=""></p><p>摘要：在<a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>中对MVP模式进行了封装，然后通过封装之后的类，实现了一个网络请求，但是请求到网络数据之后，就直接展示到了 <code>View</code> 层，并没有其他的操作，然而我们在开发过程中， 经常会用到分页加载，一般在滑动控件向上滚动，加载更多事件触发是调用，并且这个过程设计到两个参数，一个是 <code>PageIndex</code> ：页码；一个是 <code>PageSize</code> 一页数据的大小， 分页加载就是通过在某一具体事件触发时，调用修改这两个或者一个参数，重新请求网络，从而拿到下一页的数据，这边文章还是基于MVP模式，对分页数据的请求进行封装。<br><a id="more"></a></p><p> <code>presenter</code> 层作为 <code>MVP</code> 模式的桥梁， 那就先从这一层开始说起吧。</p><h2 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h2><p><a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>中对 <code>Presenter</code> 层的公共方法进行了抽取并且封装成了一个接口 <code>IBasePresenter</code> ，那么现在我们需要<strong>实现分页加载还有刷新</strong>的功能，那么在 <code>IBasePresenter</code> 接口的基础之上，在对其封装一个接口 <code>IBasePeginationPresenter</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by fanyuzeng on 2017/10/23.</span></div><div class="line"><span class="comment"> * Function:在IBasePresenter的基础上扩展的接口，适用于分页加载的情况</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBasePaginationPresenter</span>&lt;<span class="title">Param</span>&gt; <span class="keyword">extends</span> <span class="title">IBasePresenter</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 刷新数据的接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> param 访问服务器的参数</span></div><div class="line"><span class="comment"> * <span class="doctag">@created</span> at 2017/10/23 20:07</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">(Param param)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 加载更多的接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@created</span> at 2017/10/23 20:07</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadingNext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 用于判断服务器端是否还有更多的数据</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> true -还有更多数据 - false 没有更多的数据</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasMoreData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>也是一个泛型的接口，增加的三个方法 ：</p><ol><li><code>refresh(Param param)</code> 在 <code>View</code> 层调用，用于通知 <code>Model</code> 层刷新数据</li><li><code>loadingNext()</code> 在 <code>View</code> 层调用，用于通知 <code>Model</code> 层加载下一页数据</li><li><code>hasMoreData()</code> 在 <code>Model</code> 层请求网络数据前调用做判断，是否还有下一页数据</li></ol><p>有了针对分页刷新的接口之后，还需要有一个实现它的基类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu </span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>：2017/10/20 </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePaginationPresenter</span>&lt;<span class="title">Param</span> <span class="keyword">extends</span> <span class="title">BasePeginationParam</span>, <span class="title">Data</span>&gt; <span class="keyword">implements</span> <span class="title">IBasePaginationPresenter</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BasePaginationPresenter"</span>;</div><div class="line">    <span class="keyword">private</span> IBaseModel mBaseModel;</div><div class="line">    <span class="keyword">private</span> IBaseView mBaseListView;</div><div class="line">    <span class="keyword">private</span> Param mParam;</div><div class="line">    <span class="keyword">private</span> Class&lt;Data&gt; mClazz;</div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mHasMoreData=<span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类中调用，用于传递服务器返回的，处理好的结果</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> data View层需要的数据类型</span></div><div class="line"><span class="comment">     * <span class="doctag">@created</span> at 2017/10/23 20:10</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">serverResponse</span><span class="params">(Data data)</span></span>;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * 子类中调用，用于确认服务器端是否还有数据</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * <span class="doctag">@return</span> true-还有数据 false-没有数据</span></div><div class="line"><span class="comment">         */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">serverHaveMoreData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasePaginationPresenter</span><span class="params">(IBaseView baseListView, Class&lt;Data&gt; Clazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mBaseListView = baseListView;</div><div class="line">        mClazz = Clazz;</div><div class="line">        mBaseModel = <span class="keyword">new</span> SohuAlbumModel(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(Param param)</span> </span>&#123;</div><div class="line">        requestServer(param);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadingNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mParam != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">int</span> pageIndex = mParam.getPageIndex();</div><div class="line">            mParam.setPageIndex(pageIndex + <span class="number">1</span>);</div><div class="line">            requestServer(mParam);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestServer</span><span class="params">(@Nullable Param param)</span> </span>&#123;</div><div class="line">        mBaseListView.showProgress(<span class="keyword">true</span>);</div><div class="line">        mParam = param;</div><div class="line">        Log.d(TAG, <span class="string">"&gt;&gt; requestServer &gt;&gt; "</span>);</div><div class="line">        getModel().sendRequestToServer(param);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessSuccess</span><span class="params">(String responseJson)</span> </span>&#123;</div><div class="line">        mBaseListView.showProgress(<span class="keyword">false</span>);</div><div class="line">        Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">        serverResponse(gson.fromJson(responseJson, mClazz));</div><div class="line">        mBaseListView.showSuccess(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        mBaseModel.cancelRequest();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">okHttpError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc, <span class="keyword">final</span> String errorUrl)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mBaseListView.showOkHttpError(errorCode, errorDesc, errorUrl);</div><div class="line">                mBaseListView.showProgress(<span class="keyword">false</span>);</div><div class="line">                mBaseListView.showSuccess(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBaseModel <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBaseModel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, String&gt; <span class="title">getParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ServerHaveMoreData();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在类申明时，可以看到 <code>Param extends BasePeginationParam</code> ，这里的 <code>BasePeginationParam</code>主要是封装了<strong>摘要</strong>中提到的 <code>PageIndex</code> 和 <code>PageSize</code> 两个参数，以及他们的 <code>Getter Seeter</code> 方法。</li><li>重点看 <code>IBasePeginationPresenter</code> 中新增加的三个方法，<code>refresh(Param param)</code> 会重新调用一次 <code>requestServer(Param param)</code> （<em>此方法在<a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>也提过了，就是通知 <code>Model</code> 层获取数据</em>）；</li><li><code>loadingNext()</code> ，加载下一页数据的方法，就是将参数中的 <code>PageIndex + 1</code> 之后，重新调用 <code>requestServer(Param param)</code> 方法。此处只改变了页码，如果需要改变请求数据的条数，也是相应的在 <code>loadingNext()</code> 中修改 <code>PageSize</code> 的值。</li><li><code>hasMoreData()</code> ,这里返回抽象方法 <code>serverhaveMoreData()</code> ，这个方法是在子类中实现的，子类解析了数据之后，判断服务器是否还有数据返回。</li></ul><p>然后有需要实现分页功能的 <code>Presenter</code> 就可以直接继承 <code>BasePaginationPresenter</code> 。</p><h2 id="Model-层"><a href="#Model-层" class="headerlink" title="Model 层"></a>Model 层</h2><p>由于 <code>Model</code> 层的职责比较单一，<strong>就是向数据源请求数据，并且返回给 <code>Presenter</code> 层</strong>，所以此处不需要额外封装接口或者是基类，只需要重新实现<a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>中提到的 <code>IBaseModel</code> 接口即可。</p><h2 id="View-层"><a href="#View-层" class="headerlink" title="View 层"></a>View 层</h2><p>此处和请求一次数据相比较， <code>View</code> 层就是需要在两个事件触发的时候，<strong>重新设置参数</strong>通知 <code>Presenter</code> 去请求数据，然后再展示出来。这两个事件分别是：<strong>上拉到底时加载更多、下拉时刷新数据</strong>（当然可以别的）。</p><h2 id="针对上一小节中封装类的具体实现"><a href="#针对上一小节中封装类的具体实现" class="headerlink" title="针对上一小节中封装类的具体实现"></a>针对上一小节中封装类的具体实现</h2><h3 id="View-层的具体实现"><a href="#View-层的具体实现" class="headerlink" title="View 层的具体实现"></a>View 层的具体实现</h3><p>主要是展示电视剧的主要信息，那么需要提供一个接口方法，给 <code>Presenter</code> 层调用，展示处理好的 <code>JavaBean</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示搜狐电视剧频道具体信息的接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISohuSerials</span> <span class="keyword">extends</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 展示搜狐视频API电视剧主要信息的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> videoList 处理好的VideoInfo集合</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAlbumMainInfo</span><span class="params">(List&lt;VideoInfo&gt; videoList)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>此处的 <code>VideoInfo</code> 是一个JavaBean，对应的就是电视剧信息的实体类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoInfo</span> </span>&#123;</div><div class="line">   <span class="meta">@SerializedName</span>(<span class="string">"main_actor"</span>)</div><div class="line">   <span class="keyword">private</span> String mMainActor;</div><div class="line">      <span class="meta">@SerializedName</span>(<span class="string">"total_video_count"</span>)</div><div class="line">      <span class="keyword">private</span> <span class="keyword">int</span> mTotalVideoCount;</div><div class="line">      <span class="meta">@SerializedName</span>(<span class="string">"album_name"</span>)</div><div class="line">      <span class="keyword">private</span> String mAlbumName;</div><div class="line">      <span class="meta">@SerializedName</span>(<span class="string">"director"</span>)</div><div class="line">      <span class="keyword">private</span> String mDirector;</div><div class="line">      <span class="meta">@SerializedName</span>(<span class="string">"publish_time"</span>)</div><div class="line">      <span class="keyword">private</span> String mPublishTime;</div><div class="line"></div><div class="line"><span class="comment">//Getter and setter methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>之前映射数据需要保证字段名和 <code>Json</code> 数据的字段名一致，其实本来把这个类的字段名改得一致就行啦，但是服务器端返回的数据字段，很多都是以<code>“_”</code>进行连接，而不是使用驼峰命名法则，这个时候 <code>Gson</code> 的 <code>@SerializedName</code> 注解就派上用场了，注解中用服务器端返回值字段，成员变量仍然使用驼峰命名法。</p><p>但是上个周末安装了最近 <code>Alibaba 10 月 14 日</code> 推出的 <code>Coding Guidelines</code> 插件，发现代码中很多不规范的地方，并且人家规定了成员变量就必须要使用驼峰命名！所以我决定要按照这个插件的规范来写代码了，虽然现在进不了大厂，但是先熟悉大厂的代码规范也是好事，哈哈~  咳咳，按照大厂的代码规范，成员变量的命名必须使用驼峰命名法！</p><p>这个插件是真心好用，比如对类名要 <code>javadoc</code> 注释 参数、返回值、异常说明、此方法做什么事情、实现什么功能（领域模型相关命名除外，比如：DO、BO、DAO），并且是全中文的！直接在 <code>AS</code> 的 <code>Inspection Results</code> 窗口中显示，这 <code>IDE</code> 内置功能啥时候讲过中文反馈结果的？</p><p> <a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;mid=2247486054&amp;idx=1&amp;sn=f71c4d006d52a5aca679992cbd25620d&amp;chksm=e9293769de5ebe7f5efcd0f86eaf0dd1820ff99a21e3392741d25cbac66eae87f2757bdcc545&amp;mpshare=1&amp;scene=1&amp;srcid=1025zktcvhJDfkWaaRbDsw2a#rd" target="_blank" rel="external">《阿里巴巴Java开发规约》插件全球首发！</a> </p><p>广告时间结束，言归正传！</p></blockquote><p>这个 <code>Activity</code> 实现了 <code>ISohuSerials</code> 接口，布局文件和<a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>一样，只是把 <code>ListView</code> 换成了自定义的 <code>PullLoadRecyclerView</code> 了，这个<code>RecycyclerView</code> 支持上拉加载更多和下拉刷新， 这里不展开说了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SohuAlbumInfoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ISohuSerials</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SohuAlbumInfoActivity"</span>;</div><div class="line">    <span class="keyword">private</span> PullLoadRecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> ProgressBar mProgressBar;</div><div class="line">    <span class="keyword">private</span> TextView mTip;</div><div class="line">    <span class="keyword">private</span> RelativeLayout mContainer;</div><div class="line">    <span class="keyword">private</span> AlbumPresenter mAlbumPresenter;</div><div class="line">    <span class="keyword">private</span> BasePaginationParam mParam= <span class="keyword">new</span> BasePaginationParam(<span class="number">1</span>, <span class="number">10</span>);</div><div class="line">    <span class="keyword">private</span> VideoInfoAdapter mAdapter;</div><div class="line">    Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsFromRefresh = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_album_view);</div><div class="line">        mContext = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        mAlbumPresenter = <span class="keyword">new</span> AlbumPresenter(<span class="keyword">this</span>, Album.class);</div><div class="line"></div><div class="line">        mContainer = (RelativeLayout) findViewById(R.id.id_success_content);</div><div class="line">        mTip = (TextView) findViewById(R.id.id_tip);</div><div class="line">        mProgressBar = (ProgressBar) findViewById(R.id.id_progress_bar);</div><div class="line"></div><div class="line"></div><div class="line">        mRecyclerView = (PullLoadRecyclerView) findViewById(R.id.id_recycler_view);</div><div class="line">        mRecyclerView.setLinearLayout();</div><div class="line">        mAdapter = <span class="keyword">new</span> VideoInfoAdapter(mContext);</div><div class="line">        mAlbumPresenter.requestServer(mParam);</div><div class="line"></div><div class="line">        mRecyclerView.setAdapter(mAdapter);</div><div class="line">        mRecyclerView.setOnPullLoadMoreListener(<span class="keyword">new</span> PullLoadRecyclerView.OnPullLoadMoreListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">                mIsFromRefresh = <span class="keyword">true</span>;</div><div class="line">                mParam.setPageIndex(<span class="number">1</span>);</div><div class="line">                mAlbumPresenter.refresh(mParam); <span class="comment">//通知Presenter层刷新数据</span></div><div class="line">                mRecyclerView.setRefreshCompleted();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadMore</span><span class="params">()</span> </span>&#123;</div><div class="line">                mAlbumPresenter.loadingNext();</div><div class="line">                mRecyclerView.setLoadMoreCompleted(); <span class="comment">//通知Presenter层加载下一页数据</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAlbumMainInfo</span><span class="params">(List&lt;VideoInfo&gt; albumList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mIsFromRefresh) &#123;</div><div class="line">            mAdapter.cleanData();</div><div class="line">            mIsFromRefresh = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (albumList != <span class="keyword">null</span> &amp;&amp; albumList.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (VideoInfo videoInfo : albumList) &#123;</div><div class="line">                mAdapter.addData(videoInfo);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mAdapter.notifyDataSetChanged();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isShow)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (isShow) &#123;</div><div class="line">                    mProgressBar.setVisibility(View.VISIBLE);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mProgressBar.setVisibility(View.GONE);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showOkHttpError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc, <span class="keyword">final</span> String errorUrl)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mTip.setText(<span class="string">"http err:"</span> + <span class="string">"errCode:"</span> + errorCode + <span class="string">",errDesc:"</span> + errorDesc + <span class="string">",errUrl:"</span> + errorUrl);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showServerError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mTip.setText(<span class="string">"server err:"</span> + <span class="string">"errCode:"</span> + errorCode + <span class="string">",errDesc:"</span> + errorDesc);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSuccess</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isSuccess)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (isSuccess) &#123;</div><div class="line">                    mContainer.setBackgroundResource(android.R.color.white);</div><div class="line">                    mTip.setText(<span class="string">"Sohu Serials album"</span>);</div><div class="line"></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mContainer.setBackgroundResource(R.color.colorAccent);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在上面代码中可以看到:</p><ul><li>在 <code>PullLoadRecycler.OnPullLoadMoreListenre</code> 的 <code>onRefresh()</code> 回调方法中，核心代码就是这一行 <code>mAlbumPresenter.refresh(mParam);</code> ，通知 <code>Presenter</code> 层去刷新数据， 至于 <code>Presenter</code> 层如何刷新。。 关我 <code>View</code> 层 X 事~</li><li>在 <code>PullLoadRecycler.OnPullLoadMoreListenre</code> 的 <code>onLoadMore()</code> 回调方法中,也是直接调用 <code>mAlbumPresenter.loadingNext()</code>。</li></ul><p>下面说说 <code>Presenter</code> 层的代码</p><h3 id="Presenter-层的具体实现"><a href="#Presenter-层的具体实现" class="headerlink" title="Presenter 层的具体实现"></a>Presenter 层的具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> * Function:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlbumPresenter</span> <span class="keyword">extends</span> <span class="title">BasePaginationPresenter</span>&lt;<span class="title">BasePaginationParam</span>, <span class="title">Album</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> ISohuSerials mBaseListView;</div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTotalCount;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AlbumPresenter</span><span class="params">(ISohuSerials baseListView, Class&lt;Album&gt; CLazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(baseListView, CLazz);</div><div class="line">        <span class="keyword">this</span>.mBaseListView = baseListView;</div><div class="line">        getModel().setRequestMethod(Constants.HTTP_GET_METHOD);</div><div class="line">        getModel().setRequestUrl(Constants.SOHU_SERIALS_URL);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serverResponse</span><span class="params">(Album album)</span> </span>&#123;</div><div class="line"></div><div class="line">        mBaseListView.showAlbumMainInfo(album.getData().getVideos());</div><div class="line"></div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mBaseListView.showProgress(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        mTotalCount = album.getData().getCount();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">serverHaveMoreData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//此处pageIndex是从1开始的， 实际使用需要注意pageIndex的起始值</span></div><div class="line">        <span class="keyword">int</span> pageSize = mParam.getPageSize();</div><div class="line">        <span class="keyword">int</span> pageIndex = mParam.getPageIndex();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (pageIndex * pageSize) &lt;= mTotalCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>首先是要继承之前编写的 <code>BasePaginationPresenter</code>类，泛型参数 <code>BasePaginationParam</code> 可以根据实际需求进行拓展，基本使用在前面已经介绍过，此处不做赘述。</li><li><code>Album</code> 是搜狐视频电视剧频道返回数据的实体类，上面提到的 <code>VideoInfo</code> 包含在 <code>Album</code> 里面，因为现在只需要展示 <code>VideoInfo</code> 里的信息， 所以在 <code>serverRespomse</code> 方法里，有一个转换 <code>mBaseListView.showAlbumMainInfo(album.getData().getVideos());</code></li><li>实现父类 <code>BasePaginationPresenter</code> 中的抽象方法 <code>serverHaveMoreData()</code> ,思路就是 当前页面数 * 每一页的数据量，然后和 数据总量 比较大小。</li></ul><h3 id="Model-层的具体实现"><a href="#Model-层的具体实现" class="headerlink" title="Model 层的具体实现"></a>Model 层的具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 2  * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> 3  */</span></div><div class="line"> <span class="number">4</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SohuAlbumModel</span>&lt;<span class="title">Param</span> <span class="keyword">extends</span> <span class="title">BasePaginationParam</span>&gt; <span class="keyword">implements</span> <span class="title">IBaseModel</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line"> <span class="number">5</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SohuAlbumModel"</span>;</div><div class="line"> <span class="number">6</span>     <span class="keyword">private</span> String url;</div><div class="line"> <span class="number">7</span>     <span class="keyword">private</span> <span class="keyword">int</span> method;</div><div class="line"> <span class="number">8</span>     <span class="keyword">private</span> IBasePaginationPresenter mPaginationPresenter;</div><div class="line"> <span class="number">9</span> </div><div class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="title">SohuAlbumModel</span><span class="params">(IBasePaginationPresenter paginationPresenter)</span> </span>&#123;</div><div class="line"><span class="number">11</span>         mPaginationPresenter = paginationPresenter;</div><div class="line"><span class="number">12</span>     &#125;</div><div class="line"><span class="number">13</span> </div><div class="line"><span class="number">14</span>     <span class="meta">@Override</span></div><div class="line"><span class="number">15</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRequestToServer</span><span class="params">(Param param)</span> </span>&#123;</div><div class="line"><span class="number">16</span>         String validUrl = <span class="keyword">null</span>;</div><div class="line"><span class="number">17</span>         <span class="keyword">if</span> (param != <span class="keyword">null</span> &amp;&amp; !TextUtils.isEmpty(url)&amp;&amp;mPaginationPresenter.hasMoreData()) &#123;</div><div class="line"><span class="number">18</span>             validUrl = getValidUrl(url, param);</div><div class="line"><span class="number">19</span>             Log.d(TAG, <span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"ValidUrl:"</span> + validUrl);</div><div class="line"><span class="number">20</span>         &#125;</div><div class="line"><span class="number">21</span> Log.d(TAG,<span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"check param,url and server have data or not!"</span>)</div><div class="line"><span class="number">22</span>         <span class="keyword">if</span> (!TextUtils.isEmpty(validUrl)) &#123;</div><div class="line"><span class="number">23</span>             HttpUtils.executeByGet(validUrl, <span class="keyword">new</span> Callback() &#123;</div><div class="line"><span class="number">24</span>                 <span class="meta">@Override</span></div><div class="line"><span class="number">25</span>                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"><span class="number">26</span>                     Log.d(TAG, <span class="string">"&gt;&gt; onFailure &gt;&gt; "</span>);</div><div class="line"><span class="number">27</span>                     e.printStackTrace();</div><div class="line"><span class="number">28</span>                     mPaginationPresenter.okHttpError(Constants.URL_ERROR, e.getMessage(), url);</div><div class="line"><span class="number">29</span>                 &#125;</div><div class="line"><span class="number">30</span> </div><div class="line"><span class="number">31</span>                 <span class="meta">@Override</span></div><div class="line"><span class="number">32</span>                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"><span class="number">33</span>                     <span class="keyword">if</span> (!response.isSuccessful()) &#123;</div><div class="line"><span class="number">34</span>                         Log.d(TAG, <span class="string">"&gt;&gt; onResponse &gt;&gt; "</span> + <span class="string">"Not successful"</span>);</div><div class="line"><span class="number">35</span>                         mPaginationPresenter.okHttpError(Constants.SERVER_ERROR, response.message(), url);</div><div class="line"><span class="number">36</span>                     &#125;</div><div class="line"><span class="number">37</span> </div><div class="line"><span class="number">38</span>                     String responseJson = response.body().string();</div><div class="line"><span class="number">39</span>                     Log.d(TAG, <span class="string">"&gt;&gt; onResponse &gt;&gt; "</span> + <span class="string">"responseJson:"</span> + responseJson);</div><div class="line"><span class="number">40</span>                     mPaginationPresenter.accessSuccess(responseJson);</div><div class="line"><span class="number">41</span> </div><div class="line"><span class="number">42</span>                 &#125;</div><div class="line"><span class="number">43</span>             &#125;);</div><div class="line"><span class="number">44</span>         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">45</span>             Log.d(TAG, <span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"Valid Url is empty"</span>);</div><div class="line"><span class="number">46</span>         &#125;</div><div class="line"><span class="number">47</span>     &#125;</div><div class="line"><span class="number">48</span> </div><div class="line"><span class="number">49</span>     <span class="function"><span class="keyword">private</span> String <span class="title">getValidUrl</span><span class="params">(String url, Param param)</span> </span>&#123;</div><div class="line"><span class="number">50</span>         <span class="keyword">return</span> String.format(url, param.getPageIndex(), param.getPageSize());</div><div class="line"><span class="number">51</span>     &#125;</div><div class="line"><span class="number">52</span> </div><div class="line"><span class="number">53</span> </div><div class="line"><span class="number">54</span>     <span class="meta">@Override</span></div><div class="line"><span class="number">55</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"><span class="number">56</span>         <span class="keyword">this</span>.url = url;</div><div class="line"><span class="number">57</span>     &#125;</div><div class="line"><span class="number">58</span> </div><div class="line"><span class="number">59</span>     <span class="meta">@Override</span></div><div class="line"><span class="number">60</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestMethod</span><span class="params">(<span class="keyword">int</span> method)</span> </span>&#123;</div><div class="line"><span class="number">61</span>         <span class="keyword">this</span>.method = method;</div><div class="line"><span class="number">62</span>     &#125;</div><div class="line"><span class="number">63</span> </div><div class="line"><span class="number">64</span>     <span class="meta">@Override</span></div><div class="line"><span class="number">65</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelRequest</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">66</span>         HttpUtils.cancelCall();</div><div class="line"><span class="number">67</span>     &#125;</div><div class="line"><span class="number">68</span> &#125;</div></pre></td></tr></table></figure><p><code>Model</code> 层的实现还是跟之前的一样，直接实现 <code>IBaseModel</code> 接口即可。</p><ul><li>在 <code>17</code> 行可以看到，<code>mPaginationPresenter.hasMoreData()</code> ，这个就是对服务器点是否还有数据可以返回的判断，如果这里返回 <code>false</code> 那么就不回去进行网络请求,然后在 <code>22</code> 行打印个 <code>Log</code> 提醒。</li><li>在看看 <code>49</code> 行的 <code>getVaildUrl</code> 方法，这个方法主要就是把传进来的 <code>param</code> 参数拼接进 <code>url</code> 中，形成有效的，可以请求到数据的 <code>Url</code>。</li></ul><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://i.imgur.com/QIPIc3y.gif" alt=""></p><p><code>Item</code> 就展示了一下电视剧的 主演、名字、导演、集数、更新时间的信息。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过上面的封装和例子，起码证明了这一套封装能够跑的通了，以后如果还有关于分页请求的需求，可以直接继承上面的基类来实现，无非就是修改<code>param</code> 和 <code>Data</code> 两个泛型的参数。</p><ul><li>前者是请求 <code>url</code> 的参数，根据具体的业务需求，封装 <code>BasePaginationParam</code> 的子类即可。</li><li>后者是服务器端返回数据的实体类，也是根据数据的结构来封装的，在 <code>Android Studio</code> 中有 <code>Gson Formatter</code> 这个插件，封装 <code>JavaBean</code> 插件也轻松很多，在结合上面提到的 <code>Gson</code> 注解，全套了。</li></ul><blockquote><p>下一篇准备封装一下 <code>OkHttp</code> ,然后将封装之后的 <code>OkHttp</code> 整合到当前框架中,当然了,还是以分页接在为例</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/HCStIDG.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;摘要：在&lt;a href=&quot;http://zengfanyu.top/2017/10/22/MVP2/&quot;&gt;上一篇&lt;/a&gt;中对MVP模式进行了封装，然后通过封装之后的类，实现了一个网络请求，但是请求到网络数据之后，就直接展示到了 &lt;code&gt;View&lt;/code&gt; 层，并没有其他的操作，然而我们在开发过程中， 经常会用到分页加载，一般在滑动控件向上滚动，加载更多事件触发是调用，并且这个过程设计到两个参数，一个是 &lt;code&gt;PageIndex&lt;/code&gt; ：页码；一个是 &lt;code&gt;PageSize&lt;/code&gt; 一页数据的大小， 分页加载就是通过在某一具体事件触发时，调用修改这两个或者一个参数，重新请求网络，从而拿到下一页的数据，这边文章还是基于MVP模式，对分页数据的请求进行封装。&lt;br&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Android 当中的 MVP 模式（二）封装</title>
    <link href="http://zengfanyu.top/2017/10/22/MVP2/"/>
    <id>http://zengfanyu.top/2017/10/22/MVP2/</id>
    <published>2017-10-22T14:00:15.000Z</published>
    <updated>2017-10-28T10:38:12.190Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/SOu2Z0j.png" alt=""></p><p><em>摘要：在<a href="http://zengfanyu.top/2017/10/20/MVP1/">Android当中的MVP模式（一）基本概念</a>中，用了一个简单的的登录Demo展示了一下 <code>MVP</code> 模式的基本姿势，虽然项目结构是更加清晰了，但是代码量明显增多了，原来的网络请求操作只用 <code>1</code> 个类可以搞定，现在需要 <code>4</code> 个类，并且每当有不同作用的 <code>model</code> 出现时，我们就需要相应的为他们添加 <code>presenter</code> 层的对象，但是细细查看，这些<code>model</code> 的作用都大体相似，与获取数据相关，类似于网络请求或者是数据库 <code>DAO</code> 的操作，所以此处可以考虑将他们的共性抽取出来，封装成基累，然后子类去继承即可。</em><br><a id="more"></a></p><h2 id="一个简单的网络请求"><a href="#一个简单的网络请求" class="headerlink" title="一个简单的网络请求"></a>一个简单的网络请求</h2><blockquote><p>一个简单的需求：通过 <code>url</code> 获取数据，然后用 <code>Gson</code> 解析成 <code>JavaBean</code>，然后展示到 ListView上。这里使用知乎日报的获取最新消息的 <code>API</code> 接口 <em><a href="https://news-at.zhihu.com/api/4/news/latest" target="_blank" rel="external">https://news-at.zhihu.com/api/4/news/latest</a></em></p></blockquote><p>那么按照普通 <code>MVP</code> 的思路，首先 <code>view</code> 层：</p><pre><code>为了突出重点，当前View层只做一件事情：就是展示获取的数据</code></pre><p><strong><code>ILatestVIew</code></strong></p><p><img src="https://i.imgur.com/gwQBe48.png" alt=""><br>此接口需要一个 <code>String</code> 类型的列表数据，主要是用于给 <code>Adapter</code> 展示用。</p><p><strong><code>LatestViewActivity</code></strong></p><p><img src="https://i.imgur.com/IhXLDsA.png" alt=""></p><p>很简答，就是实现接口。</p><p><strong><code>IRequestLatestModel</code></strong></p><p><img src="https://i.imgur.com/V82ypL1.png" alt=""></p><p>请求服务器端数据的接口</p><p><strong><code>RequestLatestNewsModel</code></strong></p><p><img src="https://i.imgur.com/UUFYYmc.png" alt=""></p><p>使用 <code>okhttp</code> 请求数据，然后将返回的json类型数据传递给 <code>Presenter</code> 层。</p><p><strong><code>ILatestNewsPresenter</code></strong></p><p><img src="https://i.imgur.com/P7FkWJv.png" alt=""></p><p>一个接口用于处理 <code>Json</code> 数据，一个接口用于通知 <code>model</code> 层向服务器发起请求 。</p><p><strong><code>LatestNewsPresenter</code></strong></p><p><img src="https://i.imgur.com/RAUwO46.png" alt=""></p><p>实现接口定义的方法</p><p>其中 <code>HttpUtils</code> 方法如下： </p><p><img src="https://i.imgur.com/OPbiJCZ.png" alt=""></p><blockquote><p>此处 <code>OKhttp</code> 也可以进行封装， 后面再写一篇文章， 专门记录，先暂时简单的使用。</p></blockquote><p>运行之后，点击 <code>button</code>， 即可发起网络请求，运行效果如下：</p><p><img src="https://i.imgur.com/SyvLPrY.png" alt=""></p><p><strong>弊端：</strong></p><p>假设我们现在又有另外的一个需求， 请求知乎日报过往的消息， 对应的 <code>API</code> 接口为<em><code>URL: https://news-at.zhihu.com/api/4/news/before/20131119</code></em>,那么我就需要按照上述的方式，又写一套MVP的代码，最少又得留个类，如此一来，随着需求的增多，代码量会极具增大，但是<strong>多余增加的每层代码所做的事情又大多数相同，只是具体细节不一样</strong>，那么我们可不可以<strong>把每一层要做的事情给抽取出来，封装成基类，然后让子类去继承，去实现</strong>，这样就可以大量减少代码量？ 抱着这个问题，我就来分析一下 <code>MVP</code> 每一层所做的事情。</p><h2 id="以简单网络请求为例，分析-MVP-各层的职责"><a href="#以简单网络请求为例，分析-MVP-各层的职责" class="headerlink" title="以简单网络请求为例，分析 MVP 各层的职责"></a>以简单网络请求为例，分析 MVP 各层的职责</h2><p>以上面请求知乎日报的最新消息为例，分析每一层的职责。</p><h3 id="Model-层"><a href="#Model-层" class="headerlink" title="Model 层"></a><code>Model</code> 层</h3><p><code>Model</code> 角色主要是提供数据的存取功，并且将数据或者是错误信息回调给 <code>Presenter</code> 层。更直白的说，<code>Model</code> 就是封装了数据库 <code>DAO</code> 或者网络获取数据的角色，或者两种数据获取方式的集合。所以它主要的功能是：</p><pre><code>1. 向数据源发起请求2. 取消发起的请求3. 通知 Presenter 处理结果</code></pre><h3 id="Presenter-层"><a href="#Presenter-层" class="headerlink" title="Presenter 层"></a><code>Presenter</code> 层</h3><p>一般是通知 <code>Model</code> 向服务器发起请求，然后接收 <code>Model</code> 层的请求结果，包括成功的数据和错误的信息，同时也负责将处理之后的数据或者是错误信息通知 <code>View</code> 层，由 <code>View</code> 层作展示。所以他的主要功能是：</p><pre><code>1. 通知 Model 层向服务器发起数据请求2. 通知 Model 层取消这次请求3. 接收 Model 层返回的数据4. 接收 Model 层返回的错误信息5. 通知 View 层接收处理之后的结果或者是错误信息</code></pre><h3 id="View-层"><a href="#View-层" class="headerlink" title="View 层"></a><code>View</code> 层</h3><p>此处 View 层的作用就比较专一化，只用于处理 <code>UI</code> 相关的事情，不再负责业务逻辑。主要职责如下：</p><pre><code>1. Loading 状态的展示隐藏2. 接收 Presenter 层处理后的数据3. 接收 Presenter 层处理后的错误信息4. 接收 Presenter 层处理后的服务器拒绝信息</code></pre><blockquote><p>嗯，差不多就是这么多吧</p></blockquote><p>既然将每一层的主要职责总结了出来， 很明显就可以将这些职责「在代码中就是对应的方法」抽象成方法，然后让子类去个性化的实现。</p><h2 id="抽取共性封装网络请求"><a href="#抽取共性封装网络请求" class="headerlink" title="抽取共性封装网络请求"></a>抽取共性封装网络请求</h2><h3 id="Model-层-1"><a href="#Model-层-1" class="headerlink" title="Model 层"></a><code>Model</code> 层</h3><p><strong><code>IBaseModel</code></strong></p><p><img src="https://i.imgur.com/5mI8sPq.png" alt=""></p><p>其中 <code>setMethod</code> 和 <code>setRequestUrl</code> 方法直接在 <code>Presenter</code> 的构造方法中调用，设置好请求的方式和请求的 <code>Url</code> 地址，这样方便 <code>model</code> 层在请求服务器数据时，使用对应的参数，使用对应的请求方式。</p><blockquote><p>此处没有用到 <code>method</code> 是因为知乎日报的最新新闻 API 接口是 Get 方式，不需要参数，所以此处没有根据请求方式来调用不同的请求方法</p></blockquote><h3 id="Presenter-层-1"><a href="#Presenter-层-1" class="headerlink" title="Presenter 层"></a><code>Presenter</code> 层</h3><p><strong><code>IBasePresenter</code></strong></p><p><code>Presenter</code> 层是逻辑控制层，是 <code>Model</code> 层和 <code>View</code> 层的桥梁，对这一层抽取共性进行封装的时候，不能像 <code>Model</code> 层一样，把全部的功能装好好，原因如下：</p><pre><code>1.如果将其全部封装起来，是没办法复用同一个功能模块的，并且会导致部分业务逻辑需要在 view 层中做处理，这样和 MVP 的思想相悖。2.Presenter 层需要处理和 View 层的交互逻辑以及 Model 层返回的数据。</code></pre><p>但是 <code>Model</code> 层是可以的，我是认为，<code>Model</code> 层就是从数据源中拿数据，并且将数据传递给 <code>Presenter</code> 层，所有的 <code>Model</code> 层做的都是这个操作，只是访问数据源的参数不同，数据源类型不同，访问数据源的方法不同而已，所以很明显可以全部抽取出来放基类中，然后各个子类去各自实现。</p><p><img src="https://i.imgur.com/h60avAn.png" alt=""></p><pre><code>1. requestServer 在View层调用的接口，用于通知Model层想服务器发起请求，参数可为空，比如，有些Get方式的请求就不需要参数2. requestSuccess 在Model层调用，通过此方法将服务器返回的数据传递给给Presenter层处理3. cancelRequest 在View层调用，用于通知Model层取消请求4. okHttpError 在Model层调用，当网络请求产生错误的时候5. getModel 在子类中调用，用于拿到Model对象6. getParams 在Model层中调用，此方法用于获取Presenter层处理好的参数</code></pre><p><strong><code>BasePresenter</code></strong></p><p><img src="https://i.imgur.com/NWad6Kf.png" alt=""></p><ul><li><code>public abstract class BasePresenter&lt;Params, Data&gt; implements IBasePresenter&lt;Params&gt;</code>这是一个泛型的抽象类，其中泛型<code>Params</code>是用于<code>model</code>层向服务器发起请求的请求参数，<code>Data</code>是服务器返回的<code>Json</code>类对应的<code>JavaBean</code>类。<p></p></li><li><code>BasePresenter</code>处理了<code>View</code>层和<code>model</code>层中大多数的逻辑，我们要做的就是在子类中实现<code>public abstract void serverResponse(Data data);</code>这个抽象方法就好了。<p></p></li><li><code>public abstract void serverResponse(Data data);</code>这个方法是在用于处理<code>model</code>层返回的结果，然后进行处理之后回调给<code>view</code>层。<p></p></li><li>可以看到<code>46、47、50、51、52</code>行的代码给注释掉了，其实一般情况下这里是不需要注释的，这里是用于判断返回数据的<code>errorNum errorType errorDesc</code>信息的，这么操作，是为了实现如下功能：<font color="#ff0000">若返回的信息有误，则BasePresenter直接回调给<code>View</code>层，如果正确，才会传递给子类</font>。<blockquote><p>上述最后一条，需要对泛型<code>Data</code>在进行一次封装，并且使用上 <code>Gson</code> 的<code>@SerializedName(value = &quot;...&quot;,alternate = {&quot;...&quot;,&quot;...&quot;,&quot;...&quot;})</code>这个注解，并且这里涉及到<font color="#ff0000"><strong>泛型擦除</strong></font>的问题，这一块我还没有很好的解决办法，所以此处没有进行封装。</p></blockquote></li></ul><h3 id="View-层-1"><a href="#View-层-1" class="headerlink" title="View 层"></a><code>View</code> 层</h3><p>还是按照上面分析的 <code>View</code> 层职责来写：</p><p><strong><code>IBaseView</code></strong></p><p><img src="https://i.imgur.com/XnjmUqu.png" alt=""></p><p>到此为止，对 <code>MVP</code> 模式的每一层都写出了对应的基类，有了这件基类作为基础之后，在进行同样的网络请求。</p><h3 id="使用上述封装好的类进行相同的网络请求"><a href="#使用上述封装好的类进行相同的网络请求" class="headerlink" title="使用上述封装好的类进行相同的网络请求"></a>使用上述封装好的类进行相同的网络请求</h3><p><strong><code>LatestNewsModel</code></strong></p><p><img src="https://i.imgur.com/owRmdqS.png" alt=""></p><p><strong><code>LatestNewsPresenter</code></strong></p><p><img src="https://i.imgur.com/BUsyAtq.png" alt=""></p><p>其中<code>Param</code>泛型参数填的是<code>nullable</code>是因为这个请求是<code>get</code>方式，没有涉及到参数。<code>LatestNews</code>作为<code>Data</code>的泛型，主要是用于<code>BasePresenter</code>解析并映射。</p><p><strong><code>ILatestNewsView</code></strong></p><p><img src="https://i.imgur.com/gY7PhQH.png" alt=""></p><p> <code>IlatestNewsVIew</code>接口是继承<code>IBaseView</code>接口的，是因为它需要在<code>IBaseView</code>接口所定义的功能之上，还需要实现将数据展示到列表中这么一个操作，所以添加上了一个<code>showLatestViewTitle</code>方法。</p><p><strong><code>LatestNewsTitleActivity</code></strong></p><p><img src="https://i.imgur.com/2M2FxAO.png" alt=""></p><p>这个类写起来就简单了，跟着接口来， 把之前每一个接口提到的功能给实现以下就可以了。</p><p>顺便贴个 <code>XML</code> 文件：</p><p><img src="https://i.imgur.com/NFcSwWg.png" alt=""></p><p>搞定，实现的效果和上面是一样的。</p><blockquote><p>回过头一看，MMP，这代码量似乎也没有少很多啊，-。- ，没事没事，需求多了就少了~</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>先看看<a href="http://zengfanyu.top/2017/10/20/MVP1/">上一篇</a>中提到的一张图<br><img src="https://i.imgur.com/YiW40TM.png" alt=""><br>此处将MVP模式封装后，MVP的流程图如下：<br><img src="https://i.imgur.com/sNnJ74J.png" alt=""></p><p>后面的文章将使用上面封装的框架，通过扩展 <code>BasePresenter</code> 来增加新的模块。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/SOu2Z0j.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要：在&lt;a href=&quot;http://zengfanyu.top/2017/10/20/MVP1/&quot;&gt;Android当中的MVP模式（一）基本概念&lt;/a&gt;中，用了一个简单的的登录Demo展示了一下 &lt;code&gt;MVP&lt;/code&gt; 模式的基本姿势，虽然项目结构是更加清晰了，但是代码量明显增多了，原来的网络请求操作只用 &lt;code&gt;1&lt;/code&gt; 个类可以搞定，现在需要 &lt;code&gt;4&lt;/code&gt; 个类，并且每当有不同作用的 &lt;code&gt;model&lt;/code&gt; 出现时，我们就需要相应的为他们添加 &lt;code&gt;presenter&lt;/code&gt; 层的对象，但是细细查看，这些&lt;code&gt;model&lt;/code&gt; 的作用都大体相似，与获取数据相关，类似于网络请求或者是数据库 &lt;code&gt;DAO&lt;/code&gt; 的操作，所以此处可以考虑将他们的共性抽取出来，封装成基累，然后子类去继承即可。&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（一）基本概念</title>
    <link href="http://zengfanyu.top/2017/10/20/MVP1/"/>
    <id>http://zengfanyu.top/2017/10/20/MVP1/</id>
    <published>2017-10-20T12:37:15.000Z</published>
    <updated>2017-10-28T10:45:23.740Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/CgiufDM.png" alt=""></p><p><em>摘要：<code>Github</code>上看到很多项目，都是 <code>MVP+RxJava+Retrofit+Dragger2</code> 这种架构，再加上一个 <code>OkHttp</code>， 虽说这几个东西，我都或多或少听过，用过，但是从来没有认真的研究过，没有把他们整合起来开发一个应用。从 <code>MVP</code> 开始，认真学习这几个框架，然后整合起来，做一个应用。先立一个 <code>FLAG</code>！</em></p><a id="more"></a><h2 id="为什么要使用MVP"><a href="#为什么要使用MVP" class="headerlink" title="为什么要使用MVP"></a>为什么要使用MVP</h2><p>在传统的Android开发中，我们一般是使用MVC模式进行开发的。</p><p></p><h3 id="传统MVC模式介绍："><a href="#传统MVC模式介绍：" class="headerlink" title="传统MVC模式介绍："></a>传统MVC模式介绍：</h3><ol><li>View: 视图层，对应xml文件</li><li>Controller: 控制层，对应Activity和Fragment层，进行数据处理</li><li>Model：实体层，负责获取实体数据</li></ol><p>采用MVC模式的一个最大的弊端就是xml作为View层视图能力实在太弱，所以一般情况下我们都是通过Controller层来辅助处理一些视图的。这样的结果就导致Controller既作为控制层的同时又承担了View层的大部分功能，采用MVC模式往往会导致Activity和Fragment中的代码非常复杂。我们将Android中采用的MVC模式称为MV模式更加恰当。</p><h3 id="MVP模式介绍："><a href="#MVP模式介绍：" class="headerlink" title="MVP模式介绍："></a>MVP模式介绍：</h3><ol><li>View: 视图层，对应xml文件与Activity/Fragment</li><li>Presenter: 逻辑控制层，同时持有View和Model对象</li><li>Model: 实体层，负责获取实体数据<p></p></li></ol><p>MVP模式的流程图如下：<br><img src="https://i.imgur.com/YiW40TM.png" alt=""></p><h3 id="采用MVP模式的优势是："><a href="#采用MVP模式的优势是：" class="headerlink" title="采用MVP模式的优势是："></a>采用MVP模式的优势是：</h3><ol><li>把业务逻辑抽离到Presenter层中，View层专注于UI的处理。</li><li>分离视图逻辑与业务逻辑，达到解耦的目的。</li><li>提高代码的阅读性。</li><li>Presenter被抽象成接口，可以根据Presenter的实现方式进行单元测试。<br>可拓展性强。<p></p></li></ol><h3 id="采用MVP模式的缺点："><a href="#采用MVP模式的缺点：" class="headerlink" title="采用MVP模式的缺点："></a>采用MVP模式的缺点：</h3><ol><li>项目结构会对后期的开发和维护有一定的影响。具体视APP的体量而定。</li><li>代码量会增多，如何避免编写过多功能相似的重复代码是使用MVP开发的一个重点要处理的问题。</li><li>有一定的学习成本。<br>综上所述，在Android上采用MVP模式的优势是：大大优化代码的维护性与拓展性的同时对代码进行深度解耦，使各个层级的分工更加明晰。<p></p></li></ol><h2 id="一个简单的应用"><a href="#一个简单的应用" class="headerlink" title="一个简单的应用"></a>一个简单的应用</h2><p>模拟Android中登陆的功能</p><p></p><h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><p><img src="https://i.imgur.com/TbM6JQs.png" alt=""></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://i.imgur.com/UgftH96.png" alt=""></p><p></p><p>从上图中可以看到，一个简单的基于 MVP 的项目，最少也需要创建 6 个文件夹，分别是 M、V、P 的接口和它们各自的实现类，其中 LoginActivity 就是 View 层的具体实现，它只需要负责处理 UI 的逻辑，而业务相关的逻辑都抽象到 LoginPresenter 中，这样就避免了传统开发中 Activity 、Fragment 既处理 UI 又负责业务逻辑的情况。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>ILoginView：</strong></p><p><img src="https://i.imgur.com/oZw0oAl.png" alt=""><br>    view层只负责和 UI 相关的操作，那么在这个小 Demo 中，和 UI 相关的操作有如下几点：</p><pre><code>1. 从EditText中拿到用户输入的userName2. 从EditText中拿到用户输入的password3. 在登录过程中需要展示一个progressbar，登录过程结束之后隐藏这个progressbar4. 展示登录成功后的view5. 展示登录失败后的view</code></pre><p>综上五个操作，所以有了ILoginView中的五个接口</p><p><strong>LoginActivity：</strong></p><p><img src="https://i.imgur.com/BldAn6r.png" alt=""></p><p>当点击登录按钮时，会将请求服务器合适账号密码这个过程交给presenter层去处理，所以在LoginActivity里，会有preserent的引用。</p><p><strong>ILoginPersenter：</strong></p><p><img src="https://i.imgur.com/qaDLXA2.png" alt=""><br>    presenter层处理业务逻辑，有如下几点:</p><pre><code>1. 负责接收model的返回结果并且处理2. 将处理的结果以特定的形式，传递给view层，让view层去展示3. 通知model层去向数据源请求数据</code></pre><p><strong>LoginPresenter：</strong></p><p><img src="https://i.imgur.com/aeBpO2l.png" alt=""></p><p>因为presenter层相当于一个中间交互人，所以它必须要持有对 view 、model 层对象的引用。</p><p><strong>ILoginModel：</strong></p><p><img src="https://i.imgur.com/ov0me7r.png" alt=""><br>    model负责数据的存取：</p><pre><code>在这个Demo中，数据的存取使用一个线程和简单的字符串判断来模拟。</code></pre><p><strong>LoginModel：</strong></p><p><img src="https://i.imgur.com/bJXqwgD.png" alt=""></p><p>因为model层需要将获取的数据传递给presenter层去做处理，所以此处也需要持有对presenter层的引用。</p><p>这样一来就成功的将简单的登录案例，由MVP模式来实现了,</p><ul><li>在 LoginActivity 中处理的都是和 UI 相关的，</li><li>在 LoginPresenter 中处理的是业务的逻辑，</li><li>在 LoginModel 中处理的是网络数据获取。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p> <strong>Presenter—交互中间人</strong></p><p> <font color="#ff0000">主要作为沟通 View 和 Model 的桥梁</font>，它从 Model 层检索数据后，返回给 View 层，使得 View 和 Model 之间没有耦合，也将业务从 View 角色上抽离出来。</p><p> <strong>View—用户界面</strong></p><p>View 通常是指Activity、Fragment或者某个 View 控件，<font color="#ff0000">它含有一个 Presenter</font> 成员变量。通常 View 需要实现一个逻辑接口，<font color="#ff0000">将 View 上的操作转换给 Presenter 进行实现，最后，Presenter 调用 View 逻辑接口将结果返回给 View 元素</font>。</p><p><strong>Model—数据的存取</strong></p><p>对于一个结构化的 APP 来说，Model角色主要是提供数据的存取功能。Presenter 需要通过 Model 层存储、获取数据，Model就想一个数据仓库。<font color="#ff0000">更直白的说，Model 就是封装了数据库 DAO 或者网络获取数据的角色，或者两种数据获取方式的集合</font>。</p><blockquote><p>MVP 并不是一个标准化的模式，它有很多种实现方式，也可以根据自己的需求去修正MVP的实现方式，可以随着 Presenter 的复杂程度而变化，只要保证是通过 Presenter 将 View 和 Model 解耦，降低类型复杂度，各个模块单元可以独立测试、独立变化，这就是正确的方向。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/CgiufDM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要：&lt;code&gt;Github&lt;/code&gt;上看到很多项目，都是 &lt;code&gt;MVP+RxJava+Retrofit+Dragger2&lt;/code&gt; 这种架构，再加上一个 &lt;code&gt;OkHttp&lt;/code&gt;， 虽说这几个东西，我都或多或少听过，用过，但是从来没有认真的研究过，没有把他们整合起来开发一个应用。从 &lt;code&gt;MVP&lt;/code&gt; 开始，认真学习这几个框架，然后整合起来，做一个应用。先立一个 &lt;code&gt;FLAG&lt;/code&gt;！&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zengfanyu.top/2017/10/14/hello-world/"/>
    <id>http://zengfanyu.top/2017/10/14/hello-world/</id>
    <published>2017-10-14T15:40:28.953Z</published>
    <updated>2017-10-21T16:06:55.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="To-be-a-better-man"><a href="#To-be-a-better-man" class="headerlink" title="To be a better man"></a>To be a better man</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello , 个人博客搭好了，老规矩，先来个 Hello World！，然后，撸起袖子就是干！</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;To-be-a-better-man&quot;&gt;&lt;a href=&quot;#To-be-a-better-man&quot; class=&quot;headerlink&quot; title=&quot;To be a better man&quot;&gt;&lt;/a&gt;To be a better man&lt;/h2&gt;&lt;figure c
      
    
    </summary>
    
    
  </entry>
  
</feed>
