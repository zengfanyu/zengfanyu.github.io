<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>THIS IS BIGZ</title>
  
  <subtitle>Every little makes a mickel</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zengfanyu.top/"/>
  <updated>2017-10-28T07:29:25.342Z</updated>
  <id>http://zengfanyu.top/</id>
  
  <author>
    <name>BigZ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android当中的MVP模式（四）插曲-封装OkHttp</title>
    <link href="http://zengfanyu.top/2017/10/28/MVP4/"/>
    <id>http://zengfanyu.top/2017/10/28/MVP4/</id>
    <published>2017-10-28T06:45:34.202Z</published>
    <updated>2017-10-28T07:29:25.342Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>摘要</em>：<em>前两篇中使用的网络请求工具是 <code>OkHttp</code> ，并没有经过封装，都是简单的使用 <code>get</code> 请求，并且将错误全部都抛到上层去解决了， 这无形之中增加了上层的编码复杂度，即使要抛向上层，起码也要给一个 <code>errorCode</code> 或者是 <code>errorMsg</code> 吧，所以这边文章就针对 <code>OkHttp</code> 进行封装，然后将封装之后的工具使用到上一小结的 <code>Demo</code> 之中。</em></p></blockquote><h2 id="官方给的例子"><a href="#官方给的例子" class="headerlink" title="官方给的例子"></a>官方给的例子</h2><ul><li><p>同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function">String <span class="title">run</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(url)</div><div class="line">      .build();</div><div class="line"></div><div class="line">  Response response = client.newCall(request).execute();</div><div class="line">  <span class="keyword">return</span> response.body().string();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>异步方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(url)</div><div class="line">        .build();</div><div class="line"></div><div class="line"> client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="对异步方法的分析"><a href="#对异步方法的分析" class="headerlink" title="对异步方法的分析"></a>对异步方法的分析</h2><p>结合上面异步方法，稍作分析，涉及到如下几个对象<font color="#FF8000"> <strong><code>OkHttpClient</code></strong> , <strong><code>Request</code></strong> , <strong><code>Call</code></strong>,<strong><code>Response</code></strong> </font>,其他的都一些方法的调用，所以我们的封装应该重点针对这三个对象来进行。</p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p><code>Request</code> 在 <code>Okhttp</code> 当中是抽象出来的一个请求对象，它封装了请求报文信息：请求的 <code>Url</code> 地址，请求的方法（<code>Get Post</code>等），各种请求头（<code>Content-Type Cookie</code>）以及可以选择的请求体，一般通过内部的 <code>Builder</code> 类来构建对象，建筑者设计模式。</p><p>那么我们这里就针对 <code>Post Get</code> 两种请求方式做封装，但是这里又涉及到一个问题，就是我们还需要参数，用于拼接请求 <code>Url</code> 的参数，举个栗子：</p><p>这是搜狐电视剧频道的 <code>API</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">http:<span class="comment">//api.tv.sohu.com/v4/search/channel.json%22%20+%20%22?cid=2&amp;o=1&amp;plat=6&amp;poid=1&amp;api_key=9854b2afa779e1a6bff1962447a09dbd&amp;%22%20+%20%22sver=6.2.0&amp;sysver=4.4.2&amp;partner=47&amp;page=1&amp;page_size=10</span></div></pre></td></tr></table></figure><p>这么看可能特别的麻烦，我们把它拆分一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String baseUrl=http:<span class="comment">//api.tv.sohu.com/v4/search/channel.json%22%20+%20%22</span></div></pre></td></tr></table></figure><p>然后剩下的都是参数了，以键值对的形式存在：</p><p><img src="https://i.imgur.com/YGahFXU.png" alt=""></p><p>这些参数拼接在 <code>baseUrl</code> 后面的顺序是没有要求的，<strong>不一定要按照上面的顺序来，只要每个参数都按照固定的格式出现就可以</strong>。</p><p>看上面的完整 <code>Url</code> 可以发现规律，在 <code>baseUrl</code> 后面有一个 <code>？</code>， 然后就就是 <code>key1=value1&amp;key2=value2&amp;key3=value3</code> 这种形式的</p><p>其实遵循 <code>RESTful API</code> 设计的接口，都会是这种形式，所以这里也利于我们进行封装了。而 <code>key-value</code> 这种形式，就特别适合使用 <code>Map</code> 结构来封装。</p><p>说这么多，上代码，首先是对参数进行封装：</p><font color="#FF8000"><strong>RequestParam</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 13:55</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>: 封装url中的参数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParams</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用&#123;<span class="doctag">@link</span> ConcurrentHashMap&#125;是为了保证线程安全</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;String, String&gt; urlParams = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestParams</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestParams</span><span class="params">(Map&lt;String, String&gt; source)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : source.entrySet()) &#123;</div><div class="line">            put(entry.getKey(), entry.getValue());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestParams</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">        put(key, value);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(key) &amp;&amp; !TextUtils.isEmpty(value)) &#123;</div><div class="line">            urlParams.put(key, value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ConcurrentHashMap&lt;String, String&gt; <span class="title">getUrlParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> urlParams;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这地方使用 <code>ConcurrentHashMap</code> 就是为了保证线程安全的，这个类使用的是<font color="#FF8000">锁分段技术</font>，不同于一般的同步方法或者是同步代码块，它只会锁住其中一个 <code>segment</code>，其他的 <code>segment</code> 仍然是可以访问的，所以他的效率会比 <code>synchronized</code> 高。</p><p>有了 <code>RequestParam</code> 之后，就可以使用它来拼接 <code>url</code>，有了 <code>url</code> 之后，就可以使用它来构建 <code>Request</code>对象了。</p><font color="#FF8000"><strong>CommonRequest</strong> </font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 2  * <span class="doctag">@author</span>: fanyuzeng</span></div><div class="line"><span class="comment"> 3  * <span class="doctag">@date</span>: 2017/10/27 14:08</span></div><div class="line"><span class="comment"> 4  * <span class="doctag">@desc</span>: response for build various kind of &#123;<span class="doctag">@link</span> okhttp3.Request&#125; include Get Post upload etc.</span></div><div class="line"><span class="comment"> 5  */</span></div><div class="line"> <span class="number">6</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonRequest</span> </span>&#123;</div><div class="line"> <span class="number">7</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"CommonRequest"</span>;</div><div class="line"> <span class="number">8</span>     <span class="comment">/**</span></div><div class="line"><span class="comment"> 9      * create a Get request</span></div><div class="line"><span class="comment">10      *</span></div><div class="line"><span class="comment">11      * <span class="doctag">@param</span> baseUrl base url</span></div><div class="line"><span class="comment">12      * <span class="doctag">@param</span> params see &#123;<span class="doctag">@link</span> RequestParams&#125;</span></div><div class="line"><span class="comment">13      * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Request&#125;</span></div><div class="line"><span class="comment">14      * <span class="doctag">@created</span> at 2017/10/27 14:39</span></div><div class="line"><span class="comment">15      */</span></div><div class="line"><span class="number">16</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Request <span class="title">createGetRequest</span><span class="params">(@NonNull String baseUrl, @Nullable RequestParams params)</span> </span>&#123;</div><div class="line"><span class="number">17</span>         StringBuilder urlBuilder = <span class="keyword">new</span> StringBuilder(baseUrl).append(<span class="string">"?"</span>);</div><div class="line"><span class="number">18</span>         <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">19</span>             <span class="comment">//将请求参数合并进url中</span></div><div class="line"><span class="number">20</span>             <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.getUrlParams().entrySet()) &#123;</div><div class="line"><span class="number">21</span>                 urlBuilder.append(entry.getKey()).append(<span class="string">"="</span>).append(entry.getValue()).append(<span class="string">"&amp;"</span>);</div><div class="line"><span class="number">22</span>             &#125;</div><div class="line"><span class="number">23</span> </div><div class="line"><span class="number">24</span>             Log.d(TAG,<span class="string">"&gt;&gt; createGetRequest &gt;&gt; "</span> + urlBuilder.toString());</div><div class="line"><span class="number">25</span>         &#125;</div><div class="line"><span class="number">26</span>         <span class="keyword">return</span> <span class="keyword">new</span> Request.Builder().get().url(urlBuilder.substring(<span class="number">0</span>, urlBuilder.length() - <span class="number">1</span>)).build();</div><div class="line"><span class="number">27</span>     &#125;</div><div class="line"><span class="number">28</span> </div><div class="line"><span class="number">29</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">30      * create a post request</span></div><div class="line"><span class="comment">31      *</span></div><div class="line"><span class="comment">32      * <span class="doctag">@param</span> baseUrl base url</span></div><div class="line"><span class="comment">33      * <span class="doctag">@param</span> params see &#123;<span class="doctag">@link</span> RequestParams&#125;</span></div><div class="line"><span class="comment">34      * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Request&#125;</span></div><div class="line"><span class="comment">35      * <span class="doctag">@created</span> at 2017/10/27 14:39</span></div><div class="line"><span class="comment">36      */</span></div><div class="line"><span class="number">37</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Request <span class="title">createPostRequest</span><span class="params">(@NonNull String baseUrl, @NonNull RequestParams params)</span> </span>&#123;</div><div class="line"><span class="number">38</span>         FormBody.Builder mFormBodyBuilder = <span class="keyword">new</span> FormBody.Builder();</div><div class="line"><span class="number">39</span>         <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.getUrlParams().entrySet()) &#123;</div><div class="line"><span class="number">40</span>             mFormBodyBuilder.add(entry.getKey(), entry.getValue());</div><div class="line"><span class="number">41</span>         &#125;</div><div class="line"><span class="number">42</span>         FormBody formBody = mFormBodyBuilder.build();</div><div class="line"><span class="number">43</span>         <span class="keyword">return</span> <span class="keyword">new</span> Request.Builder().post(formBody).url(baseUrl).build();</div><div class="line"><span class="number">44</span>     &#125;</div><div class="line"><span class="number">45</span> </div><div class="line"><span class="number">46</span> &#125;</div></pre></td></tr></table></figure><p>第 <code>16</code> 行的 <code>createGetRequest</code> 方法是用于创建一个 <code>Get</code> 请求，主要就是使用 <code>StringBuilder</code> 进行 <code>Url</code> 的拼接，第 <code>37</code> 行的 <code>createPostRequest</code> 方法是用于创建一个 <code>Post</code> 请求的。 <code>Post</code> 请求是先创建 <code>FormBody</code> ，然后和 <code>baseUrl</code> 一个构造 <code>Request</code> 。</p><p>封装到这里， <code>Request</code> 就算是封装完了， 当然这里只封装了 <code>Post Get</code> ，也可以继续封装文件上传和文件下载的Request。</p><h3 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h3><p><code>Call</code> 代表的是一个实际的 <code>HTTP</code> 请求，它是链接 <code>Request</code> 和 <code>Response</code> 的桥梁，通过 <code>Request</code> 对象的 <code>newCall</code> 方法可以得到一个 <code>Call</code> 对象，既支持同步获取数据，也支持异步，在上面官方例子里，也可以看出来，在异步回调中，当获取到数据，会将 <code>Response</code> 对象传入 <code>Callback</code> 的 <code>onSuccess</code> 方法中，如果请求没有成功，就会调用 <code>onFailure</code> 方法（<code>Response</code> 下面说）。那么看看  <code>Callback</code> 是什么。</p><p>先看看官方的 <code>Callback</code> 是什么 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span></span>;</div><div class="line"></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对，把注释删除了之后，其实就是两个接口，简单的理解成，一个是请求成功时的回调，一个是请求失败时的回调。</p><p>那么对这一层的<strong>封装思路</strong>是这样子的：</p><p>一般来说，在上层，我们是需要去处理上面两个回调的，在 <code>onFailure</code> 中，请求失败，应该做什么操作，在 <code>onResponse</code> 中，<code>HTTP</code> 返回的状态码在 <code>[200,300）</code>之间应该有什么操作，在其他区间又应该有什么操作。<font color="#FF8000">那么在这里，我们就创建一个类，去实现这个接口，将基本的处理都在这个类里写好，出错误了，就拿到 <code>erroeCode errorMsg</code> 回调给上层，正确的返回信息，就直接回调给上一层</font>。</p><p>那么这里就涉及到我们自定义的一个 <code>Exception</code> 和 <code>Listener</code> 以及实现了 <code>Callback</code> 接口的 <code>CommonCallback</code> 类。</p><font color="#FF8000"><strong>OkHttpException</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 13:44</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mErrorCode;</div><div class="line">    <span class="keyword">private</span> String mErrorMsg;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OkHttpException</span><span class="params">(<span class="keyword">int</span> errorCode, String errorMsg)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mErrorCode = errorCode;</div><div class="line">        <span class="keyword">this</span>.mErrorMsg = errorMsg;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mErrorCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorMsg</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mErrorMsg;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><font color="#FF8000"><strong>DisposeDataListener</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 13:49</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisposeDataListener</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 请求服务器数据成功时回调的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> responseObj 需要回调到上层的请求结果</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object responseObj)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 请求服务器失败时候的回调方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> exception 需要回调到上层的错误反馈</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(OkHttpException exception)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再将这个 <code>Listener</code> 用<font color="#FF8000">代理设计模式</font>再封装一层</p><font color="#FF8000"><strong>DisposeDataHandler</strong></font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 13:52</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>: 代理模式,使用DisposeDataHandler 代理 DisposeDataListener的操作</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisposeDataHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> DisposeDataListener mListener;</div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; mClass;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DisposeDataHandler</span><span class="params">(DisposeDataListener listener)</span> </span>&#123;</div><div class="line">        mListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DisposeDataHandler</span><span class="params">(DisposeDataListener listener, Class&lt;?&gt; aClass)</span> </span>&#123;</div><div class="line">        mListener = listener;</div><div class="line">        mClass = aClass;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object responseObj)</span> </span>&#123;</div><div class="line">        mListener.onSuccess(responseObj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(OkHttpException exception)</span> </span>&#123;</div><div class="line">        mListener.onFailure(exception);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; getClassType() &#123;</div><div class="line">        <span class="keyword">return</span> mClass;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>此处用代理模式，主要是为了优雅（装X）的处理 <code>Class&lt;?&gt;</code> 这个对象，这是用于映射的类型，在调用 <code>Listener</code> 的回到方法之后做判断这个对象是否存在，是，则再映射在返回，否，直接返回。<br><br>然后将三面三个类聚合到一起<br><br><font color="#FF8000"><strong>CommonJsonCallback</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 14:41</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonJsonCallback</span> <span class="keyword">implements</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"CommonJsonCallback"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG_RESULT_EMPTY = <span class="string">"request could not be ececuted"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG_JSON_EMPTY = <span class="string">"json is empty or null"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG_RETURN_CODE = <span class="string">"http return code is not [200,300)"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_ERROR = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> JSON_ERROR = -<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mDeliveryHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Gson mGson = <span class="keyword">new</span> Gson();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DisposeDataHandler mDisposeDataHandler;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonJsonCallback</span><span class="params">(DisposeDataHandler dataHandler)</span> </span>&#123;</div><div class="line">        mDisposeDataHandler = dataHandler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(@NonNull Call call, @NonNull <span class="keyword">final</span> IOException e)</span> </span>&#123;</div><div class="line">        mDeliveryHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mDisposeDataHandler.onFailure(<span class="keyword">new</span> OkHttpException(NETWORK_ERROR, MSG_RESULT_EMPTY + e.getMessage()));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(@NonNull Call call, @NonNull <span class="keyword">final</span> Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!response.isSuccessful()) &#123;</div><div class="line">            mDeliveryHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mDisposeDataHandler.onFailure(<span class="keyword">new</span> OkHttpException(NETWORK_ERROR, MSG_RETURN_CODE + response.message()));</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> String resultJson = response.body().string();</div><div class="line">        mDeliveryHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                handleResponse(resultJson);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(String resultJson)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(resultJson)) &#123;</div><div class="line">            mDisposeDataHandler.onFailure(<span class="keyword">new</span> OkHttpException(NETWORK_ERROR, MSG_JSON_EMPTY));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mDisposeDataHandler.getClassType() == <span class="keyword">null</span>) &#123;</div><div class="line">            mDisposeDataHandler.onSuccess(resultJson);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Object mappedDataType = mGson.fromJson(resultJson, mDisposeDataHandler.getClassType());</div><div class="line">            <span class="keyword">if</span> (mappedDataType == <span class="keyword">null</span>) &#123;</div><div class="line">                mDisposeDataHandler.onFailure(<span class="keyword">new</span> OkHttpException(JSON_ERROR, MSG_JSON_EMPTY));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mDisposeDataHandler.onSuccess(mappedDataType);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>自我感觉用代理之后，处理对象都是 <code>DisposeHandler</code> ，不会在看到 <code>Listener</code> <code>Class&lt;?&gt;</code> ,适应起来方便些了。</p><p>要注意一点是，在 <code>onResponse</code> 方法中，还是在子线程中的，要及时切换线程。</p><p>到这里，就对 <code>Call</code> 这个对象封装完成了。</p><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p><code>Response</code> 类封装了响应报文信息：状态吗（<code>200</code>、<code>404</code> 等）、响应头（<code>Content-Type</code>、<code>Server</code> 等）以及可选的响应体。可以通过 <code>Call</code> 对象的 <code>execute()</code> 方法获得 <code>Response</code> 对象，异步回调执行 <code>Callback</code> 对象的 <code>onResponse</code> 方法时也可以获取 <code>Response</code> 对象。</p><p>这东西人家已经给我们封装好了， 需要什么直接去拿就行， 也不需要在封装。</p><h3 id="OkHttpClient"><a href="#OkHttpClient" class="headerlink" title="OkHttpClient"></a>OkHttpClient</h3><p><a href="http://square.github.io/okhttp/3.x/okhttp/" target="_blank" rel="external">官方文档</a>有这么一句话：</p><blockquote><p>OkHttp performs best when you create a single OkHttpClient instance and reuse it for all of your HTTP calls. This is because each client holds its own connection pool and thread pools. Reusing connections and threads reduces latency and saves memory. Conversely, creating a client for each request wastes resources on idle pools.</p></blockquote><p>翻译一下：当你使用一个全局的 <code>OkHttpClient</code> ，并且重用它发起 <code>HTTP</code> 请求的时候，<code>OkHttp</code> 的能够发挥最 <code>NB</code> 的性能，因为每一个客户端都持有它的连接池和线程池，如果这俩东西可以重用的话，那么就能减少潜在的因素，并且节省内存，相反的，如果为每一个客户端的每一个请求都创建一个 <code>OkHttpClient</code> ，那么就会浪费空闲的连接池和线程池中的资源。</p><p>叽叽歪歪这么多，就是说用 <code>OkHttpClient</code> 的时候要用<font color="#ff8000"><strong>单例模式</strong></font>。</p><p>刚开始我是这么设计的：</p><font color="#FF8000"><strong>CommonokHttpClient</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 15:21</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Deprecated</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonOkHttpClient</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIME_OUT = <span class="number">30</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient sOkHttpClient;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line">        builder.hostnameVerifier(<span class="keyword">new</span> HostnameVerifier() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        builder.connectTimeout(TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        builder.readTimeout(TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        builder.writeTimeout(TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        <span class="comment">//允许重定向</span></div><div class="line">        builder.followRedirects(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> 2017/10/27 https</span></div><div class="line">        sOkHttpClient = builder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 请求服务器数据的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> request Use &#123;<span class="doctag">@link</span> com.project.fanyuzeng.mvpdemo.utils.okhttp.request.CommonRequest&#125; to build</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> handler see &#123;<span class="doctag">@link</span> DisposeDataHandler&#125;  proxy class</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestServerData</span><span class="params">(Request request, DisposeDataHandler handler)</span> </span>&#123;</div><div class="line">        sOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> CommonJsonCallback(handler));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>恩，静态代码块中初始化实例化 <code>OkHttpClient</code>，我认为饿汉模式没有本质的区别， 但是这种方式比饿汗模式的初始化时间更早。</p><blockquote><p>好吧 ，我承认我懒，不想在整个单例类出来。。</p></blockquote><p>这样写，也没什么问题，但是外界在使用的使用，比较麻烦</p><ol><li>创建<code>RequestParams</code>，涉及到 <code>HashMap</code> 的好多 <code>put</code> 操作</li><li>用 <code>RequestParam</code>  去初始化 <code>CommonRequest</code></li><li>在上层根据请求方式去创建对应的 <code>Request</code></li><li>再实例化一个<code>DisposeHandler</code> </li></ol><p>所以只好接着封装吧，分析上面 <code>4</code> 个步骤，其中步骤 <code>1</code> 那是不能再简化了的，因为具体的请求参数肯定是要从外界传进来的，这里涉及到的 <code>HashMap</code> 以及它的 <code>put</code> 操作是不可避免的。步骤 <code>2</code> 和步骤 <code>3</code> 完全是可以封装一下的，步骤 <code>4</code> 也是需要从外外界回调的方法，类似于点击监听的 <code>onClick</code> 方法回调。</p><p>所以把 <code>CommonOkHttpClient</code> 给 <code>Deprecated</code> 掉，重新来一个</p><font color="#FF8000"><strong>OkHttpManager</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 17:57</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> OkHttpManager sManager;</div><div class="line">    <span class="keyword">private</span>  OkHttpClient mOkHttpClient;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">OkHttpManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line">        builder.hostnameVerifier(<span class="keyword">new</span> HostnameVerifier() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        builder.connectTimeout(Constants.HTTP_TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        builder.readTimeout(Constants.HTTP_TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        builder.writeTimeout(Constants.HTTP_TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        <span class="comment">//允许重定向</span></div><div class="line">        builder.followRedirects(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> 2017/10/27 https</span></div><div class="line">        mOkHttpClient = builder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OkHttpManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sManager == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (OkHttpManager.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sManager == <span class="keyword">null</span>) &#123;</div><div class="line">                    sManager = <span class="keyword">new</span> OkHttpManager();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用&#123;<span class="doctag">@link</span> OkHttpClient&#125;想服务器端请求数据的方法</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> method &#123;<span class="doctag">@link</span> Constants#HTTP_GET_METHOD&#125; Get方式,&#123;<span class="doctag">@link</span> Constants#HTTP_POST_METHOD&#125; Post方式</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> baseUrl baseUrl</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> paramsMap 请求url的参数,以键值对的形式存放</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestServerData</span><span class="params">(<span class="keyword">int</span> method, String baseUrl, HashMap&lt;String, String&gt; paramsMap, DisposeDataHandler handler)</span> </span>&#123;</div><div class="line">        RequestParams requestParams = <span class="keyword">new</span> RequestParams(paramsMap);</div><div class="line">        Request request = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (method == Constants.HTTP_GET_METHOD) &#123;</div><div class="line">            request = CommonRequest.createGetRequest(baseUrl, requestParams);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method == Constants.HTTP_POST_METHOD) &#123;</div><div class="line">            request = CommonRequest.createPostRequest(baseUrl, requestParams);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</div><div class="line">            mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> CommonJsonCallback(handler));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>好吧，还是用双重锁模式的单例比较放心 。</p></blockquote><p>到此就封装完了，下面简单的使用一下。</p><h2 id="使用姿势"><a href="#使用姿势" class="headerlink" title="使用姿势"></a>使用姿势</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span>  OkHttpManager.getInstance().requestServerData(method, url, mPaginationPresenter.getParams(), <span class="keyword">new</span> DisposeDataHandler(<span class="keyword">new</span> DisposeDataListener() &#123;</div><div class="line"> <span class="number">2</span>             <span class="meta">@Override</span></div><div class="line"> <span class="number">3</span>             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object responseObj)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>                 String responseJson = (String) responseObj;</div><div class="line"> <span class="number">5</span>                 Log.d(TAG, <span class="string">"&gt;&gt; onSuccess &gt;&gt; "</span> + responseJson);</div><div class="line"> <span class="number">6</span>                 mPaginationPresenter.accessSuccess(responseJson);</div><div class="line"> <span class="number">7</span>             &#125;</div><div class="line"> <span class="number">8</span>             <span class="meta">@Override</span></div><div class="line"> <span class="number">9</span>             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(OkHttpException exception)</span> </span>&#123;</div><div class="line"><span class="number">10</span>                 Log.d(TAG, <span class="string">"&gt;&gt; onFailure &gt;&gt; "</span> + exception.getErrorCode());</div><div class="line"><span class="number">11</span>                 mPaginationPresenter.okHttpError(exception.getErrorCode(), exception.getErrorMsg(), url);</div><div class="line"><span class="number">12</span>             &#125;</div><div class="line"><span class="number">13</span>         &#125;,<span class="keyword">null</span>));</div></pre></td></tr></table></figure><ul><li>没有将 <code>Json</code> 数据映射成实体类， 所以在 <code>13</code> 行构造 <code>DisposeDataHandler</code> 的时候，第二个 类参数传的是 <code>null</code>。</li><li>这个例子是结合上一篇请求分页数据来用的，所以这里直接将 <code>Json</code> 数据抛给 <code>Presenter</code> 层，让它去处理。</li><li>第 <code>1</code> 行的 <code>mPaginationPresenter.getParams()</code> 就是拿 <code>url</code> 中的参数。</li></ul><p>由于篇幅的限制，这一篇先到这里，下一篇再把这个封装的 <code>OkHttp</code> 工具用于分页数据的请求。</p><p>最后，贴个 <code>AS</code> 中封装之后工具的结构图。</p><p><img src="https://i.imgur.com/OMByMTy.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;摘要&lt;/em&gt;：&lt;em&gt;前两篇中使用的网络请求工具是 &lt;code&gt;OkHttp&lt;/code&gt; ，并没有经过封装，都是简单的使用 &lt;code&gt;get&lt;/code&gt; 请求，并且将错误全部都抛到上层去解决了， 这无形之中增加了上层的编码复杂度，即
      
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
      <category term="okHttp" scheme="http://zengfanyu.top/tags/okHttp/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（三）基于分页列表的封装</title>
    <link href="http://zengfanyu.top/2017/10/25/MVP3/"/>
    <id>http://zengfanyu.top/2017/10/25/MVP3/</id>
    <published>2017-10-25T12:37:15.000Z</published>
    <updated>2017-10-28T07:15:26.281Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：在<a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>中对MVP模式进行了封装，然后通过封装之后的类，实现了一个网络请求，但是请求到网络数据之后，就直接展示到了 <code>View</code> 层，并没有其他的操作，然而我们在开发过程中， 经常会用到分页加载，一般在滑动控件向上滚动，加载更多事件触发是调用，并且这个过程设计到两个参数，一个是 <code>PageIndex</code> ：页码；一个是 <code>PageSize</code> 一页数据的大小， 分页加载就是通过在某一具体事件触发时，调用修改这两个或者一个参数，重新请求网络，从而拿到下一页的数据，这边文章还是基于MVP模式，对分页数据的请求进行封装。</p></blockquote><p> <code>presenter</code> 层作为 <code>MVP</code> 模式的桥梁， 那就先从这一层开始说起吧。</p><h2 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h2><p><a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>中对 <code>Presenter</code> 层的公共方法进行了抽取并且封装成了一个接口 <code>IBasePresenter</code> ，那么现在我们需要<strong>实现分页加载还有刷新</strong>的功能，那么在 <code>IBasePresenter</code> 接口的基础之上，在对其封装一个接口 <code>IBasePeginationPresenter</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by fanyuzeng on 2017/10/23.</span></div><div class="line"><span class="comment"> * Function:在IBasePresenter的基础上扩展的接口，适用于分页加载的情况</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBasePaginationPresenter</span>&lt;<span class="title">Param</span>&gt; <span class="keyword">extends</span> <span class="title">IBasePresenter</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 刷新数据的接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> param 访问服务器的参数</span></div><div class="line"><span class="comment"> * <span class="doctag">@created</span> at 2017/10/23 20:07</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">(Param param)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 加载更多的接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@created</span> at 2017/10/23 20:07</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadingNext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 用于判断服务器端是否还有更多的数据</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> true -还有更多数据 - false 没有更多的数据</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasMoreData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>也是一个泛型的接口，增加的三个方法 ：</p><ol><li><code>refresh(Param param)</code> 在 <code>View</code> 层调用，用于通知 <code>Model</code> 层刷新数据</li><li><code>loadingNext()</code> 在 <code>View</code> 层调用，用于通知 <code>Model</code> 层加载下一页数据</li><li><code>hasMoreData()</code> 在 <code>Model</code> 层请求网络数据前调用做判断，是否还有下一页数据</li></ol><p>有了针对分页刷新的接口之后，还需要有一个实现它的基类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu </span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>：2017/10/20 </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePaginationPresenter</span>&lt;<span class="title">Param</span> <span class="keyword">extends</span> <span class="title">BasePeginationParam</span>, <span class="title">Data</span>&gt; <span class="keyword">implements</span> <span class="title">IBasePaginationPresenter</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BasePaginationPresenter"</span>;</div><div class="line">    <span class="keyword">private</span> IBaseModel mBaseModel;</div><div class="line">    <span class="keyword">private</span> IBaseView mBaseListView;</div><div class="line">    <span class="keyword">private</span> Param mParam;</div><div class="line">    <span class="keyword">private</span> Class&lt;Data&gt; mClazz;</div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mHasMoreData=<span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类中调用，用于传递服务器返回的，处理好的结果</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> data View层需要的数据类型</span></div><div class="line"><span class="comment">     * <span class="doctag">@created</span> at 2017/10/23 20:10</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">serverResponse</span><span class="params">(Data data)</span></span>;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * 子类中调用，用于确认服务器端是否还有数据</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * <span class="doctag">@return</span> true-还有数据 false-没有数据</span></div><div class="line"><span class="comment">         */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">serverHaveMoreData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasePaginationPresenter</span><span class="params">(IBaseView baseListView, Class&lt;Data&gt; Clazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mBaseListView = baseListView;</div><div class="line">        mClazz = Clazz;</div><div class="line">        mBaseModel = <span class="keyword">new</span> SohuAlbumModel(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(Param param)</span> </span>&#123;</div><div class="line">        requestServer(param);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadingNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mParam != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">int</span> pageIndex = mParam.getPageIndex();</div><div class="line">            mParam.setPageIndex(pageIndex + <span class="number">1</span>);</div><div class="line">            requestServer(mParam);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestServer</span><span class="params">(@Nullable Param param)</span> </span>&#123;</div><div class="line">        mBaseListView.showProgress(<span class="keyword">true</span>);</div><div class="line">        mParam = param;</div><div class="line">        Log.d(TAG, <span class="string">"&gt;&gt; requestServer &gt;&gt; "</span>);</div><div class="line">        getModel().sendRequestToServer(param);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessSuccess</span><span class="params">(String responseJson)</span> </span>&#123;</div><div class="line">        mBaseListView.showProgress(<span class="keyword">false</span>);</div><div class="line">        Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">        serverResponse(gson.fromJson(responseJson, mClazz));</div><div class="line">        mBaseListView.showSuccess(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        mBaseModel.cancelRequest();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">okHttpError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc, <span class="keyword">final</span> String errorUrl)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mBaseListView.showOkHttpError(errorCode, errorDesc, errorUrl);</div><div class="line">                mBaseListView.showProgress(<span class="keyword">false</span>);</div><div class="line">                mBaseListView.showSuccess(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBaseModel <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBaseModel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, String&gt; <span class="title">getParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ServerHaveMoreData();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在类申明时，可以看到 <code>Param extends BasePeginationParam</code> ，这里的 <code>BasePeginationParam</code>主要是封装了<strong>摘要</strong>中提到的 <code>PageIndex</code> 和 <code>PageSize</code> 两个参数，以及他们的 <code>Getter Seeter</code> 方法。</li><li>重点看 <code>IBasePeginationPresenter</code> 中新增加的三个方法，<code>refresh(Param param)</code> 会重新调用一次 <code>requestServer(Param param)</code> （<em>此方法在<a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>也提过了，就是通知 <code>Model</code> 层获取数据</em>）；</li><li><code>loadingNext()</code> ，加载下一页数据的方法，就是将参数中的 <code>PageIndex + 1</code> 之后，重新调用 <code>requestServer(Param param)</code> 方法。此处只改变了页码，如果需要改变请求数据的条数，也是相应的在 <code>loadingNext()</code> 中修改 <code>PageSize</code> 的值。</li><li><code>hasMoreData()</code> ,这里返回抽象方法 <code>serverhaveMoreData()</code> ，这个方法是在子类中实现的，子类解析了数据之后，判断服务器是否还有数据返回。</li></ul><p>然后有需要实现分页功能的 <code>Presenter</code> 就可以直接继承 <code>BasePaginationPresenter</code> 。</p><h2 id="Model-层"><a href="#Model-层" class="headerlink" title="Model 层"></a>Model 层</h2><p>由于 <code>Model</code> 层的职责比较单一，<strong>就是向数据源请求数据，并且返回给 <code>Presenter</code> 层</strong>，所以此处不需要额外封装接口或者是基类，只需要重新实现<a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>中提到的 <code>IBaseModel</code> 接口即可。</p><h2 id="View-层"><a href="#View-层" class="headerlink" title="View 层"></a>View 层</h2><p>此处和请求一次数据相比较， <code>View</code> 层就是需要在两个事件触发的时候，<strong>重新设置参数</strong>通知 <code>Presenter</code> 去请求数据，然后再展示出来。这两个事件分别是：<strong>上拉到底时加载更多、下拉时刷新数据</strong>（当然可以别的）。</p><h2 id="针对上一小节中封装类的具体实现"><a href="#针对上一小节中封装类的具体实现" class="headerlink" title="针对上一小节中封装类的具体实现"></a>针对上一小节中封装类的具体实现</h2><h3 id="View-层的具体实现"><a href="#View-层的具体实现" class="headerlink" title="View 层的具体实现"></a>View 层的具体实现</h3><p>主要是展示电视剧的主要信息，那么需要提供一个接口方法，给 <code>Presenter</code> 层调用，展示处理好的 <code>JavaBean</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示搜狐电视剧频道具体信息的接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISohuSerials</span> <span class="keyword">extends</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 展示搜狐视频API电视剧主要信息的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> videoList 处理好的VideoInfo集合</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAlbumMainInfo</span><span class="params">(List&lt;VideoInfo&gt; videoList)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>此处的 <code>VideoInfo</code> 是一个JavaBean，对应的就是电视剧信息的实体类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoInfo</span> </span>&#123;</div><div class="line">   <span class="meta">@SerializedName</span>(<span class="string">"main_actor"</span>)</div><div class="line">   <span class="keyword">private</span> String mMainActor;</div><div class="line">      <span class="meta">@SerializedName</span>(<span class="string">"total_video_count"</span>)</div><div class="line">      <span class="keyword">private</span> <span class="keyword">int</span> mTotalVideoCount;</div><div class="line">      <span class="meta">@SerializedName</span>(<span class="string">"album_name"</span>)</div><div class="line">      <span class="keyword">private</span> String mAlbumName;</div><div class="line">      <span class="meta">@SerializedName</span>(<span class="string">"director"</span>)</div><div class="line">      <span class="keyword">private</span> String mDirector;</div><div class="line">      <span class="meta">@SerializedName</span>(<span class="string">"publish_time"</span>)</div><div class="line">      <span class="keyword">private</span> String mPublishTime;</div><div class="line"></div><div class="line"><span class="comment">//Getter and setter methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>之前映射数据需要保证字段名和 <code>Json</code> 数据的字段名一致，其实本来把这个类的字段名改得一致就行啦，但是服务器端返回的数据字段，很多都是以<code>“_”</code>进行连接，而不是使用驼峰命名法则，这个时候 <code>Gson</code> 的 <code>@SerializedName</code> 注解就派上用场了，注解中用服务器端返回值字段，成员变量仍然使用驼峰命名法。</p><p>但是上个周末安装了最近 <code>Alibaba 10 月 14 日</code> 推出的 <code>Coding Guidelines</code> 插件，发现代码中很多不规范的地方，并且人家规定了成员变量就必须要使用驼峰命名！所以我决定要按照这个插件的规范来写代码了，虽然现在进不了大厂，但是先熟悉大厂的代码规范也是好事，哈哈~  咳咳，按照大厂的代码规范，成员变量的命名必须使用驼峰命名法！</p><p>这个插件是真心好用，比如对类名要 <code>javadoc</code> 注释 参数、返回值、异常说明、此方法做什么事情、实现什么功能（领域模型相关命名除外，比如：DO、BO、DAO），并且是全中文的！直接在 <code>AS</code> 的 <code>Inspection Results</code> 窗口中显示，这 <code>IDE</code> 内置功能啥时候讲过中文反馈结果的？</p><p> <a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;mid=2247486054&amp;idx=1&amp;sn=f71c4d006d52a5aca679992cbd25620d&amp;chksm=e9293769de5ebe7f5efcd0f86eaf0dd1820ff99a21e3392741d25cbac66eae87f2757bdcc545&amp;mpshare=1&amp;scene=1&amp;srcid=1025zktcvhJDfkWaaRbDsw2a#rd" target="_blank" rel="external">《阿里巴巴Java开发规约》插件全球首发！</a> </p><p>广告时间结束，言归正传！</p></blockquote><p>这个 <code>Activity</code> 实现了 <code>ISohuSerials</code> 接口，布局文件和<a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>一样，只是把 <code>ListView</code> 换成了自定义的 <code>PullLoadRecyclerView</code> 了，这个<code>RecycyclerView</code> 支持上拉加载更多和下拉刷新， 这里不展开说了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SohuAlbumInfoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ISohuSerials</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SohuAlbumInfoActivity"</span>;</div><div class="line">    <span class="keyword">private</span> PullLoadRecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> ProgressBar mProgressBar;</div><div class="line">    <span class="keyword">private</span> TextView mTip;</div><div class="line">    <span class="keyword">private</span> RelativeLayout mContainer;</div><div class="line">    <span class="keyword">private</span> AlbumPresenter mAlbumPresenter;</div><div class="line">    <span class="keyword">private</span> BasePaginationParam mParam= <span class="keyword">new</span> BasePaginationParam(<span class="number">1</span>, <span class="number">10</span>);</div><div class="line">    <span class="keyword">private</span> VideoInfoAdapter mAdapter;</div><div class="line">    Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsFromRefresh = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_album_view);</div><div class="line">        mContext = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        mAlbumPresenter = <span class="keyword">new</span> AlbumPresenter(<span class="keyword">this</span>, Album.class);</div><div class="line"></div><div class="line">        mContainer = (RelativeLayout) findViewById(R.id.id_success_content);</div><div class="line">        mTip = (TextView) findViewById(R.id.id_tip);</div><div class="line">        mProgressBar = (ProgressBar) findViewById(R.id.id_progress_bar);</div><div class="line"></div><div class="line"></div><div class="line">        mRecyclerView = (PullLoadRecyclerView) findViewById(R.id.id_recycler_view);</div><div class="line">        mRecyclerView.setLinearLayout();</div><div class="line">        mAdapter = <span class="keyword">new</span> VideoInfoAdapter(mContext);</div><div class="line">        mAlbumPresenter.requestServer(mParam);</div><div class="line"></div><div class="line">        mRecyclerView.setAdapter(mAdapter);</div><div class="line">        mRecyclerView.setOnPullLoadMoreListener(<span class="keyword">new</span> PullLoadRecyclerView.OnPullLoadMoreListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">                mIsFromRefresh = <span class="keyword">true</span>;</div><div class="line">                mParam.setPageIndex(<span class="number">1</span>);</div><div class="line">                mAlbumPresenter.refresh(mParam); <span class="comment">//通知Presenter层刷新数据</span></div><div class="line">                mRecyclerView.setRefreshCompleted();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadMore</span><span class="params">()</span> </span>&#123;</div><div class="line">                mAlbumPresenter.loadingNext();</div><div class="line">                mRecyclerView.setLoadMoreCompleted(); <span class="comment">//通知Presenter层加载下一页数据</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAlbumMainInfo</span><span class="params">(List&lt;VideoInfo&gt; albumList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mIsFromRefresh) &#123;</div><div class="line">            mAdapter.cleanData();</div><div class="line">            mIsFromRefresh = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (albumList != <span class="keyword">null</span> &amp;&amp; albumList.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (VideoInfo videoInfo : albumList) &#123;</div><div class="line">                mAdapter.addData(videoInfo);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mAdapter.notifyDataSetChanged();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isShow)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (isShow) &#123;</div><div class="line">                    mProgressBar.setVisibility(View.VISIBLE);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mProgressBar.setVisibility(View.GONE);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showOkHttpError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc, <span class="keyword">final</span> String errorUrl)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mTip.setText(<span class="string">"http err:"</span> + <span class="string">"errCode:"</span> + errorCode + <span class="string">",errDesc:"</span> + errorDesc + <span class="string">",errUrl:"</span> + errorUrl);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showServerError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mTip.setText(<span class="string">"server err:"</span> + <span class="string">"errCode:"</span> + errorCode + <span class="string">",errDesc:"</span> + errorDesc);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSuccess</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isSuccess)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (isSuccess) &#123;</div><div class="line">                    mContainer.setBackgroundResource(android.R.color.white);</div><div class="line">                    mTip.setText(<span class="string">"Sohu Serials album"</span>);</div><div class="line"></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mContainer.setBackgroundResource(R.color.colorAccent);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在上面代码中可以看到:</p><ul><li>在 <code>PullLoadRecycler.OnPullLoadMoreListenre</code> 的 <code>onRefresh()</code> 回调方法中，核心代码就是这一行 <code>mAlbumPresenter.refresh(mParam);</code> ，通知 <code>Presenter</code> 层去刷新数据， 至于 <code>Presenter</code> 层如何刷新。。 关我 <code>View</code> 层 X 事~</li><li>在 <code>PullLoadRecycler.OnPullLoadMoreListenre</code> 的 <code>onLoadMore()</code> 回调方法中,也是直接调用 <code>mAlbumPresenter.loadingNext()</code>。</li></ul><p>下面说说 <code>Presenter</code> 层的代码</p><h3 id="Presenter-层的具体实现"><a href="#Presenter-层的具体实现" class="headerlink" title="Presenter 层的具体实现"></a>Presenter 层的具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> * Function:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlbumPresenter</span> <span class="keyword">extends</span> <span class="title">BasePaginationPresenter</span>&lt;<span class="title">BasePaginationParam</span>, <span class="title">Album</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> ISohuSerials mBaseListView;</div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTotalCount;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AlbumPresenter</span><span class="params">(ISohuSerials baseListView, Class&lt;Album&gt; CLazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(baseListView, CLazz);</div><div class="line">        <span class="keyword">this</span>.mBaseListView = baseListView;</div><div class="line">        getModel().setRequestMethod(Constants.HTTP_GET_METHOD);</div><div class="line">        getModel().setRequestUrl(Constants.SOHU_SERIALS_URL);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serverResponse</span><span class="params">(Album album)</span> </span>&#123;</div><div class="line"></div><div class="line">        mBaseListView.showAlbumMainInfo(album.getData().getVideos());</div><div class="line"></div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mBaseListView.showProgress(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        mTotalCount = album.getData().getCount();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">serverHaveMoreData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//此处pageIndex是从1开始的， 实际使用需要注意pageIndex的起始值</span></div><div class="line">        <span class="keyword">int</span> pageSize = mParam.getPageSize();</div><div class="line">        <span class="keyword">int</span> pageIndex = mParam.getPageIndex();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (pageIndex * pageSize) &lt;= mTotalCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>首先是要继承之前编写的 <code>BasePaginationPresenter</code>类，泛型参数 <code>BasePaginationParam</code> 可以根据实际需求进行拓展，基本使用在前面已经介绍过，此处不做赘述。</li><li><code>Album</code> 是搜狐视频电视剧频道返回数据的实体类，上面提到的 <code>VideoInfo</code> 包含在 <code>Album</code> 里面，因为现在只需要展示 <code>VideoInfo</code> 里的信息， 所以在 <code>serverRespomse</code> 方法里，有一个转换 <code>mBaseListView.showAlbumMainInfo(album.getData().getVideos());</code></li><li>实现父类 <code>BasePaginationPresenter</code> 中的抽象方法 <code>serverHaveMoreData()</code> ,思路就是 当前页面数 * 每一页的数据量，然后和 数据总量 比较大小。</li></ul><h3 id="Model-层的具体实现"><a href="#Model-层的具体实现" class="headerlink" title="Model 层的具体实现"></a>Model 层的具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 2  * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> 3  */</span></div><div class="line"> <span class="number">4</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SohuAlbumModel</span>&lt;<span class="title">Param</span> <span class="keyword">extends</span> <span class="title">BasePaginationParam</span>&gt; <span class="keyword">implements</span> <span class="title">IBaseModel</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line"> <span class="number">5</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SohuAlbumModel"</span>;</div><div class="line"> <span class="number">6</span>     <span class="keyword">private</span> String url;</div><div class="line"> <span class="number">7</span>     <span class="keyword">private</span> <span class="keyword">int</span> method;</div><div class="line"> <span class="number">8</span>     <span class="keyword">private</span> IBasePaginationPresenter mPaginationPresenter;</div><div class="line"> <span class="number">9</span> </div><div class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="title">SohuAlbumModel</span><span class="params">(IBasePaginationPresenter paginationPresenter)</span> </span>&#123;</div><div class="line"><span class="number">11</span>         mPaginationPresenter = paginationPresenter;</div><div class="line"><span class="number">12</span>     &#125;</div><div class="line"><span class="number">13</span> </div><div class="line"><span class="number">14</span>     <span class="meta">@Override</span></div><div class="line"><span class="number">15</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRequestToServer</span><span class="params">(Param param)</span> </span>&#123;</div><div class="line"><span class="number">16</span>         String validUrl = <span class="keyword">null</span>;</div><div class="line"><span class="number">17</span>         <span class="keyword">if</span> (param != <span class="keyword">null</span> &amp;&amp; !TextUtils.isEmpty(url)&amp;&amp;mPaginationPresenter.hasMoreData()) &#123;</div><div class="line"><span class="number">18</span>             validUrl = getValidUrl(url, param);</div><div class="line"><span class="number">19</span>             Log.d(TAG, <span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"ValidUrl:"</span> + validUrl);</div><div class="line"><span class="number">20</span>         &#125;</div><div class="line"><span class="number">21</span> Log.d(TAG,<span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"check param,url and server have data or not!"</span>)</div><div class="line"><span class="number">22</span>         <span class="keyword">if</span> (!TextUtils.isEmpty(validUrl)) &#123;</div><div class="line"><span class="number">23</span>             HttpUtils.executeByGet(validUrl, <span class="keyword">new</span> Callback() &#123;</div><div class="line"><span class="number">24</span>                 <span class="meta">@Override</span></div><div class="line"><span class="number">25</span>                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"><span class="number">26</span>                     Log.d(TAG, <span class="string">"&gt;&gt; onFailure &gt;&gt; "</span>);</div><div class="line"><span class="number">27</span>                     e.printStackTrace();</div><div class="line"><span class="number">28</span>                     mPaginationPresenter.okHttpError(Constants.URL_ERROR, e.getMessage(), url);</div><div class="line"><span class="number">29</span>                 &#125;</div><div class="line"><span class="number">30</span> </div><div class="line"><span class="number">31</span>                 <span class="meta">@Override</span></div><div class="line"><span class="number">32</span>                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"><span class="number">33</span>                     <span class="keyword">if</span> (!response.isSuccessful()) &#123;</div><div class="line"><span class="number">34</span>                         Log.d(TAG, <span class="string">"&gt;&gt; onResponse &gt;&gt; "</span> + <span class="string">"Not successful"</span>);</div><div class="line"><span class="number">35</span>                         mPaginationPresenter.okHttpError(Constants.SERVER_ERROR, response.message(), url);</div><div class="line"><span class="number">36</span>                     &#125;</div><div class="line"><span class="number">37</span> </div><div class="line"><span class="number">38</span>                     String responseJson = response.body().string();</div><div class="line"><span class="number">39</span>                     Log.d(TAG, <span class="string">"&gt;&gt; onResponse &gt;&gt; "</span> + <span class="string">"responseJson:"</span> + responseJson);</div><div class="line"><span class="number">40</span>                     mPaginationPresenter.accessSuccess(responseJson);</div><div class="line"><span class="number">41</span> </div><div class="line"><span class="number">42</span>                 &#125;</div><div class="line"><span class="number">43</span>             &#125;);</div><div class="line"><span class="number">44</span>         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">45</span>             Log.d(TAG, <span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"Valid Url is empty"</span>);</div><div class="line"><span class="number">46</span>         &#125;</div><div class="line"><span class="number">47</span>     &#125;</div><div class="line"><span class="number">48</span> </div><div class="line"><span class="number">49</span>     <span class="function"><span class="keyword">private</span> String <span class="title">getValidUrl</span><span class="params">(String url, Param param)</span> </span>&#123;</div><div class="line"><span class="number">50</span>         <span class="keyword">return</span> String.format(url, param.getPageIndex(), param.getPageSize());</div><div class="line"><span class="number">51</span>     &#125;</div><div class="line"><span class="number">52</span> </div><div class="line"><span class="number">53</span> </div><div class="line"><span class="number">54</span>     <span class="meta">@Override</span></div><div class="line"><span class="number">55</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"><span class="number">56</span>         <span class="keyword">this</span>.url = url;</div><div class="line"><span class="number">57</span>     &#125;</div><div class="line"><span class="number">58</span> </div><div class="line"><span class="number">59</span>     <span class="meta">@Override</span></div><div class="line"><span class="number">60</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestMethod</span><span class="params">(<span class="keyword">int</span> method)</span> </span>&#123;</div><div class="line"><span class="number">61</span>         <span class="keyword">this</span>.method = method;</div><div class="line"><span class="number">62</span>     &#125;</div><div class="line"><span class="number">63</span> </div><div class="line"><span class="number">64</span>     <span class="meta">@Override</span></div><div class="line"><span class="number">65</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelRequest</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">66</span>         HttpUtils.cancelCall();</div><div class="line"><span class="number">67</span>     &#125;</div><div class="line"><span class="number">68</span> &#125;</div></pre></td></tr></table></figure><p><code>Model</code> 层的实现还是跟之前的一样，直接实现 <code>IBaseModel</code> 接口即可。</p><ul><li>在 <code>17</code> 行可以看到，<code>mPaginationPresenter.hasMoreData()</code> ，这个就是对服务器点是否还有数据可以返回的判断，如果这里返回 <code>false</code> 那么就不回去进行网络请求,然后在 <code>22</code> 行打印个 <code>Log</code> 提醒。</li><li>在看看 <code>49</code> 行的 <code>getVaildUrl</code> 方法，这个方法主要就是把传进来的 <code>param</code> 参数拼接进 <code>url</code> 中，形成有效的，可以请求到数据的 <code>Url</code>。</li></ul><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://i.imgur.com/QIPIc3y.gif" alt=""></p><p><code>Item</code> 就展示了一下电视剧的 主演、名字、导演、集数、更新时间的信息。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过上面的封装和例子，起码证明了这一套封装能够跑的通了，以后如果还有关于分页请求的需求，可以直接继承上面的基类来实现，无非就是修改<code>param</code> 和 <code>Data</code> 两个泛型的参数。</p><ul><li>前者是请求 <code>url</code> 的参数，根据具体的业务需求，封装 <code>BasePaginationParam</code> 的子类即可。</li><li>后者是服务器端返回数据的实体类，也是根据数据的结构来封装的，在 <code>Android Studio</code> 中有 <code>Gson Formatter</code> 这个插件，封装 <code>JavaBean</code> 插件也轻松很多，在结合上面提到的 <code>Gson</code> 注解，全套了。</li></ul><blockquote><p>下一篇准备封装一下 <code>OkHttp</code> ,然后将封装之后的 <code>OkHttp</code> 整合到当前框架中,当然了,还是以分页接在为例</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;摘要：在&lt;a href=&quot;http://zengfanyu.top/2017/10/22/MVP2/&quot;&gt;上一篇&lt;/a&gt;中对MVP模式进行了封装，然后通过封装之后的类，实现了一个网络请求，但是请求到网络数据之后，就直接展示到了 &lt;code&gt;View&lt;
      
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Android 当中的 MVP 模式（二）封装</title>
    <link href="http://zengfanyu.top/2017/10/22/MVP2/"/>
    <id>http://zengfanyu.top/2017/10/22/MVP2/</id>
    <published>2017-10-22T14:00:15.000Z</published>
    <updated>2017-10-23T15:04:26.414Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://zengfanyu.top/2017/10/20/MVP1/">Android当中的MVP模式（一）基本概念</a>中，用了一个简单的的登录Demo展示了一下 <code>MVP</code> 模式的基本姿势，虽然项目结构是更加清晰了，但是代码量明显增多了，原来的网络请求操作只用 <code>1</code> 个类可以搞定，现在需要 <code>4</code> 个类，并且每当有不同作用的 <code>model</code> 出现时，我们就需要相应的为他们添加 <code>presenter</code> 层的对象，但是细细查看，这些<code>model</code> 的作用都大体相似，与获取数据相关，类似于网络请求或者是数据库 <code>DAO</code> 的操作，所以此处可以考虑将他们的共性抽取出来，封装成基累，然后子类去继承即可。</p><h2 id="一个简单的网络请求"><a href="#一个简单的网络请求" class="headerlink" title="一个简单的网络请求"></a>一个简单的网络请求</h2><blockquote><p>一个简单的需求：通过 <code>url</code> 获取数据，然后用 <code>Gson</code> 解析成 <code>JavaBean</code>，然后展示到 ListView上。这里使用知乎日报的获取最新消息的 <code>API</code> 接口 <em><a href="https://news-at.zhihu.com/api/4/news/latest" target="_blank" rel="external">https://news-at.zhihu.com/api/4/news/latest</a></em></p></blockquote><p>那么按照普通 <code>MVP</code> 的思路，首先 <code>view</code> 层：</p><pre><code>为了突出重点，当前View层只做一件事情：就是展示获取的数据</code></pre><p><strong><code>ILatestVIew</code></strong></p><p><img src="https://i.imgur.com/gwQBe48.png" alt=""><br>此接口需要一个 <code>String</code> 类型的列表数据，主要是用于给 <code>Adapter</code> 展示用。</p><p><strong><code>LatestViewActivity</code></strong></p><p><img src="https://i.imgur.com/IhXLDsA.png" alt=""></p><p>很简答，就是实现接口。</p><p><strong><code>IRequestLatestModel</code></strong></p><p><img src="https://i.imgur.com/V82ypL1.png" alt=""></p><p>请求服务器端数据的接口</p><p><strong><code>RequestLatestNewsModel</code></strong></p><p><img src="https://i.imgur.com/UUFYYmc.png" alt=""></p><p>使用 <code>okhttp</code> 请求数据，然后将返回的json类型数据传递给 <code>Presenter</code> 层。</p><p><strong><code>ILatestNewsPresenter</code></strong></p><p><img src="https://i.imgur.com/P7FkWJv.png" alt=""></p><p>一个接口用于处理 <code>Json</code> 数据，一个接口用于通知 <code>model</code> 层向服务器发起请求 。</p><p><strong><code>LatestNewsPresenter</code></strong></p><p><img src="https://i.imgur.com/RAUwO46.png" alt=""></p><p>实现接口定义的方法</p><p>其中 <code>HttpUtils</code> 方法如下： </p><p><img src="https://i.imgur.com/OPbiJCZ.png" alt=""></p><blockquote><p>此处 <code>OKhttp</code> 也可以进行封装， 后面再写一篇文章， 专门记录，先暂时简单的使用。</p></blockquote><p>运行之后，点击 <code>button</code>， 即可发起网络请求，运行效果如下：</p><p><img src="https://i.imgur.com/SyvLPrY.png" alt=""></p><p><strong>弊端：</strong></p><p>假设我们现在又有另外的一个需求， 请求知乎日报过往的消息， 对应的 <code>API</code> 接口为<em><code>URL: https://news-at.zhihu.com/api/4/news/before/20131119</code></em>,那么我就需要按照上述的方式，又写一套MVP的代码，最少又得留个类，如此一来，随着需求的增多，代码量会极具增大，但是<strong>多余增加的每层代码所做的事情又大多数相同，只是具体细节不一样</strong>，那么我们可不可以<strong>把每一层要做的事情给抽取出来，封装成基类，然后让子类去继承，去实现</strong>，这样就可以大量减少代码量？ 抱着这个问题，我就来分析一下 <code>MVP</code> 每一层所做的事情。</p><h2 id="以简单网络请求为例，分析-MVP-各层的职责"><a href="#以简单网络请求为例，分析-MVP-各层的职责" class="headerlink" title="以简单网络请求为例，分析 MVP 各层的职责"></a>以简单网络请求为例，分析 MVP 各层的职责</h2><p>以上面请求知乎日报的最新消息为例，分析每一层的职责。</p><h3 id="Model-层"><a href="#Model-层" class="headerlink" title="Model 层"></a><code>Model</code> 层</h3><p><code>Model</code> 角色主要是提供数据的存取功，并且将数据或者是错误信息回调给 <code>Presenter</code> 层。更直白的说，<code>Model</code> 就是封装了数据库 <code>DAO</code> 或者网络获取数据的角色，或者两种数据获取方式的集合。所以它主要的功能是：</p><pre><code>1. 向数据源发起请求2. 取消发起的请求3. 通知 Presenter 处理结果</code></pre><h3 id="Presenter-层"><a href="#Presenter-层" class="headerlink" title="Presenter 层"></a><code>Presenter</code> 层</h3><p>一般是通知 <code>Model</code> 向服务器发起请求，然后接收 <code>Model</code> 层的请求结果，包括成功的数据和错误的信息，同时也负责将处理之后的数据或者是错误信息通知 <code>View</code> 层，由 <code>View</code> 层作展示。所以他的主要功能是：</p><pre><code>1. 通知 Model 层向服务器发起数据请求2. 通知 Model 层取消这次请求3. 接收 Model 层返回的数据4. 接收 Model 层返回的错误信息5. 通知 View 层接收处理之后的结果或者是错误信息</code></pre><h3 id="View-层"><a href="#View-层" class="headerlink" title="View 层"></a><code>View</code> 层</h3><p>此处 View 层的作用就比较专一化，只用于处理 <code>UI</code> 相关的事情，不再负责业务逻辑。主要职责如下：</p><pre><code>1. Loading 状态的展示隐藏2. 接收 Presenter 层处理后的数据3. 接收 Presenter 层处理后的错误信息4. 接收 Presenter 层处理后的服务器拒绝信息</code></pre><blockquote><p>嗯，差不多就是这么多吧</p></blockquote><p>既然将每一层的主要职责总结了出来， 很明显就可以将这些职责「在代码中就是对应的方法」抽象成方法，然后让子类去个性化的实现。</p><h2 id="抽取共性封装网络请求"><a href="#抽取共性封装网络请求" class="headerlink" title="抽取共性封装网络请求"></a>抽取共性封装网络请求</h2><h3 id="Model-层-1"><a href="#Model-层-1" class="headerlink" title="Model 层"></a><code>Model</code> 层</h3><p><strong><code>IBaseModel</code></strong></p><p><img src="https://i.imgur.com/5mI8sPq.png" alt=""></p><p>其中 <code>setMethod</code> 和 <code>setRequestUrl</code> 方法直接在 <code>Presenter</code> 的构造方法中调用，设置好请求的方式和请求的 <code>Url</code> 地址，这样方便 <code>model</code> 层在请求服务器数据时，使用对应的参数，使用对应的请求方式。</p><blockquote><p>此处没有用到 <code>method</code> 是因为知乎日报的最新新闻 API 接口是 Get 方式，不需要参数，所以此处没有根据请求方式来调用不同的请求方法</p></blockquote><h3 id="Presenter-层-1"><a href="#Presenter-层-1" class="headerlink" title="Presenter 层"></a><code>Presenter</code> 层</h3><p><strong><code>IBasePresenter</code></strong></p><p><code>Presenter</code> 层是逻辑控制层，是 <code>Model</code> 层和 <code>View</code> 层的桥梁，对这一层抽取共性进行封装的时候，不能像 <code>Model</code> 层一样，把全部的功能装好好，原因如下：</p><pre><code>1.如果将其全部封装起来，是没办法复用同一个功能模块的，并且会导致部分业务逻辑需要在 view 层中做处理，这样和 MVP 的思想相悖。2.Presenter 层需要处理和 View 层的交互逻辑以及 Model 层返回的数据。</code></pre><p>但是 <code>Model</code> 层是可以的，我是认为，<code>Model</code> 层就是从数据源中拿数据，并且将数据传递给 <code>Presenter</code> 层，所有的 <code>Model</code> 层做的都是这个操作，只是访问数据源的参数不同，数据源类型不同，访问数据源的方法不同而已，所以很明显可以全部抽取出来放基类中，然后各个子类去各自实现。</p><p><img src="https://i.imgur.com/h60avAn.png" alt=""></p><pre><code>1. requestServer 在View层调用的接口，用于通知Model层想服务器发起请求，参数可为空，比如，有些Get方式的请求就不需要参数2. requestSuccess 在Model层调用，通过此方法将服务器返回的数据传递给给Presenter层处理3. cancelRequest 在View层调用，用于通知Model层取消请求4. okHttpError 在Model层调用，当网络请求产生错误的时候5. getModel 在子类中调用，用于拿到Model对象6. getParams 在Model层中调用，此方法用于获取Presenter层处理好的参数</code></pre><p><strong><code>BasePresenter</code></strong></p><p><img src="https://i.imgur.com/NWad6Kf.png" alt=""></p><ul><li><code>public abstract class BasePresenter&lt;Params, Data&gt; implements IBasePresenter&lt;Params&gt;</code>这是一个泛型的抽象类，其中泛型<code>Params</code>是用于<code>model</code>层向服务器发起请求的请求参数，<code>Data</code>是服务器返回的<code>Json</code>类对应的<code>JavaBean</code>类。<p></p></li><li><code>BasePresenter</code>处理了<code>View</code>层和<code>model</code>层中大多数的逻辑，我们要做的就是在子类中实现<code>public abstract void serverResponse(Data data);</code>这个抽象方法就好了。<p></p></li><li><code>public abstract void serverResponse(Data data);</code>这个方法是在用于处理<code>model</code>层返回的结果，然后进行处理之后回调给<code>view</code>层。<p></p></li><li>可以看到<code>46、47、50、51、52</code>行的代码给注释掉了，其实一般情况下这里是不需要注释的，这里是用于判断返回数据的<code>errorNum errorType errorDesc</code>信息的，这么操作，是为了实现如下功能：<font color="#ff0000">若返回的信息有误，则BasePresenter直接回调给<code>View</code>层，如果正确，才会传递给子类</font>。<blockquote><p>上述最后一条，需要对泛型<code>Data</code>在进行一次封装，并且使用上 <code>Gson</code> 的<code>@SerializedName(value = &quot;...&quot;,alternate = {&quot;...&quot;,&quot;...&quot;,&quot;...&quot;})</code>这个注解，并且这里涉及到<font color="#ff0000"><strong>泛型擦除</strong></font>的问题，这一块我还没有很好的解决办法，所以此处没有进行封装。</p></blockquote></li></ul><h3 id="View-层-1"><a href="#View-层-1" class="headerlink" title="View 层"></a><code>View</code> 层</h3><p>还是按照上面分析的 <code>View</code> 层职责来写：</p><p><strong><code>IBaseView</code></strong></p><p><img src="https://i.imgur.com/XnjmUqu.png" alt=""></p><p>到此为止，对 <code>MVP</code> 模式的每一层都写出了对应的基类，有了这件基类作为基础之后，在进行同样的网络请求。</p><h3 id="使用上述封装好的类进行相同的网络请求"><a href="#使用上述封装好的类进行相同的网络请求" class="headerlink" title="使用上述封装好的类进行相同的网络请求"></a>使用上述封装好的类进行相同的网络请求</h3><p><strong><code>LatestNewsModel</code></strong></p><p><img src="https://i.imgur.com/owRmdqS.png" alt=""></p><p><strong><code>LatestNewsPresenter</code></strong></p><p><img src="https://i.imgur.com/BUsyAtq.png" alt=""></p><p>其中<code>Param</code>泛型参数填的是<code>nullable</code>是因为这个请求是<code>get</code>方式，没有涉及到参数。<code>LatestNews</code>作为<code>Data</code>的泛型，主要是用于<code>BasePresenter</code>解析并映射。</p><p><strong><code>ILatestNewsView</code></strong></p><p><img src="https://i.imgur.com/gY7PhQH.png" alt=""></p><p> <code>IlatestNewsVIew</code>接口是继承<code>IBaseView</code>接口的，是因为它需要在<code>IBaseView</code>接口所定义的功能之上，还需要实现将数据展示到列表中这么一个操作，所以添加上了一个<code>showLatestViewTitle</code>方法。</p><p><strong><code>LatestNewsTitleActivity</code></strong></p><p><img src="https://i.imgur.com/2M2FxAO.png" alt=""></p><p>这个类写起来就简单了，跟着接口来， 把之前每一个接口提到的功能给实现以下就可以了。</p><p>顺便贴个 <code>XML</code> 文件：</p><p><img src="https://i.imgur.com/NFcSwWg.png" alt=""></p><p>搞定，实现的效果和上面是一样的。</p><blockquote><p>回过头一看，MMP，这代码量似乎也没有少很多啊，-。- ，没事没事，需求多了就少了~</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>先看看<a href="http://zengfanyu.top/2017/10/20/MVP1/">上一篇</a>中提到的一张图<br><img src="https://i.imgur.com/YiW40TM.png" alt=""><br>此处将MVP模式封装后，MVP的流程图如下：<br><img src="https://i.imgur.com/sNnJ74J.png" alt=""></p><p>后面的文章将使用上面封装的框架，通过扩展 <code>BasePresenter</code> 来增加新的模块。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;http://zengfanyu.top/2017/10/20/MVP1/&quot;&gt;Android当中的MVP模式（一）基本概念&lt;/a&gt;中，用了一个简单的的登录Demo展示了一下 &lt;code&gt;MVP&lt;/code&gt; 模式的基本姿势，虽然项目结构是更加清晰了，但是
      
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（一）基本概念</title>
    <link href="http://zengfanyu.top/2017/10/20/MVP1/"/>
    <id>http://zengfanyu.top/2017/10/20/MVP1/</id>
    <published>2017-10-20T12:37:15.000Z</published>
    <updated>2017-10-23T15:04:38.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要使用MVP"><a href="#为什么要使用MVP" class="headerlink" title="为什么要使用MVP"></a>为什么要使用MVP</h2><p>在传统的Android开发中，我们一般是使用MVC模式进行开发的。</p><p></p><h3 id="传统MVC模式介绍："><a href="#传统MVC模式介绍：" class="headerlink" title="传统MVC模式介绍："></a>传统MVC模式介绍：</h3><ol><li>View: 视图层，对应xml文件</li><li>Controller: 控制层，对应Activity和Fragment层，进行数据处理</li><li>Model：实体层，负责获取实体数据</li></ol><p>采用MVC模式的一个最大的弊端就是xml作为View层视图能力实在太弱，所以一般情况下我们都是通过Controller层来辅助处理一些视图的。这样的结果就导致Controller既作为控制层的同时又承担了View层的大部分功能，采用MVC模式往往会导致Activity和Fragment中的代码非常复杂。我们将Android中采用的MVC模式称为MV模式更加恰当。</p><h3 id="MVP模式介绍："><a href="#MVP模式介绍：" class="headerlink" title="MVP模式介绍："></a>MVP模式介绍：</h3><ol><li>View: 视图层，对应xml文件与Activity/Fragment</li><li>Presenter: 逻辑控制层，同时持有View和Model对象</li><li>Model: 实体层，负责获取实体数据<p></p></li></ol><p>MVP模式的流程图如下：<br><img src="https://i.imgur.com/YiW40TM.png" alt=""></p><h3 id="采用MVP模式的优势是："><a href="#采用MVP模式的优势是：" class="headerlink" title="采用MVP模式的优势是："></a>采用MVP模式的优势是：</h3><ol><li>把业务逻辑抽离到Presenter层中，View层专注于UI的处理。</li><li>分离视图逻辑与业务逻辑，达到解耦的目的。</li><li>提高代码的阅读性。</li><li>Presenter被抽象成接口，可以根据Presenter的实现方式进行单元测试。<br>可拓展性强。<p></p></li></ol><h3 id="采用MVP模式的缺点："><a href="#采用MVP模式的缺点：" class="headerlink" title="采用MVP模式的缺点："></a>采用MVP模式的缺点：</h3><ol><li>项目结构会对后期的开发和维护有一定的影响。具体视APP的体量而定。</li><li>代码量会增多，如何避免编写过多功能相似的重复代码是使用MVP开发的一个重点要处理的问题。</li><li>有一定的学习成本。<br>综上所述，在Android上采用MVP模式的优势是：大大优化代码的维护性与拓展性的同时对代码进行深度解耦，使各个层级的分工更加明晰。<p></p></li></ol><h2 id="一个简单的应用"><a href="#一个简单的应用" class="headerlink" title="一个简单的应用"></a>一个简单的应用</h2><p>模拟Android中登陆的功能</p><p></p><h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><p><img src="https://i.imgur.com/TbM6JQs.png" alt=""></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://i.imgur.com/UgftH96.png" alt=""></p><p></p><p>从上图中可以看到，一个简单的基于 MVP 的项目，最少也需要创建 6 个文件夹，分别是 M、V、P 的接口和它们各自的实现类，其中 LoginActivity 就是 View 层的具体实现，它只需要负责处理 UI 的逻辑，而业务相关的逻辑都抽象到 LoginPresenter 中，这样就避免了传统开发中 Activity 、Fragment 既处理 UI 又负责业务逻辑的情况。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>ILoginView：</strong></p><p><img src="https://i.imgur.com/oZw0oAl.png" alt=""><br>    view层只负责和 UI 相关的操作，那么在这个小 Demo 中，和 UI 相关的操作有如下几点：</p><pre><code>1. 从EditText中拿到用户输入的userName2. 从EditText中拿到用户输入的password3. 在登录过程中需要展示一个progressbar，登录过程结束之后隐藏这个progressbar4. 展示登录成功后的view5. 展示登录失败后的view</code></pre><p>综上五个操作，所以有了ILoginView中的五个接口</p><p><strong>LoginActivity：</strong></p><p><img src="https://i.imgur.com/BldAn6r.png" alt=""></p><p>当点击登录按钮时，会将请求服务器合适账号密码这个过程交给presenter层去处理，所以在LoginActivity里，会有preserent的引用。</p><p><strong>ILoginPersenter：</strong></p><p><img src="https://i.imgur.com/qaDLXA2.png" alt=""><br>    presenter层处理业务逻辑，有如下几点:</p><pre><code>1. 负责接收model的返回结果并且处理2. 将处理的结果以特定的形式，传递给view层，让view层去展示3. 通知model层去向数据源请求数据</code></pre><p><strong>LoginPresenter：</strong></p><p><img src="https://i.imgur.com/aeBpO2l.png" alt=""></p><p>因为presenter层相当于一个中间交互人，所以它必须要持有对 view 、model 层对象的引用。</p><p><strong>ILoginModel：</strong></p><p><img src="https://i.imgur.com/ov0me7r.png" alt=""><br>    model负责数据的存取：</p><pre><code>在这个Demo中，数据的存取使用一个线程和简单的字符串判断来模拟。</code></pre><p><strong>LoginModel：</strong></p><p><img src="https://i.imgur.com/bJXqwgD.png" alt=""></p><p>因为model层需要将获取的数据传递给presenter层去做处理，所以此处也需要持有对presenter层的引用。</p><p>这样一来就成功的将简单的登录案例，由MVP模式来实现了,</p><ul><li>在 LoginActivity 中处理的都是和 UI 相关的，</li><li>在 LoginPresenter 中处理的是业务的逻辑，</li><li>在 LoginModel 中处理的是网络数据获取。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p> <strong>Presenter—交互中间人</strong></p><p> <font color="#ff0000">主要作为沟通 View 和 Model 的桥梁</font>，它从 Model 层检索数据后，返回给 View 层，使得 View 和 Model 之间没有耦合，也将业务从 View 角色上抽离出来。</p><p> <strong>View—用户界面</strong></p><p>View 通常是指Activity、Fragment或者某个 View 控件，<font color="#ff0000">它含有一个 Presenter</font> 成员变量。通常 View 需要实现一个逻辑接口，<font color="#ff0000">将 View 上的操作转换给 Presenter 进行实现，最后，Presenter 调用 View 逻辑接口将结果返回给 View 元素</font>。</p><p><strong>Model—数据的存取</strong></p><p>对于一个结构化的 APP 来说，Model角色主要是提供数据的存取功能。Presenter 需要通过 Model 层存储、获取数据，Model就想一个数据仓库。<font color="#ff0000">更直白的说，Model 就是封装了数据库 DAO 或者网络获取数据的角色，或者两种数据获取方式的集合</font>。</p><blockquote><p>MVP 并不是一个标准化的模式，它有很多种实现方式，也可以根据自己的需求去修正MVP的实现方式，可以随着 Presenter 的复杂程度而变化，只要保证是通过 Presenter 将 View 和 Model 解耦，降低类型复杂度，各个模块单元可以独立测试、独立变化，这就是正确的方向。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要使用MVP&quot;&gt;&lt;a href=&quot;#为什么要使用MVP&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用MVP&quot;&gt;&lt;/a&gt;为什么要使用MVP&lt;/h2&gt;&lt;p&gt;在传统的Android开发中，我们一般是使用MVC模式进行开发的。&lt;/p&gt;&lt;p&gt;&lt;/
      
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zengfanyu.top/2017/10/14/hello-world/"/>
    <id>http://zengfanyu.top/2017/10/14/hello-world/</id>
    <published>2017-10-14T15:40:28.953Z</published>
    <updated>2017-10-21T16:06:55.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="To-be-a-better-man"><a href="#To-be-a-better-man" class="headerlink" title="To be a better man"></a>To be a better man</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello , 个人博客搭好了，老规矩，先来个 Hello World！，然后，撸起袖子就是干！</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;To-be-a-better-man&quot;&gt;&lt;a href=&quot;#To-be-a-better-man&quot; class=&quot;headerlink&quot; title=&quot;To be a better man&quot;&gt;&lt;/a&gt;To be a better man&lt;/h2&gt;&lt;figure c
      
    
    </summary>
    
    
  </entry>
  
</feed>
