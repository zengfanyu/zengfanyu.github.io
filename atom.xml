<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CODE FRAMER BIGZ</title>
  
  <subtitle>Every little makes a mickel</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zengfanyu.top/"/>
  <updated>2018-12-31T12:50:20.230Z</updated>
  <id>http://zengfanyu.top/</id>
  
  <author>
    <name>BIGZ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018 年终总结 + 12 月份面试总结</title>
    <link href="http://zengfanyu.top/2018/12/31/2018summary/"/>
    <id>http://zengfanyu.top/2018/12/31/2018summary/</id>
    <published>2018-12-31T12:32:16.000Z</published>
    <updated>2018-12-31T12:50:20.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018-12-面试问题记录"><a href="#2018-12-面试问题记录" class="headerlink" title="2018.12 面试问题记录"></a>2018.12 面试问题记录</h1><h2 id="拼多多"><a href="#拼多多" class="headerlink" title="拼多多"></a>拼多多</h2><h3 id="一面「现场面」"><a href="#一面「现场面」" class="headerlink" title="一面「现场面」"></a>一面「现场面」</h3><ol><li><p>设计一个全平台唯一的id</p></li><li><p>a b c 三个库同时引入了不同版本的 d库，然后 e 需要引入 a b c 三个库，如何解决兼容性的问题「如果是通过gradle方式远程依赖，可以用exclude关键字去剔除不同版本的包，以某一个版本的为准」？</p></li><li><p>ThreadLocal</p></li><li><p>进程之间通讯的方式</p></li><li><p>Actitivty旋转之后的生命周期怎么走</p></li><li><p>HashMap 和 ConcurrentHashMap</p></li><li><p>ArrayList 和 LinkedList， ArrayList 怎么扩容的</p></li><li><p>输入一个域名，它整个的流程？如何优化这个流程？ 域名劫持知道吗？</p></li><li><p>算法一： String 类型的List，去掉非法字符  “” 和 null，保证相对顺序不变</p></li><li><p>算法二： 在算法一的基础上，如何去掉重复的字符</p></li></ol><h3 id="二面「现场面」"><a href="#二面「现场面」" class="headerlink" title="二面「现场面」"></a>二面「现场面」</h3><ol><li><p>项目中为什么使用webrtc，或者你跟我讲讲webrtc是什么，它做了哪些工作去保证低延迟？</p></li><li><p>http协议了解吗？ 讲一下它的作用</p></li><li><p>http协议是怎么分配端口号的</p></li><li><p>http1.1 和 1.0的区别</p></li><li><p>已经有了TCP，它本来就可以传输数据，为什么还需要HTTP？</p></li><li><p>TCP 和 UDP的区别，为什么TCP是可靠的？他是怎么完成的</p></li><li><p>项目当中日志sdk是怎么做的？打印日志格式化怎么格式化？ 怎么打印的行号？ 怎么传到服务端？</p></li><li><p>上传SDK项目是怎么做的？SDK的流程？怎么实现并发的？</p></li><li><p>算法，求一个二叉树的高度 「递归」</p></li><li><p>我们公司的工作时间你了解吗？ 能接受吗？ 目前公司的工作时间是怎么样的？</p></li><li><p>你现在的薪资？期望的薪资？</p></li></ol><h2 id="哔站"><a href="#哔站" class="headerlink" title="哔站"></a>哔站</h2><h3 id="一面「现场面」-1"><a href="#一面「现场面」-1" class="headerlink" title="一面「现场面」"></a>一面「现场面」</h3><ol><li><p>毕业时间一年多，不长呀，为啥跳槽呀？这都年底了</p></li><li><p>在学校学哪些东西「软件、硬件、电子啥都学」？哪儿学的Android开发「自学」？</p></li><li><p>数据结构、操作系统、计算机网络了解吗「了解，一直在学习」?</p></li><li><p>HashMap用过吗？讲一下hashcode怎么计算，比如我给你一个类A，他有三个成员变量 String s, int i, boolean b, 怎么计算hashcode？</p></li><li><p>如果我只用string s 去计算 hashcode，有什么问题吗「这儿我提到了如果不同的 A 类， s相同而其他变量不相同，会导致hash碰撞多，并且散列不均匀，导致map的插入在同一个链上，最终影响查找效率，针对这一点hashmap在java1.8增加了红黑树结构」？</p></li><li><p>为什么当链表长度超过8就转换成红黑树「查找时间复杂度 o(n) 和 o(logn) 的区别」？</p></li><li><p>为什么是转换成红黑数查找就是 o(logn)了 「二分查找，分治思想」，普通二叉树可以么「不行，普通二叉树不平衡，不能保证平均查找效率」？</p></li><li><p>SparseArray 知道么？它拿来干嘛的「google 建议替换 hashmap key 为 Integer情况」？为什么要用它去替换？它的数据结构是怎么样的？假设现在不考虑哈希碰撞和散列不均匀，10000个数据，你用hashmap还是sparseArray「我说sparseArray， 提到了对于 Integer int 的装箱和解箱操作」？</p></li><li><p>你在开发中怎么用线程「runnable callable Future FutureTask ThreadPoolExecutor」？线程池怎么用？如何选择线程池，或者说它的参数怎么配置？假设我现在要做网络请求，高并发的，你怎么去配置线程池的参数或者说怎么使用Collections的工厂方法去创建「我从OkHttp源码中使用的是 核心线程数为0 最大线程数为 Integer 最大值，超时时间 60s 这里来回答的，采用这种配置，或者是使用 Collections.newCacheThreadPool， 从高并发和超时时间这里入手」？</p></li><li><p>HandlerThread什么原理？它和Thread有什么区别「Looper角度回答」？Looper是什么？普通线程有Looper吗？Looper怎么用「这里提到了ThreadLocal」？</p></li><li><p>ThreadLocal是干嘛的？在哪儿用的？怎么用？</p></li><li><p>OkHttp知道吗？用过吗？源码了解吗？画个流程图？你觉得源码设计最经典的是什么「责任链模式」？有哪些拦截器？调用顺序？普通interceptor和networkIntercptor有什么区别？怎么选择？连接网络在哪个拦截器？</p></li><li><p>手写一个单例看看「volatile + 双重锁模式」。为什么这里要有volatile「从可见性和指令重排序角度分析」？为什么有两个判断？你用的synchronized代码块的this表示什么？如果我就以饿汗式去实现，它是安全的吗「这个问题没回答上，于是面试官换了一个问法」？这个static得成员变量在哪里初始化的「static是属于这个类的， 随类一起初始化」？具体是在哪儿呢「一脸懵逼，不知道」？了解过ClassLoader吗「听说过，不了解，面试官说静态的初始化在ClassLoader当中，是线程安全的，所以说，这种形式是可以保证安全的」？</p></li></ol><h3 id="二面「现场面」-1"><a href="#二面「现场面」-1" class="headerlink" title="二面「现场面」"></a>二面「现场面」</h3><ol><li><p>WebRTC这个项目你们几个人做？你在WebRTC 这个项目中的具体工作内容？</p></li><li><p>你入职一年以来主要是在做哪个项目？</p></li><li><p>WebRTC 这个项目我看Android端主要是你在做的，能说说SDK大概的架构吗？</p></li><li><p>WebRTC 这个我看你做了重连模块？为什么要做这个模块？具体怎么做的？</p></li><li><p>现在写C++有困难吗？</p></li><li><p>你们这个视频上传的主要过程？</p></li><li><p>为什么有这个日志上传的SDK，它主要做什么？</p></li><li><p>。。。后面的时间太久，记不住了。</p></li></ol><h2 id="声网"><a href="#声网" class="headerlink" title="声网"></a>声网</h2><h3 id="一面「电话面」"><a href="#一面「电话面」" class="headerlink" title="一面「电话面」"></a>一面「电话面」</h3><ol><li><p>自我介绍下自己</p></li><li><p>为什么这个时候跳槽？</p></li><li><p>WebRTC 这个项目你们几个人做，分工是怎样的？</p></li><li><p>WebRTC 视频会议系统架构是怎么样的？项目的细节，房间流数目怎么限制的？分辨率怎么设置的？码率是多少？屏幕流时怎么采集的？</p></li><li><p>你们WebRTC应该只是在国内用，那你们怎么进行连接的呢「ICE STUN + TURN」？</p></li><li><p>Android中多进程有哪些方式「Messenger、Socket、ContentProvider、文件、AIDL」？AILD的底层实现是什么「Binder」？Binder的工作原理？</p></li><li><p>Java GC 了解么「描述了一下Java运行时的内存分区，几种GC算法引用计数、停止复制、标记清除、分代收集」？ </p></li><li><p>View SurfacView GLSurface 的区别了解吗「这个不知道。。。」？</p></li><li><p>TCP 和 UDP 区别「面向连接、可靠、字节流； 无连接、不可靠、用户数据报」？TCP做了哪些操作保证连接可靠？ UDP 使用的场景「WebRTC 中视频数据的分发」？</p></li><li><p>你觉得你工作一年多遇到最大的挑战？</p></li><li><p>你觉得你喜欢编程吗？</p></li><li><p>多媒体流的格式？</p></li><li><p>硬解软解这些有了解吗？</p></li></ol><h3 id="二面「现场面」-2"><a href="#二面「现场面」-2" class="headerlink" title="二面「现场面」"></a><strong>二面</strong>「现场面」</h3><blockquote><p>约得下午两点，由于对路况不熟悉，所以提前出发了，一点多一点就到了，面试官都去吃饭了，于是一个阿姨联系HR之后，给了一份笔试题我先做做。</p></blockquote><p>笔试题的内容主要包括三块：</p><p>Android的基础知识、数据结构和算法的题目、两道程序题「看代码写出运行结果」、JNI相关题目、计算机网络相关。后来做完题面试官过来了，就正式开始了。</p><ol><li><p>自我介绍一下</p></li><li><p>Android开发是怎么学习的？</p></li><li><p>现在工作中主要是做哪一块？</p></li><li><p>工作中有涉及到SDK技术支持吗？还是主要负责编码不做技术支持？</p></li><li><p>你们SDK用Java写的，没有其他的语言的需求吗？你出了Java还会哪一门语言？</p></li><li><p>对于Android程序的运行原理了解吗？就是在桌面上点击一个app图标只有，到app启动这一系列的过程？</p></li><li><p>JNI 和 NDK这一块了解吗？</p></li><li><p>Android 当中常用的异步方式有哪些？</p></li><li><p>Handler的运行机制？ThreadLoca？Looper？HandlerThread？</p></li><li><p>按照你的描述，你平时开发应该是Java用的比较多，JMM了解吗？Java运行时内存区域划分？volatile synchronized？一个类的实例在内存空间的哪儿？方法局部变量存在内存空间的哪一块？类的成员变量存在类的哪一块？</p></li><li><p>abstract 和 interface？语法上的区别？使用上的区别？</p></li><li><p>WebRTC这个项目你主要是做哪一块？详细到WebRTC的一些使用细节</p></li><li><p>你用过我们的实时视频会议的app吗？你觉得跟你们的app比起来区别在哪？</p></li></ol><blockquote><p>二面应该是对我个人做一个大概的定位，包括技术广度和深度。</p></blockquote><h3 id="三面「现场面」"><a href="#三面「现场面」" class="headerlink" title="三面「现场面」"></a>三面「现场面」</h3><blockquote><p>面试官自我介绍是iOS的负责人，应该是属于交叉面吧。主要聊的是RTC项目细节</p></blockquote><ol><li><p>你们WebRTC项目你主要做哪一块？怎么分工的？</p></li><li><p>你刚才说道日志记录上传模块，你是怎么做的「分SDK，策略设计模式、主动上报、被动上报」？</p></li><li><p>哪种情况下被动上报「结合RTC项目描述了一下」？</p></li><li><p>web api 、socketio、peerconnetion 的重连逻辑细节。</p></li><li><p>按照你刚才的描述，如果现在是有wifi网络的，但是因为wifi的速度不快，没有成功连接，那么这时候日志还去上报，那么会不会导致网络更差？</p></li><li><p>日志存在哪儿「本地文件」？多大「5M」？每次上报都传5M「不一定，要看上报时刻的大小，并且还会做压缩」？超过5M怎么办「删除文件重新写」？会不会刚好删除了文件，上吧之后是一个空的日志文件，或者说关键记录被删除了然后正好上报了「理论上会出现」？怎么解决「另开一个backup路径，这个路径用LRU算法，限制为10M，原有日志路径下的日志需要删除时，转移到此处，然后在上报时刻一起压缩上报」？</p></li><li><p>日志这一块有专业的工具吗「demo的app层用到了云迹，后期接入方应该也会用这个工具」？那SDK日志你们是怎么分析的「上报日志、后台获取、人工定位分析」？你们一次进入频道三客户端正常交互，然后离开频道，这个过程日志有多少「几千行应该有」？说说你具体的分析过程，比如我现在进入频道，应该看到3个人，但是只看到两个，你拿到一个全量的日志，怎么分析？</p></li><li><p>你们RTC项目对房间中流数量有限制吗？NAT穿透这块你们是怎么做的？JNI层你有涉及到吗「面试前两天，刚好是弄了一个ubuntu系统，把RTC的Android端源码拉下来成功编译了，就这个过程聊了一阵子」？编译出来之后，你有研究它的java层或者底层代码吗「刚编译出来就过来面试了。。平时开过摄像头画面采集这一块的java层代码」？</p></li><li><p>算法题，判断链表是否成环「两指针ab，a一次走一步，b一次走两步，判断是否指向同一个节点」？两指针走任意不同步数可以吗？证明你的结论</p></li><li><p>你有什么要问我的「问了一些声网的业务，然后问了一下低延时实时视频通讯声网做到哪个程度了」？</p></li></ol><h2 id="头条"><a href="#头条" class="headerlink" title="头条"></a>头条</h2><h3 id="一面-二面「视频面」"><a href="#一面-二面「视频面」" class="headerlink" title="一面  二面「视频面」"></a>一面  二面「视频面」</h3><blockquote><p>头条问的问题太多了，记不清哪个是一面问的哪个是二面问的了，此处就统一记录了。</p></blockquote><ol><li><p>自我介绍一下</p></li><li><p>视频上传这个项目主要是干嘛的？</p></li><li><p>视频上传具体的流程？</p></li><li><p>如果是分段上传， 两个客户端传同一个文件，服务端怎么决策，各个客户端传的字节范围？</p></li><li><p>TCP 和 UDP 的区别？</p></li><li><p>TCP 和 UDP 能不能监听同一个端口号？</p></li><li><p>TCP 和 UDP 是运行在 TCP/IP模型的哪一层？</p></li><li><p>TCP 和 UDP 的头部大小，字段？</p></li><li><p>TTL 是什么？</p></li><li><p>日志上报SDK只要是干嘛用的？</p></li><li><p>日志上报SDK如何进行上传？</p></li><li><p>日志上传上传的文件有多大「5M」？有没有压缩「项目中居然没有压缩。。。面试官说他觉得不压缩不行」？</p></li><li><p>日志上传上传是什么策略？用什么进行上传的？ 如果网络断开怎么办「这一块是用handler将一个runnable post到子线程去上传，并且监听设备网络连接状态，如果网络断开，会将这个runnable给缓存起来，当网络连接上时，在尝试上传。回答的时候错说成将这个5M的文件给缓存到内存中了」？</p></li><li><p>websocket 和 http 区别？</p></li><li><p>websocket 的升级过程？</p></li><li><p>webRTC 你了解到哪个层面？底层音视频编解码了解过吗？</p></li><li><p>算法 二叉树的非递归形式的前序遍历</p></li></ol><p>卒。其中共有两个问题，面试官指出来他觉得不太好，第一个是问题4，他问我服务端怎么决策让那个客户端上传哪一段数据？我说不太清楚，我是直接调那个webapi接口，它返回的那个范围我就通过RandomAccessFile去读哪个字节。他说我对跟我业务相关的上下游的基础逻辑不太清楚，不利于问题的排查。<br>第二个问题是12，他说我负责做上传的，但是在实际上传过程没有做压缩处理，他觉得不行，5M文件太大，会占用太多资源。这一块我们wiki上其实是说了要压缩成zip格式的，但是这块是同事开发的，我做了二次开发，优化了一下代码，当时发现没有压缩，问过同事，他说也可以传，哎，自己就没太多关注，后来回公司后，马上把这块做了压缩，压缩后的大小是之前的1/16。。。</p><h1 id="面试之后的思考"><a href="#面试之后的思考" class="headerlink" title="面试之后的思考"></a>面试之后的思考</h1><p>最近一共面了4家公司，对于我这么一个工作经验只有一年半的候选人来说，面试官都特别注重基础的问题，比如Android相关的源码分析「异步方式、线程池、消息机制」、Java语言相关「JMM、线程安全、GC、线程安全集合、线程同步方法」、数据结构「HashMap、SynchronizedHashMap、ConcurrentHashMap、ArrayList、LinkedList。。」、计算机网络「HTTP、TCP、UDP、IP、WebSocket、DNS。。」。其次就是对于我这一年半工作内容提问，具体到细节如何实现，在现有基础上的优化，包括我负责的模块相关上下游的问题，用于考察我对于项目的整个系统了解的程度。</p><p>在这一段时间的面试中，我发现了自己身上的一个很明的短板：<strong>编码语言掌握的过于单一，工作中只涉及到Java的编程。</strong>上述四家公司，几乎都问道了我会哪些编程语言，<strong>能不能做C/C++的开发，有没有接触过JNI</strong>，但是就目前来说，我确实在这一块是非常欠缺的。其次在声网的面试当中，我认识自己做的WebRTC项目主要是在SDK API 的封装加上应用层app开发，并没有深入到音视频的底层当中去，面试官建议如果想走音视频这一块，可以多了解一些音视频的协议、包括编解码、视频采集、渲染等相关的知识，然后学习一些开源的项目。</p><h1 id="2018年的总结"><a href="#2018年的总结" class="headerlink" title="2018年的总结"></a>2018年的总结</h1><p>2018 是我的本命年，24岁了，工作一年半「用某人的话说，就是典型的三无人员，没车没房没老婆。。哈哈哈」，在去年这个时候，本来也是想写一个年终总结的，但是去年一年没干什么正经事，上半年忙于春招、实习、论文，毕业之后来到上海没两天，跑去南京培训三个月，再回上海就开始正式熟悉部门的项目，开始干活，于是去年就没有写年终总结，在今年的最后一天，睡到自然醒之后，煮了个饺子吃饱肚子，开始把这一个月的面试总结一下，顺便总结一下2018这一年了。</p><h2 id="工作学习方面"><a href="#工作学习方面" class="headerlink" title="工作学习方面"></a>工作学习方面</h2><p>今年一年基本上是接触了部门当中所有的项目了，包括五个SDK，主要的精力是放在 WebRTC 的视频会议 SDK 上，这个项目是从去年十一月份开始的，一直做到现在，期间发生了一些人员动荡，所以中断了一段时间，后来项目重新启动之后，前后端架构调整，又开始了各种折腾。不过说实话，我还是挺喜欢这种感觉的，因为每天都很明确自己需要干什么。有几个SDK没能接触到真正含金量高的底层，一直在做 API 的包装和 DEMO 的实现，很是遗憾。</p><p>到今年下半年好多一起入职的应届生同事们都开始陆续离职，包括我的一位大学同学和一位高中同学，那段时间其实我也很迷茫，反复思考自己要不要也离职，后来综合各方面的因素，决定留下来，2018 年底或者是 2019 年初在考虑跳槽，然后在准备四个多月后，加上身边一些事情的影响，决定在 12 月开始面试，没能够去心仪的那一家公司。</p><p>总结一下今年做的一些琐事：</p><ol><li><p>在被公司设备蹂躏了一年之后，在今年 8 月份决定买一台 Mac Book Pro 工作学习用，没想到没高兴一阵子，就把它摔的不忍直视。<br><img src="https://i.imgur.com/bRafZBX.jpg" alt=""></p></li><li><p>用 Hexo 搭了一个博客，今年一共写了 30 篇，不过从 8 月分换了 Mac 以来，没有重新在 Mac 上搭环境，一些总结的笔记也就没有传到 Hexo 上「可能是天道有轮回，用了不到四个月的 Mac ，被我摔地上，A 面和 C 面摔了一个大凹槽，丑死。。不过幸好屏幕没破，还可以用。」，所以我决定在今年的最后一天，在 Mac 上把 Hexo 的环境搭起来，接着写博客。学习 MarkDown 语法，配合 Typora 写博客，简直不要太爽。<br><img src="https://i.imgur.com/VDCdclE.png" alt=""></p></li><li><p>花了一段时间和团队测试学习抓包工具 WireShark、Charle、PostMan的使用，感觉这些工具真的是挺能提高效率的，然后会把一些书本上的理论知识在这些工具上真正的展示出来，比如说 TCP 三次握手 四次挥手、WebSocket 的连接请求升级、HTTPS 的握手过程在 WireShark 上看的清清楚楚。</p></li><li><p>年初对 MVP + RxJava + Dagger + Retrofit + OkHttp 这种模式的应用很感兴趣，于是花了好长一段时间去学习相关的知识，然后在博客中总结，并且按照这种模式，写了一个资讯类的应用。</p></li><li><p>年初说要系统的学习 Java 当中的 24 种设计模式，并且在 GitHub 上开了一个 Repo 专门提交代码，并且在博客中用文章记录。这个事情呢最后是没有坚持下来，只学习了 桥接、代理、适配器、责任链、简单工厂、工厂方法、抽象工厂方法这几种。后面 RTC 项目自己接手后，对于一个全新的东西，自己不了解更多时间放到这一块了，当然，这不是我半途而废的理由。</p></li><li>RTC 这个项目和网络这一块联系很紧密，WebAPI 用的是 OkHttp 库请求，长连接用的是 SocketIO 库，视频数据发送底层用的是 UDP 协议，所以今年把HTTP 、TCP、UDP、WebSocket 协议好好学习了一下，并且在日常工作中处处能体现出来这些之前在学校中完全没在意的课程的重要性。越发感觉在读书时候学的那些课程的重要性了。</li></ol><ol><li><p>看了一段时间的网络请求库 OkHttp 、老牌图片加载库 Universal-Image-Loadler、新晋图片加载库 Glide的源码，看了下 JDK 当中一写类源码： ConcurrentHashMap、SynchronizedHaahMap、LinkedBlockingQueue、LinkedHahsMap「LRUCahce 的底层实现」等等。</p></li><li><p>去了一趟 Google 开发者大会，感受了一下巨厂的技术氛围，顺便在从 Google 开发者大会回来之后决定，是时候开始准备复习面试了。<br><img src="https://i.imgur.com/gYvv9B9.jpg" alt=""><br><img src="https://i.imgur.com/TYeXRQx.jpg" alt=""></p></li><li><p>用 XMind 做了一个思维导图,展开后是特别大的一张思维导图，零零散散做了四个月的时间，涉及到 Java 基础、Android 基础、计算机网络、数据结构、设计模式、Git、SDK 开发的一些总结、项目总结等，在 12 月的面试当中验证，面试官问的问题很多在我思维导图中以及记录过了。所以我准备后期持续跟新这张思维导图，增加不同的模块。<br><img src="https://i.imgur.com/lbGA4nC.png" alt=""></p></li><li><p>看了几本书《Thinking In Java》 这本书是大三为了准备秋招买的，后来带来上海后，一直放着没看了，今年拿出来好好看了下；《图解HTTP》跟漫画一样的一本书，用来入门 HTTP 协议还是挺不错的；《Android 开发艺术探索》 Android面试宝典，之前读书时候 IPC 这个章节感觉看不懂，今年硬是把它给啃下来了， 不过还有一个四大组件的启动流程和各种ServerManager的交互这一章没看。《Gradle 权威指南》是因为做SDK经常要打包一些 aar jar 等各种包看完之后对于Gradle的一些基本操作有了了解，顺便学了一下 Groovy 这个脚本语言，在 gradle 文件中和 java 配合写一些脚本还是可以的；《WebRTC 权威指南》看的时间最长的一本书了，今年主要精力在做WebRTC的项目；《Java并发性和多线程》极客学院的 wiki 上下载，《Java并发编程实战》实战，这两本书是因为下半年做项目，遇到的多线程问题没解决，导致项目延期，后来老大亲自出手来改的bug，后来决定好好学习这一块的知识，所以买回来看的。</p></li><li><p>还有好几本书没来得及看，《Effective Java》也是大三为准备秋招买回来的书；《鸟哥的Linux私房菜 基础学习篇(第三版)》《 深入理解Java虚拟机：JVM高级特性与最佳实践（第2版）》这两本书是当时和《Java并发编程实战》一起凑满减买的，也没来得及看。《Primer C++》都是眼泪。</p></li><li><p>周末有空做过一阵子外包活，挣到了几万块钱，但是做了一段时间之后发现，在经济上是会有一定的回报，但是占用时间确实过多，综合各方面因素，后面就没有接着做了。</p></li><li><p>12 月份的面试发现自己在技术方面的严重短板，掌握的编码语言过于单一，只会 Java， 但是做 Android 音视频这块，底层更多的需要的是 C/C++ ；日常工作只涉及到 app 、sdk 的开发，关于音视频的底层只有基础的认知没有深入的了解，比如各种编解码方式、各种容器封装格式、多媒体流协议、等等。 即使后面做其他的，C/C++ 也是必须要掌握的呀。对于面试的结果，五五开吧。</p></li></ol><h2 id="生活方面"><a href="#生活方面" class="headerlink" title="生活方面"></a>生活方面</h2><p>生活方面今年这一年实在是很单调，工作日上班、周末休息睡觉，不过学习了新技能，有收获，也有一些遗憾。</p><ol><li><p>在家了几个月的饭，带到公司去吃，虽然是几个简单的菜，不过也算是会做饭的人了，哈哈哈</p></li><li><p>夏天坚持了三个月的锻炼，买了个瑜伽垫，每周末去跑步，体重一度降到 132 斤，不过冬天又反弹回来了。</p></li><li><p>可以一个人逛超市，吃火锅，看电影，也算是新技能了。</p></li><li><p>团队来了一些新的小伙伴，都是同龄的，每天工作算是比较开心了。</p></li><li><p>学习了一些投资理财方面的知识，在支付宝上买了几个基金练练手。</p></li><li><p>今年没能够出去旅游一次，很大的遗憾，一直想去找成都的大兄弟耍耍，又因为各种原因没去成。</p></li></ol><h2 id="2019TODOList"><a href="#2019TODOList" class="headerlink" title="2019TODOList"></a>2019TODOList</h2><p>经过去年的教训，Flag 不能立太多。</p><ol><li><p>学 C/C++；</p></li><li><p>学 python；</p></li><li><p>把剩下几本书看完《Effective Java》、《 深入理解Java虚拟机：JVM高级特性与最佳实践（第2版）》、《鸟哥的Linux私房菜 基础学习篇(第三版)》、《Primer C++》；</p></li><li><p>坚持写博客</p></li><li><p>在新公司好好干；</p></li><li><p>办一张健身卡，坚持锻炼；</p></li><li><p>每星期给爸妈打一次电话，每个月给爷爷奶奶打一次电话，给小王把那几个色号的口口红给买全。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018-12-面试问题记录&quot;&gt;&lt;a href=&quot;#2018-12-面试问题记录&quot; class=&quot;headerlink&quot; title=&quot;2018.12 面试问题记录&quot;&gt;&lt;/a&gt;2018.12 面试问题记录&lt;/h1&gt;&lt;h2 id=&quot;拼多多&quot;&gt;&lt;a href=&quot;#拼多
      
    
    </summary>
    
      <category term="年终总结" scheme="http://zengfanyu.top/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="http://zengfanyu.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>记录 SDK 对外输出时碰到的两个问题</title>
    <link href="http://zengfanyu.top/2018/08/18/debug/"/>
    <id>http://zengfanyu.top/2018/08/18/debug/</id>
    <published>2018-08-18T10:00:16.000Z</published>
    <updated>2018-08-18T10:24:30.519Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/xUBT0kU.png" alt=""></p><p>摘要：compile provided 的运用，不同 moudule 之间依赖本地库和远程库的区别.</p><a id="more"></a><font face="黑体"><p>记录一下最近对接 SDK 碰到的一些问题，后面再次碰到时能够快速结局。</p><h2 id="问题一-关于compile、provided"><a href="#问题一-关于compile、provided" class="headerlink" title="问题一 关于compile、provided"></a>问题一 关于compile、provided</h2><p>背景：由于 SO 冲突的原因，我们对外提供的 SDK 现在需要从原来的 aar 形式改为 Jar + SO 的形式，假设我们统一对外提供的 SDK 叫 A.aar，  A 在内部会依赖 SDK B.aar 和 So 库。</p><p>先复习一下 aar 和 jar 的压缩文件结构：</p><ul><li>aar 结构</li></ul><p><img src="https://i.imgur.com/QHS11UH.png" alt=""></p><p> res 中放置的是资源文件<br>libs 中放置的是 jar<br>jni 中放置的是 so</p><ul><li>jar 结构</li></ul><p><img src="https://i.imgur.com/8yX4a1v.png" alt=""></p><p>里面就是 Library 的包结构以及类的 CLASS 文件。</p><p>一开始我<strong>把 SDK B 打包成 B.jar，然后在 SDK A 中依赖 B.jar ，然后在打 jar 包的时候将 B 一起给打进 A.jar 中</strong>（如何在打 jar 包时将 libs 下的 jar 一并打入: <a href="http://zengfanyu.top/2018/06/09/Android%20Studio%20%E4%B8%8E%20jar%20aar%20%E6%80%BB%E7%BB%93/">Android Studio 中打 jar 包和 aar 包姿势总结</a>），然后对外提供新的 A.jar + SO ，但是使用方在编译时报出如下错误：</p><p><img src="https://i.imgur.com/yfUZNvk.png" alt=""></p><p>重点： <code>android.view.inflateexception binary xml file line #0 error inflating class ...</code></p><p>在 inflate XML 文件的时候出错了，到这里，我立马就想到，<strong>是不是 SDK A 或者 B 中有用到一些资源文件，而  Jar  包并不能包含资源文件所导致的？</strong></p><p>回去检查后发现，SDK B 中确实依赖有一个 XML 文件，但是 jar 中是没有包含的，所以在运行时会报出错误。</p><p>这么说，直接将 B 的 jar 给 打进 A 的 jar 中这种方法因为资源文件的问题，是不可行的了，所以又想到一个方法：</p><p><strong>A SDK 还是依赖 B SDK 的 aar，然后在编译阶段是可以通过的，并且在最后打 jar 包时，是没办法将 B.aar 给打进总的 jar 中的，所以就额外提供 B.aar，最后对外输出是 A.jar + B.aar + so。</strong></p><p>其中 A 的 gradle 文件如下：</p><p><img src="https://i.imgur.com/mbU3Un4.png" alt=""></p><p>这样使用方在使用的时候就正常了， 但是在混淆后打 APK 包时，又出现了一个错误：</p><p><img src="https://i.imgur.com/rmLX2gN.png" alt=""></p><p>重点： <code>Duplicate zip entry [com/xxx/xxx/R$anim.class))</code></p><p>通过包名可以确定 com/xxx/xxx/R$anim.class 是 B SDK 中的类。</p><p>问题很清楚了，是因为 B SDK 引用了两次，在打包时反射调用动画的 id 时报出来的错误，所以将 A.jar 重复依赖的 B.aar 给删除掉就行了。但是检查了一遍又一遍发现，B.aar 并没有被依赖多次。</p><p>但是从逻辑上来说，A.jar 依赖了 B.aar ，然后又额外提供了 B.aar ，只有这个地方是存在逻辑上的重复依赖的，但是并没有真的重复依赖。</p><p>注意上图中 <strong><code>compile(name:&#39;B&#39;,ext:&#39;aar&#39;)</code></strong> 其中 compile 的含义：<strong>对所有 buildType 以及 flavors 进行编译并打包到 apk。</strong> </p><p>到这里就基本清楚了， 我们在 A 中依赖的 B.aar 只是为了让编译通过，并不需要这里的 B 的相关数据给打包打 APK 中，需要打包到 APK 中的应该是额外提供的 B.aar。</p><p>所以将 comile 给换成 provided ，其作用是：只在编译时使用，只参与编译，不打包到最终 apk 。</p><p>这么一来，成功解决如上问题。</p><h2 id="问题二-moudle-间本地和远程包依赖"><a href="#问题二-moudle-间本地和远程包依赖" class="headerlink" title="问题二 moudle 间本地和远程包依赖"></a>问题二 moudle 间本地和远程包依赖</h2><p>假设主 moudleA 依赖子 moudleB ，在 moudle B 中会依赖远程的库 pp-sdk：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.aaa.bbb:pp-sdk:1.0.14'</span></div></pre></td></tr></table></figure><p> moudle A B 之间的依赖关系：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   #A的build.gradle文件</div><div class="line">   </div><div class="line">android &#123;</div><div class="line">   .....</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        <span class="keyword">flatDir</span> &#123;</div><div class="line">            dirs <span class="string">'libs'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':B'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种依赖方式编译和运行都是没问题的，但是如果 B moudle 依赖的 pp-sdk 由远程仓库的变成本地的 aar:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">complie(name:<span class="string">'pp-sdk-v1.0.14'</span>,ext:<span class="string">'aar'</span>)</div></pre></td></tr></table></figure><p>那么就会报错：</p><p><img src="https://i.imgur.com/sRMlACZ.png" alt=""></p><p>原因是 moudle A 用到了 pp-sdk 中的类，但是 moudle A 在它自己的 libs 文件夹下找不到这个类的地址，所以应该让 moudle A 也能找到 moudle B 中的 libs 路径，也就是说，如果有一个全局的地方，能够让 moudle A 设置一下 moudle B 的 libs 地址，那就可以了。</p><p>根目录下的 build.gradle 刚好就可以提供这样的功能：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">   <span class="keyword">repositories</span> &#123;</div><div class="line">       jcenter()</div><div class="line">       <span class="comment">//添加如下代码</span></div><div class="line"><span class="keyword">flatDir</span>&#123;</div><div class="line">dirs <span class="keyword">project</span>(<span class="string">':B'</span>).<span class="keyword">file</span>(<span class="string">'libs'</span>)</div><div class="line">&#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 在<code>allprojects</code> 这个方法下的配置是应用到所有的 moudle 中的，所以在这里将 moudle B 的 libs 地址给添加进来，moudle A 就能找到 moudle B 中 libs 目录下的 pp-sdk 了。</p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xUBT0kU.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;摘要：compile provided 的运用，不同 moudule 之间依赖本地库和远程库的区别.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="BugFix" scheme="http://zengfanyu.top/tags/BugFix/"/>
    
  </entry>
  
  <entry>
    <title>《图解 HTTP》 第六章 HTTP 首部读书笔记</title>
    <link href="http://zengfanyu.top/2018/06/09/HttpHeaders/"/>
    <id>http://zengfanyu.top/2018/06/09/HttpHeaders/</id>
    <published>2018-06-09T09:25:16.000Z</published>
    <updated>2018-06-09T09:28:58.426Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.1and1.com/digitalguide/fileadmin/DigitalGuide/Teaser/was-ist-http-t.jpg" alt=""></p><a id="more"></a><font face="黑体"><p>《图解 HTTP》 第六章 HTTP 首部读书笔记</p><p><img src="https://i.imgur.com/M5KaTDj.png" alt=""></p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.1and1.com/digitalguide/fileadmin/DigitalGuide/Teaser/was-ist-http-t.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机网络基础拾遗" scheme="http://zengfanyu.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%8B%BE%E9%81%97/"/>
    
    
      <category term="HTTP" scheme="http://zengfanyu.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>一口一口啃完Java中的24种设计模式---简单工厂模式、工厂方法模式、抽象工厂方法模式</title>
    <link href="http://zengfanyu.top/2018/06/09/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B8%89%E5%85%84%E5%BC%9F/"/>
    <id>http://zengfanyu.top/2018/06/09/工厂模式三兄弟/</id>
    <published>2018-06-09T02:32:16.000Z</published>
    <updated>2018-06-09T02:32:09.619Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NSZhu74.png" alt=""><br><a id="more"></a></p><font face="黑体"><h1 id="工厂模式总结"><a href="#工厂模式总结" class="headerlink" title="工厂模式总结"></a>工厂模式总结</h1><p><img src="https://i.imgur.com/bmj9RN7.png" alt=""></p><h1 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h1><h2 id="简单工厂模式-UML-图"><a href="#简单工厂模式-UML-图" class="headerlink" title="简单工厂模式 UML 图"></a>简单工厂模式 UML 图</h2><p><img src="https://i.imgur.com/Ms8HhEF.png" alt=""></p><h2 id="工厂方法模式-UML-图"><a href="#工厂方法模式-UML-图" class="headerlink" title="工厂方法模式 UML 图"></a>工厂方法模式 UML 图</h2><p><img src="https://i.imgur.com/UMpAsSg.png" alt=""></p><h2 id="抽象工厂方法模式-UML-图"><a href="#抽象工厂方法模式-UML-图" class="headerlink" title="抽象工厂方法模式 UML 图"></a>抽象工厂方法模式 UML 图</h2><p><img src="https://i.imgur.com/l4wNNGW.png" alt=""></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="简单工厂模式-Demo"><a href="#简单工厂模式-Demo" class="headerlink" title="简单工厂模式 Demo"></a>简单工厂模式 Demo</h2><p>比较简单，此处略去。</p><h2 id="工厂方法模式-Demo"><a href="#工厂方法模式-Demo" class="headerlink" title="工厂方法模式 Demo"></a>工厂方法模式 Demo</h2><h3 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h3><p>需求： 系统运行日志记录器(Logger)，该记录器可以通过多种途径保存系统的运行日志，如通过文件记录或数据库记录，用户可以灵活地更换日志记录方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 10:54</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoggerFactory</span> </span>&#123;</div><div class="line">    <span class="comment">//此处创建 Logger 方法可重载</span></div><div class="line">    <span class="function">Logger <span class="title">createLogger</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 10:53</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">writeLog</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="concreteFactory"><a href="#concreteFactory" class="headerlink" title="concreteFactory"></a>concreteFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 10:55</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseLoggerFactory</span> <span class="keyword">implements</span> <span class="title">LoggerFactory</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Logger <span class="title">createLogger</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//连接数据库，代码省略</span></div><div class="line">        <span class="comment">//创建数据库日志记录器对象</span></div><div class="line">        Logger logger = <span class="keyword">new</span> DatabaseLogger();</div><div class="line">        <span class="comment">//初始化数据库日志记录器，代码省略</span></div><div class="line">        <span class="keyword">return</span> logger;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 10:55</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileLoggerFactory</span> <span class="keyword">implements</span> <span class="title">LoggerFactory</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Logger <span class="title">createLogger</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//创建文件日志记录器对象</span></div><div class="line">        Logger logger = <span class="keyword">new</span> FileLogger();</div><div class="line">        <span class="comment">//创建文件，代码省略</span></div><div class="line">        <span class="keyword">return</span> logger;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="concreteProduct"><a href="#concreteProduct" class="headerlink" title="concreteProduct"></a>concreteProduct</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 10:53</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileLogger</span> <span class="keyword">implements</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLog</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"数据库日志记录。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 10:53</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseLogger</span> <span class="keyword">implements</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLog</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"数据库日志记录。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 10:58</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        LoggerFactory factory;</div><div class="line">        Logger logger;</div><div class="line">        factory = <span class="keyword">new</span> FileLoggerFactory(); <span class="comment">//可引入配置文件实现</span></div><div class="line">        logger = factory.createLogger();</div><div class="line">        logger.writeLog();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="抽象工厂方法模式-Demo"><a href="#抽象工厂方法模式-Demo" class="headerlink" title="抽象工厂方法模式 Demo"></a>抽象工厂方法模式 Demo</h2><p>界面皮肤设计，用户在使用时可以通过菜单来选择皮肤，不同的皮肤将提供视觉效果不同的按钮、文本框、组合框等界面元素，如下所示：</p><p><img src="https://i.imgur.com/zrvxq4E.png" alt=""></p><p>该皮肤库需要具备良好的灵活性和可扩展性，用户可以自由选择不同的皮肤，开发人员可以在不修改既有代码的基础上增加新的皮肤。</p><h3 id="Factory-1"><a href="#Factory-1" class="headerlink" title="Factory"></a>Factory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:33</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkinFactory</span> </span>&#123;</div><div class="line">    <span class="function">Button <span class="title">createButton</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">TextField <span class="title">createTextField</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">ComboBox <span class="title">createComboBox</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Product-1"><a href="#Product-1" class="headerlink" title="Product"></a>Product</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:28</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Button</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:29</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComboBox</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:29</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TextField</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="concreteproduct"><a href="#concreteproduct" class="headerlink" title="concreteproduct"></a>concreteproduct</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:30</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringButton</span> <span class="keyword">implements</span> <span class="title">Button</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"显示浅绿色按钮。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:32</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringComboBox</span> <span class="keyword">implements</span> <span class="title">ComboBox</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"显示绿色边框组合框。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:31</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTextField</span> <span class="keyword">implements</span> <span class="title">TextField</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"显示绿色边框文本框。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:30</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummerButton</span> <span class="keyword">implements</span> <span class="title">Button</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"显示浅蓝色按钮。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:31</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummerComnoBox</span> <span class="keyword">implements</span> <span class="title">ComboBox</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"显示蓝色边框组合框。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:31</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummerTextField</span> <span class="keyword">implements</span> <span class="title">TextField</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"显示蓝色边框文本框。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="concretefactory"><a href="#concretefactory" class="headerlink" title="concretefactory"></a>concretefactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:34</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSkinFactory</span> <span class="keyword">implements</span> <span class="title">SkinFactory</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringButton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TextField <span class="title">createTextField</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringTextField();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ComboBox <span class="title">createComboBox</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringComboBox();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:34</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummerSkinFactory</span> <span class="keyword">implements</span> <span class="title">SkinFactory</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SummerButton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TextField <span class="title">createTextField</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SummerTextField();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ComboBox <span class="title">createComboBox</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SummerComnoBox();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Test-1"><a href="#Test-1" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/5/26 11:35</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SkinFactory factory1, factory2;</div><div class="line">        Button bt1, bt2;</div><div class="line">        TextField tf1, tf2;</div><div class="line">        ComboBox cb1, cb2;</div><div class="line">        <span class="comment">//创建夏天风格皮肤</span></div><div class="line">        factory1 = <span class="keyword">new</span> SummerSkinFactory();</div><div class="line">        bt1 = factory1.createButton();</div><div class="line">        tf1 = factory1.createTextField();</div><div class="line">        cb1 = factory1.createComboBox();</div><div class="line">        bt1.display();</div><div class="line">        tf1.display();</div><div class="line">        cb1.display();</div><div class="line">        <span class="comment">//创建春天风格皮肤</span></div><div class="line">        factory2 = <span class="keyword">new</span> SpringSkinFactory();</div><div class="line">        bt2 = factory2.createButton();</div><div class="line">        tf2 = factory2.createTextField();</div><div class="line">        cb2 = factory2.createComboBox();</div><div class="line">        bt2.display();</div><div class="line">        tf2.display();</div><div class="line">        cb2.display();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NSZhu74.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Design Patterns" scheme="http://zengfanyu.top/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://zengfanyu.top/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 中打 jar 包和 aar 包姿势总结</title>
    <link href="http://zengfanyu.top/2018/06/09/Android%20Studio%20%E4%B8%8E%20jar%20aar%20%E6%80%BB%E7%BB%93/"/>
    <id>http://zengfanyu.top/2018/06/09/Android Studio 与 jar aar 总结/</id>
    <published>2018-06-09T02:28:16.000Z</published>
    <updated>2018-06-09T02:30:05.835Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://techcrunch.com/wp-content/uploads/2017/02/android-studio-logo.png?w=1390&amp;crop=1" alt=""></p><a id="more"></a><font face="黑体"><p>好久没有写博客了，最近部门低延迟会议项目提测了新版本，这周六可以来公司看看书，写写博客。<br>前阵子的工作中，有件事情还是耗费了我很长的时间的，就是重新打包对外输出的 SDK，之前只是用过了解过 aar 和 jar ，但并不明白他们之间的关，问题列举：</p><ul><li>打的 jar 包中没有包含 libs 目录下引用的 jar 导致目标项目无法直接使用</li><li>打的 aar 包引用了 maven 库，目标项目无法直接使用</li></ul><p>通过这篇博客，记录如何解决如下几个问题：</p><ul><li>在 Android Studio 中如何打 jar 包、使用 jar 包</li><li>如何把 libs 目录下依赖的 jar 打进总的 jar 中</li><li>如何修改 jar 包中的类</li><li>如何在Android Studio 中打 aar 包、使用 aar 包</li><li>解决 aar 中依赖的 maven 库在目标工程中无法使用的问题</li></ul><h1 id="Android-Studio-中打-jar-包"><a href="#Android-Studio-中打-jar-包" class="headerlink" title="Android Studio 中打 jar 包"></a>Android Studio 中打 jar 包</h1><p>总的来说，有两种方法，这两种方法的前提都是这个 module 的 gradle 文件使用 apply plugin: ‘com.android.library’</p><h2 id="直接编译实现"><a href="#直接编译实现" class="headerlink" title="直接编译实现"></a>直接编译实现</h2><p>直接 Rebuild Project ，然后在以下目录中可以找到 Jar 包：</p><p><img src="https://i.imgur.com/svRf0OA.png" alt=""></p><p>图中红色框框中的 jar 包就是 media_upload 这个 moudle 的 jar 包。直接复制到其他 moudle 的 libs 文件夹下，然后进行相应的配置就可以使用。</p><h2 id="通过-gradle-脚本实现"><a href="#通过-gradle-脚本实现" class="headerlink" title="通过 gradle 脚本实现"></a>通过 gradle 脚本实现</h2><p>首先将下面的 gradle 脚本添加到 media_upload moudle 的 gradle 文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">task <span class="title">makeJar</span><span class="params">(type: Jar)</span> </span>&#123;  </div><div class="line">       archiveName = <span class="string">'upload-sdk.jar'</span>  </div><div class="line">       from(<span class="string">'build/intermediates/classes/debug/'</span>)  </div><div class="line">       destinationDir = file(<span class="string">'build/lib'</span>)  </div><div class="line">   &#125;</div></pre></td></tr></table></figure><ul><li>makeJar： Task 的名字</li><li>type: Jar：告诉 gradle 新建的 task对象从 Jar 基类派生。</li><li>archiveName：生成 jar 包的名字</li><li>from(‘build/intermediates/classes/debug/‘)：将此路径下所有 class 文件都打包到 jar 包内（这里是 debug 版本）</li><li>destinationDir：生成 jar 包的目录</li></ul><p>然后到 gradle 窗口中，找到 media_upload moudle，然后在它下面的目录找到我们定义名字为 makeJar 的 task：</p><p><img src="https://i.imgur.com/OR8qoL5.png" alt=""></p><p>双击这个 task ，看到以下界面代表 task 执行成功：</p><p><img src="https://i.imgur.com/59gqp5B.png" alt=""></p><p>这样，生成的 jar 包的名字就是 upload-sdk ，存放于 build/lib 路径处，如下图：</p><p><img src="https://i.imgur.com/n9hAgIs.png" alt=""></p><p>这种打包方法虽然比较麻烦，有一个优点：假设 media_upload 这个 module 还依赖于其他的 jar 包（位于 libs 目录下），那么使用这种方法可以将 media_upload 依赖的其他 jar 包也一并打入总的 upload-sdk.jar 中。</p><h2 id="将-libs-下的-jar-打到总的-jar-包下"><a href="#将-libs-下的-jar-打到总的-jar-包下" class="headerlink" title="将 libs 下的 jar 打到总的 jar 包下"></a>将 libs 下的 jar 打到总的 jar 包下</h2><p><img src="https://i.imgur.com/sETw4fs.png" alt=""></p><p>从上图中可以看到， media_upload 这个 moudle 是依赖于 httpclient 和 okhttputils 这两个 jar 包的，如果直接使用上面的第一种方法，直接编译，这两个 jar 是不会被打进总的 jar 中的；而使用第二种 gradle 脚本的方式，就可以实现，但是 gradle 的脚本需要改变一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">task <span class="title">makeJar</span><span class="params">(type: Jar)</span> </span>&#123;</div><div class="line">    archiveName = <span class="string">'upload-sdk.jar'</span></div><div class="line">    from(<span class="string">'build/intermediates/classes/debug/'</span>)</div><div class="line">    from (project.zipTree(<span class="string">'libs/okhttputils-2_6_2.jar'</span>))</div><div class="line">    from (project.zipTree(<span class="string">'libs/httpclient-4.2.3.jar'</span>))</div><div class="line">    destinationDir = file(<span class="string">'build/lib'</span>)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>多添加的两行也很好理解：</p><ul><li>from (project.zipTree(‘libs/okhttputils-2_6_2.jar’))：将 libs/okhttputils-2_6_2.jar 给打包进 upload-sdk.jar 中。</li><li>from (project.zipTree(‘libs/httpclient-4.2.3.jar’))：将 libs/httpclient-4.2.3.jar 给打包进 upload-sdk.jar 中。</li></ul><p>这样最后生成的 upload-sdk.jar 中就已经包含了 httpclient 和 okhttputils 这两个 jar 包了。</p><h2 id="在主-module-中使用依赖-jar"><a href="#在主-module-中使用依赖-jar" class="headerlink" title="在主 module 中使用依赖 jar"></a>在主 module 中使用依赖 jar</h2><p>至于使用 jar 包，先把 jar 包放置于主 moudle 的 libs 文件夹下，然后再主 module 的 gradle 文件的 dependencies 下添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div></pre></td></tr></table></figure><p>也就是引用 libs 文件夹下所有以 jar 结尾的包。</p><p>或者指定引用某一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">compile <span class="title">files</span><span class="params">(<span class="string">'libs/xxxx.jar'</span>)</span></span></div></pre></td></tr></table></figure><p>在平时编写 SDK 时，一般会存在一个或多个 library 的 moudle，然后会有一个主 moduel 用于针对 library 编写 demo 测试，这时主 moudle 是需要依赖 libray module 的，在主 module 的 gradle 文件中编写如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">compile <span class="title">project</span><span class="params">(<span class="string">':aaaaa'</span>)</span></span></div><div class="line"><span class="function">compile <span class="title">project</span><span class="params">(<span class="string">':bbbbb'</span>)</span></span></div><div class="line"><span class="function">compile <span class="title">project</span><span class="params">(<span class="string">':ccccc'</span>)</span></span></div></pre></td></tr></table></figure><p>其中 aaaaa bbbbb ccccc 分别为依赖的 moudle 的名字。不能忘了在 setting.gradle 中添加各个 moudle：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">include <span class="string">':aaaaa'</span></div><div class="line">include <span class="string">':aaaaa'</span></div><div class="line">include <span class="string">':aaaaa'</span></div></pre></td></tr></table></figure><p>这样各个 moudle 才会被编译，Android Studio 中会自动添加。</p><h1 id="替换-Jar-包中的类"><a href="#替换-Jar-包中的类" class="headerlink" title="替换 Jar 包中的类"></a>替换 Jar 包中的类</h1><p>这个事情的场景是这样：我们上传的 SDK 在计算分段文件的 MD5 值时，计算失败的情况当时由于编码原因，并没有相关的回调到上层，这时候使用我们 SDK 的同事需要联系我们，然后让我们修改代码，重新打 Jar 包，在给他们，然后他们那边再更新验证。</p><p>其实添加个回调到上层很简单，但是如果 SDK 的开发部门和使用部门不是同一个，还是比较麻烦，为了避免以后我自己遇到这样的情况，我在想，<strong>能不能我自己修改 Jar 包中的类</strong>？</p><h2 id="修改第三方库中类的方法"><a href="#修改第三方库中类的方法" class="headerlink" title="修改第三方库中类的方法"></a>修改第三方库中类的方法</h2><ul><li>下载并引入所有第三方类中的源码，然后对应修改。</li><li>使用 ASM 等工具直接修改对应类的字节码。</li></ul><p>第一种方法的优点是不容易出错，debug 时方便，但是比较麻烦，如果碰上 okhttp 这种用 Maven 组织的项目，对于习惯 Gradle 组织项目的 Android 工程师来说，确实是一个很头疼的事情。</p><p>第二种方法的优点是非入侵，但是由于修改了字节码文件，无法和源码对应，同事会导致 debug 时出错几率增大 。</p><h2 id="Duplicate-Class"><a href="#Duplicate-Class" class="headerlink" title="Duplicate Class"></a>Duplicate Class</h2><p>相信很多人在打包 Apk 的编译期（Build Time）遇到过「Duplicate Class」的错误。原因是 Dex 构建工具在把所有类打包进同一个 Dex 的时候，如果发现如果有重复的类要打包进 Dex 的话，就会报错。</p><p>而在编辑期（Edit Time）的时候，如果我们的所有源码中有重复类的话，IDE 也会提示错误。但是如果我们的源码里有一个和第三方 Jar 包里重复的类，IDE 是不会提示错误的。为什么呢？</p><p>因为重复类并不在同一个 Archive 里。Archive 可以看作类的容器，可以是一个 Jar 包，也可以是一个 Dex。当然你某个 Module 中的所有源码，也可以想像成是一个 Archive，所以源码有重复类是会提示错误的。</p><p>总结一下，在源码中的类和 Jar 包里的类有重复的情况下，在编辑期是不会提示错误的。只有当到了编译期，构建工具将你源码编译出来的类，和第三方 Jar 里的重复的类，混合到同一个 Archive 里的时候才会报错。</p><h2 id="修改-Jar-中类的方法"><a href="#修改-Jar-中类的方法" class="headerlink" title="修改 Jar 中类的方法"></a>修改 Jar 中类的方法</h2><p>既然，IDE 允许源码中有和 Jar<br>里的类重复的类。那么，对于开头提到的问题，我们可以提出一种新的解决方案：</p><p><strong>只把 Jar 里想要修改的类的对应源码拷贝到项目中修改，然后在最终编译的时候把 Jar 包里这些类给删除掉。保证在打包进 Dex 的时候只有我们拷贝的源码编译出来的类即可。</strong></p><p>这里引入一个库：<a href="https://github.com/nekocode/JarFilterPlugin" target="_blank" rel="external">JarFilterPlugin</a>，它的作用在它主页上写的很明确： Before building the jars into android dex archives, filter files inside them.</p><p>使用方法：</p><ul><li>Intergate this gralde plugin:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven &#123; url <span class="string">"https://jitpack.io"</span> &#125;</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">"com.github.nekocode:JarFilterPlugin:$&#123;lastest-verion&#125;"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Apply and configure the plugin:</li></ul><p>假设我们想要修改 Android Support V7 包里的 AppCompatActivity 类。我们只需要把 AppCompatActivity 类的源码拷贝到我们的项目中，然后在 App Module 的 budil.gradle 下添加如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">apply plugin: <span class="string">'jar-filter'</span></div><div class="line"></div><div class="line">jarFilters &#123;</div><div class="line">    <span class="string">"com.android.support:appcompat-v7:(.*)"</span> &#123;</div><div class="line">        excludes = [</div><div class="line">                <span class="string">'android/support/v7/app/AppCompatActivity.class'</span>,</div><div class="line">                <span class="string">'android/support/v7/app/AppCompatActivity\\$(.*).class'</span></div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Local jar</span></div><div class="line">    <span class="string">"android.local.jars:xxx.jar:(.*)"</span> &#123;</div><div class="line">        includes = [</div><div class="line">                <span class="string">'xxx'</span></div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Android-Studio-中打-aar-包"><a href="#Android-Studio-中打-aar-包" class="headerlink" title="Android Studio 中打 aar 包"></a>Android Studio 中打 aar 包</h1><h2 id="aar-中依赖的-maven-库在目标工程中无法直接使用的问题"><a href="#aar-中依赖的-maven-库在目标工程中无法直接使用的问题" class="headerlink" title="aar 中依赖的 maven 库在目标工程中无法直接使用的问题"></a>aar 中依赖的 maven 库在目标工程中无法直接使用的问题</h2><p>部门经常对外输出 SDK ，Android 端是以 aar 或者 jar 的形式对外输出，并配套相关 demo ，jar 相关的上面已经记录了，这里记录一下 aar 相关。</p><p>假设我有一个 library 引用了 okhttp 的 maven 库，那么如果我在 demo 里使用 build project 从 outputs/aar 路径下拿出来的 aar，那么就会报错，找不到 okhttp 相关的类。 也就是说，直接 build project 这种方式输出的 aar ，在目标项目中直接引用，是没办法使用到 aar 当中的依赖的，当然，在目标项目中将 arr 的依赖再重新依赖一遍，是可以的使用的，但是这种操作确实不太优雅，和我们模块独立的想法也有冲突，那么就要有一种方法解决这个问题。</p><h3 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h3><p>将 aar 发布到本地或者发布到公司的私服上，私服上会自动让 aar 继续依赖其他的第三方库,这样在目标项目中就可以在 build.gradle 中以依赖的形式来集成aar，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ext &#123;</div><div class="line">    PUBLISH_GROUP_ID = &apos;com.xxxx.yyyy&apos;</div><div class="line">    PUBLISH_ARTIFACT_ID = &apos;zzzz-sdk&apos;</div><div class="line">    PUBLISH_VERSION = &apos;0.0.7&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">def getRepositoryUsername() &#123;</div><div class="line">    return hasProperty(&apos;NEXUS_USERNAME&apos;) ? NEXUS_USERNAME : &quot;&quot; //账号 放置于 local.properties 不同步至 maven</div><div class="line">&#125;</div><div class="line"></div><div class="line">def getRepositoryPassword() &#123;</div><div class="line">    return hasProperty(&apos;NEXUS_PASSWORD&apos;) ? NEXUS_PASSWORD : &quot;&quot;//密码 放置于 local.properties 不同步至 maven</div><div class="line">&#125;</div><div class="line"></div><div class="line">uploadArchives &#123;</div><div class="line">    repositories.mavenDeployer &#123;</div><div class="line">//        name = &apos;mavenCentralReleaseDeployer&apos;</div><div class="line"></div><div class="line">        repository(url: &apos;http://maven.nnnn.com/content/repositories/releases/&apos;) &#123;//公司私服</div><div class="line">//        repository(url:&apos;file:///E:/Library/nexus-2.12.0-01-bundle/sonatype-work/nexus/storage/releases&apos;)&#123; //本地仓库</div><div class="line">            authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        pom.project &#123;</div><div class="line">            groupId project.PUBLISH_GROUP_ID</div><div class="line">            artifactId project.PUBLISH_ARTIFACT_ID</div><div class="line">            version project.PUBLISH_VERSION</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        pom.packaging = &quot;aar&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后在目标项目的 root build.gradle 中引用本地仓库地址或者公司私服地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line"></div><div class="line">        maven &#123;</div><div class="line">            url &apos;http://maven.nnnn.com/content/repositories/releases&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在目标项目的 build.gradle 中依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">dependencies &#123;</div><div class="line"></div><div class="line">    compile(&quot;com.xxxx.yyyy:zzzz-sdk:0.0.7&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h3><ol><li>我们上传 SDK 依赖的 okhttp3 和 gson ，那么首先去下载这两个库对应版本的 jar，放置于 libs 目录下</li></ol><p><img src="https://i.imgur.com/Slszuph.png" alt=""></p><blockquote><p>okhttp 内部有使用 okio ，所以此处也需要引入进来。</p></blockquote><ol><li>在 liarbay 的 build.gradle 中添加 jar 的依赖</li></ol><p><img src="https://i.imgur.com/1vdsH5E.png" alt=""></p><p>3.此时的 xxxxx-upload-sdk-v0.1.0.aar 结构如下：</p><p><img src="https://i.imgur.com/m7YmXCo.png" alt=""></p><p>已经将 gson、okhttp、okio、classes 都包含进来了。</p><ol><li>build project 从 outputs/aar 路径中拿到 aar 放置于目标工程的 libs 目录下并配置使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    flatDir &#123;</div><div class="line">        dirs &apos;libs&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">     compile(name: &apos;xxxxx-upload-sdk-v0.1.0&apos;, ext:&apos;aar&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://techcrunch.com/wp-content/uploads/2017/02/android-studio-logo.png?w=1390&amp;amp;crop=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>一口一口啃完Java中的24种设计模式---责任链模式</title>
    <link href="http://zengfanyu.top/2018/03/24/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zengfanyu.top/2018/03/24/责任链模式/</id>
    <published>2018-03-24T08:49:16.000Z</published>
    <updated>2018-03-25T14:58:19.725Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NSZhu74.png" alt=""><br><a id="more"></a></p><font face="黑体"><h1 id="责任链模式总结"><a href="#责任链模式总结" class="headerlink" title="责任链模式总结"></a>责任链模式总结</h1><p><img src="https://i.imgur.com/K7FsIXd.gif" alt=""></p><p>下面补充上图中的责任链模式 UML 图，责任链模式 Demo、 Android 源码中的责任链模式—事件分发。</p><h1 id="责任链模式的UML图"><a href="#责任链模式的UML图" class="headerlink" title="责任链模式的UML图"></a>责任链模式的UML图</h1><p><img src="https://i.imgur.com/LqgHW2b.png" alt=""></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><blockquote><p>在一家公司中，主任、副董事长、董事长、董事会都可以处理采购单，区别是每一个角色能够处理的采购单金额不同,采购订单需要一级一级处理，当已经被某一角色处理完了，就不会在交给下一个角色处理，写一个采购单处理系统。</p></blockquote><p>针对上述需求，分析一下：当金额没有到达某一角色的处理的下限时，他是不负责处理的，当金额超过他负责处理的上限时，他就处理不了了，就会交给他的上级去处理，只有采购单金额刚好在他处理的范围之内，他才会去处理。那么这种结构就是一个典型的链式处理结构，并且无论订单多大，董事会总是可以处理的，所以这也是一个<strong>纯的责任链结构</strong>。</p><p>我们用责任链模式来处理。先上 UML 图：</p><p><img src="https://i.imgur.com/5jHbaAF.png" alt=""></p><p>根据 UML 图中的过程角色，代码如下：</p><h2 id="抽象处理者"><a href="#抽象处理者" class="headerlink" title="抽象处理者"></a>抽象处理者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 抽象处理者</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/3/24 10:43</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Approver</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 后继处理者</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> Approver mSuccessor;</div><div class="line">    <span class="keyword">protected</span> String mName;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 抽象处理方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> purchaseRequest 采购单实体类</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">processPurchase</span><span class="params">(PurchaseRequest purchaseRequest)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="具体处理者"><a href="#具体处理者" class="headerlink" title="具体处理者"></a>具体处理者</h2><p>主任：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体处理者:主任 &lt;p&gt;</span></div><div class="line"><span class="comment"> * 处理金额: [0,10k)</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/3/24 10:50</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        mName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processPurchase</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (purchaseRequest.getAmount() &gt;= <span class="number">0</span> &amp;&amp; purchaseRequest.getAmount() &lt; <span class="number">10000</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"我是主任"</span> + mName + <span class="string">",采购单编号："</span> + purchaseRequest.getNum() + <span class="string">"，金额："</span> + purchaseRequest.getAmount()</div><div class="line">                    + <span class="string">",用于购买"</span> + purchaseRequest.getPurpose()+<span class="string">",这笔采购单我来处理。"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"我是主任"</span> + mName + <span class="string">",采购单编号："</span> + purchaseRequest.getNum() + <span class="string">"，金额："</span> + purchaseRequest.getAmount()+<span class="string">"太大，我处理不了，交给下一级处理。"</span>);</div><div class="line">            mSuccessor.processPurchase(purchaseRequest);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>董事长：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体处理者：董事长 &lt;p&gt;</span></div><div class="line"><span class="comment"> * 处理金额: [10k,100k)</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/3/24 10:51</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chairman</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chairman</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        mName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processPurchase</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (purchaseRequest.getAmount() &gt;= <span class="number">10000</span> &amp;&amp; purchaseRequest.getAmount() &lt; <span class="number">100000</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"我是董事长"</span> + mName + <span class="string">",采购单编号："</span> + purchaseRequest.getNum() + <span class="string">"，金额："</span> + purchaseRequest.getAmount()</div><div class="line">                    + <span class="string">",用于购买"</span> + purchaseRequest.getPurpose() + <span class="string">",这笔采购单我来处理。"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"我是董事长"</span> + mName + <span class="string">",采购单编号："</span> + purchaseRequest.getNum() + <span class="string">"，金额："</span> + purchaseRequest.getAmount() + <span class="string">"太大，我处理不了，交给下一级处理。"</span>);</div><div class="line">            mSuccessor.processPurchase(purchaseRequest);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>董事会：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体处理者：董事会 &lt;p&gt;</span></div><div class="line"><span class="comment"> * 处理金额: [100k,+ infinity)</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/3/24 10:54</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardOfDirectors</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoardOfDirectors</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        mName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processPurchase</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (purchaseRequest.getAmount() &gt;= <span class="number">100000</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"我是董事长"</span> + mName + <span class="string">",采购单编号："</span> + purchaseRequest.getNum() + <span class="string">"，金额："</span> + purchaseRequest.getAmount()</div><div class="line">                    + <span class="string">",用于购买"</span> + purchaseRequest.getPurpose() + <span class="string">",这笔采购单我来处理。"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="待处理需求实体类"><a href="#待处理需求实体类" class="headerlink" title="待处理需求实体类"></a>待处理需求实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 采购单 Module</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/3/24 10:48</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PurchaseRequest</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 采购金额</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> amount;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 采购编号</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 采购用途</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String purpose;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PurchaseRequest</span><span class="params">(<span class="keyword">long</span> amount, <span class="keyword">int</span> num, String purpose)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.amount = amount;</div><div class="line">        <span class="keyword">this</span>.num = num;</div><div class="line">        <span class="keyword">this</span>.purpose = purpose;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//getter and setter</span></div></pre></td></tr></table></figure><h2 id="客户端类（测试类）"><a href="#客户端类（测试类）" class="headerlink" title="客户端类（测试类）"></a>客户端类（测试类）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/24 11:23</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService mExecutorService = Executors.newSingleThreadExecutor();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> PurchaseRequest purchaseRequest1 = <span class="keyword">new</span> PurchaseRequest(<span class="number">10000000</span>, <span class="number">12580</span>, <span class="string">"98K"</span>);</div><div class="line">        <span class="keyword">final</span> PurchaseRequest purchaseRequest2 = <span class="keyword">new</span> PurchaseRequest(<span class="number">8000</span>, <span class="number">12581</span>, <span class="string">"M16"</span>);</div><div class="line">        <span class="keyword">final</span> PurchaseRequest purchaseRequest3 = <span class="keyword">new</span> PurchaseRequest(<span class="number">70000</span>, <span class="number">12582</span>, <span class="string">"AUG"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Approver director = <span class="keyword">new</span> Director(<span class="string">"Jack"</span>);</div><div class="line">        Approver chairmain = <span class="keyword">new</span> Chairman(<span class="string">"Tom"</span>);</div><div class="line">        Approver boardOfDirectors = <span class="keyword">new</span> BoardOfDirectors(<span class="string">"NiubilityBoardOfDirectors"</span>);</div><div class="line"></div><div class="line">        director.mSuccessor = chairmain;</div><div class="line">        chairmain.mSuccessor = boardOfDirectors;</div><div class="line">        </div><div class="line">        mExecutorService.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest1 start-------------------"</span>);</div><div class="line">                director.processPurchase(purchaseRequest1);</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest1 end---------------------"</span> + <span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        mExecutorService.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest2 start-------------------"</span>);</div><div class="line">                director.processPurchase(purchaseRequest2);</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest2 end---------------------"</span> + <span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        mExecutorService.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest3 start-------------------"</span>);</div><div class="line">                director.processPurchase(purchaseRequest3);</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest3 end---------------------"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此时采购单处理流程：主任 jack —&gt; 董事长 tom —&gt; 董事会</p><p>出入内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">---------purchaseRequest1 start-------------------</div><div class="line">我是主任Jack,采购单编号：<span class="number">12580</span>，金额：<span class="number">10000000</span>太大，我处理不了，交给下一级处理。</div><div class="line">我是董事长Tom,采购单编号：<span class="number">12580</span>，金额：<span class="number">10000000</span>太大，我处理不了，交给下一级处理。</div><div class="line">我是董事长NiubilityBoardOfDirectors,采购单编号：<span class="number">12580</span>，金额：<span class="number">10000000</span>,用于购买<span class="number">98</span>K,这笔采购单我来处理。</div><div class="line">---------purchaseRequest1 end---------------------</div><div class="line"></div><div class="line">---------purchaseRequest2 start-------------------</div><div class="line">我是主任Jack,采购单编号：<span class="number">12581</span>，金额：<span class="number">8000</span>,用于购买M16,这笔采购单我来处理。</div><div class="line">---------purchaseRequest2 end---------------------</div><div class="line"></div><div class="line">---------purchaseRequest3 start-------------------</div><div class="line">我是主任Jack,采购单编号：<span class="number">12582</span>，金额：<span class="number">70000</span>太大，我处理不了，交给下一级处理。</div><div class="line">我是董事长Tom,采购单编号：<span class="number">12582</span>，金额：<span class="number">70000</span>,用于购买AUG,这笔采购单我来处理。</div><div class="line">---------purchaseRequest3 end---------------------</div></pre></td></tr></table></figure><h2 id="动态扩展"><a href="#动态扩展" class="headerlink" title="动态扩展"></a>动态扩展</h2><p>假如公司采购单金额在 1k 范围以内的很多，主任又太忙了，所以他招了一个女实习 Rose 生来给他干，以后的采购单先给实习生去处理，如果她处理不了，在给主任。此时这个我们需要改变这个系统的处理链的逻辑。</p><p>首先增加女实习生的 Approve</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/3/24 11:41</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Intern</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Intern</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        mName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processPurchase</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (purchaseRequest.getAmount() &gt;= <span class="number">0</span> &amp;&amp; purchaseRequest.getAmount() &lt; <span class="number">10000</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"我是实习生"</span> + mName + <span class="string">",采购单编号："</span> + purchaseRequest.getNum() + <span class="string">"，金额："</span> + purchaseRequest.getAmount()</div><div class="line">                    + <span class="string">",用于购买"</span> + purchaseRequest.getPurpose()+<span class="string">",这笔采购单我来处理。"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"我是实习生"</span> + mName + <span class="string">",采购单编号："</span> + purchaseRequest.getNum() + <span class="string">"，金额："</span> + purchaseRequest.getAmount()+<span class="string">"太大，我处理不了，交给下一级处理。"</span>);</div><div class="line">            mSuccessor.processPurchase(purchaseRequest);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后在客户端修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/24 11:23</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService mExecutorService = Executors.newSingleThreadExecutor();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> PurchaseRequest purchaseRequest1 = <span class="keyword">new</span> PurchaseRequest(<span class="number">10000000</span>, <span class="number">12580</span>, <span class="string">"98K"</span>);</div><div class="line">        <span class="keyword">final</span> PurchaseRequest purchaseRequest2 = <span class="keyword">new</span> PurchaseRequest(<span class="number">8000</span>, <span class="number">12581</span>, <span class="string">"M16"</span>);</div><div class="line">        <span class="keyword">final</span> PurchaseRequest purchaseRequest3 = <span class="keyword">new</span> PurchaseRequest(<span class="number">70000</span>, <span class="number">12582</span>, <span class="string">"AUG"</span>);</div><div class="line">        <span class="keyword">final</span> PurchaseRequest purchaseRequest4 = <span class="keyword">new</span> PurchaseRequest(<span class="number">500</span>, <span class="number">12583</span>, <span class="string">"止痛药"</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">final</span> Approver intern = <span class="keyword">new</span> Intern(<span class="string">"Rose"</span>);</div><div class="line">        Approver director = <span class="keyword">new</span> Director(<span class="string">"Jack"</span>);</div><div class="line">        Approver chairmain = <span class="keyword">new</span> Chairman(<span class="string">"Tom"</span>);</div><div class="line">        Approver boardOfDirectors = <span class="keyword">new</span> BoardOfDirectors(<span class="string">"NiubilityBoardOfDirectors"</span>);</div><div class="line"></div><div class="line">        intern.mSuccessor = director;</div><div class="line">        director.mSuccessor = chairmain;</div><div class="line">        chairmain.mSuccessor = boardOfDirectors;</div><div class="line"></div><div class="line">        mExecutorService.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest1 start-------------------"</span>);</div><div class="line">                intern.processPurchase(purchaseRequest1);</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest1 end---------------------"</span> + <span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        mExecutorService.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest2 start-------------------"</span>);</div><div class="line">                intern.processPurchase(purchaseRequest2);</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest2 end---------------------"</span> + <span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        mExecutorService.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest3 start-------------------"</span>);</div><div class="line">                intern.processPurchase(purchaseRequest3);</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest3 end---------------------"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    mExecutorService.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest4 start-------------------"</span>);</div><div class="line">                intern.processPurchase(purchaseRequest4);</div><div class="line">                System.out.println(<span class="string">"---------purchaseRequest4 end---------------------"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在客户端重新修改采购单处理链： </p><ol><li>增加 Intern 对象 Rouse</li><li>将所有采购统统交给 Rouse 处理，而不是之前的主任 Jack</li></ol><p>此时采购单处理流程：实习生 Rose —&gt; 主任 jack —&gt; 董事长 tom —&gt; 董事会</p><p>此时的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">---------purchaseRequest1 start-------------------</div><div class="line">我是实习生Rose,采购单编号：<span class="number">12580</span>，金额：<span class="number">10000000</span>太大，我处理不了，交给下一级处理。</div><div class="line">我是主任Jack,采购单编号：<span class="number">12580</span>，金额：<span class="number">10000000</span>太大，我处理不了，交给下一级处理。</div><div class="line">我是董事长Tom,采购单编号：<span class="number">12580</span>，金额：<span class="number">10000000</span>太大，我处理不了，交给下一级处理。</div><div class="line">我是董事长NiubilityBoardOfDirectors,采购单编号：<span class="number">12580</span>，金额：<span class="number">10000000</span>,用于购买<span class="number">98</span>K,这笔采购单我来处理。</div><div class="line">---------purchaseRequest1 end---------------------</div><div class="line"></div><div class="line">---------purchaseRequest2 start-------------------</div><div class="line">我是实习生Rose,采购单编号：<span class="number">12581</span>，金额：<span class="number">8000</span>,用于购买M16,这笔采购单我来处理。</div><div class="line">---------purchaseRequest2 end---------------------</div><div class="line"></div><div class="line">---------purchaseRequest3 start-------------------</div><div class="line">我是实习生Rose,采购单编号：<span class="number">12582</span>，金额：<span class="number">70000</span>太大，我处理不了，交给下一级处理。</div><div class="line">我是主任Jack,采购单编号：<span class="number">12582</span>，金额：<span class="number">70000</span>太大，我处理不了，交给下一级处理。</div><div class="line">我是董事长Tom,采购单编号：<span class="number">12582</span>，金额：<span class="number">70000</span>,用于购买AUG,这笔采购单我来处理。</div><div class="line">---------purchaseRequest3 end---------------------</div><div class="line"></div><div class="line">---------purchaseRequest4 start-------------------</div><div class="line">我是实习生Rose,采购单编号：<span class="number">12583</span>，金额：<span class="number">500</span>,用于购买止痛药,这笔采购单我来处理。</div><div class="line">---------purchaseRequest4 end---------------------</div></pre></td></tr></table></figure><p>这就是 纯的责任链模式的一个例子。至于不纯的责任链模式，在 Android 源码中有一个跟好的体现，就是 事件分发机制。</p><h1 id="Android-源码中的责任链模式—事件分发机制"><a href="#Android-源码中的责任链模式—事件分发机制" class="headerlink" title="Android 源码中的责任链模式—事件分发机制"></a>Android 源码中的责任链模式—事件分发机制</h1><blockquote><p>这里简述，不深入分析。</p></blockquote><p>当用户触摸屏幕时，Android 系统会产生一个 MotionEvent 对象用于表示触摸事件，然后这个 MotionEvent 会从 ViewTree 的顶部从上而下的分发，经过 Windows —&gt; Activity —&gt; ViewGroup —&gt; View.</p><p>ViewGroup 把 MotionEvent 不断的递归分发，查找可以消耗这个事件的 View （ViewGroup），然后被 onTouchEvent 方法所处理。 这个过程也是一个责任链的模式。</p><p>但是要注意的是：并且这是一个不纯的责任链模式，因为触摸事件 MotionEvent 可能没有任何一个 view 能够消耗它。</p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NSZhu74.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Design Patterns" scheme="http://zengfanyu.top/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://zengfanyu.top/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础夯实 --- Java 对象的创建</title>
    <link href="http://zengfanyu.top/2018/03/10/JavaObjectConstruct/"/>
    <id>http://zengfanyu.top/2018/03/10/JavaObjectConstruct/</id>
    <published>2018-03-10T09:27:15.000Z</published>
    <updated>2018-03-11T07:39:23.566Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://stackify.com/wp-content/uploads/2017/10/Java-Blogs-793x397.png" alt=""></p><p>摘要：这篇博文总结一下 Java 当中实例化对象的方法和过程。并且涉及到多态特性在 Java 对象初始化过程中的表现</p><a id="more"></a><font face="黑体"><p>[toc]</p><h1 id="Java-中创建对象的几种方法"><a href="#Java-中创建对象的几种方法" class="headerlink" title="Java 中创建对象的几种方法"></a>Java 中创建对象的几种方法</h1><ul><li><p><strong>通过构造函数</strong></p></li><li><p><strong>通过 Class 的 newInstace 方法（反射机制）</strong></p></li><li><p><strong>通过 Constructor 的 newInstance 方法（反射机制）</strong></p></li><li><p><strong>通过 clone 方法</strong></p></li><li><p><strong>通过序列化和反序列化机制</strong></p></li></ul><p>注意：</p><p></p><ol><li><p>Class 的 newInstance 方法只能通过反射调用对象的 public 的无惨构造函数，而 Constructor 的 newInstance 方法就强大得多，它不仅可以反射调用对象的带参构造方法，也可以调用其 private 构造方法。事实上Class的newInstance方法内部调用的也是Constructor的newInstance方法。</p></li><li><p>要想使用clone方法，我们就必须先实现Cloneable接口并实现其定义的clone方法,用clone方法创建对象的过程中并不会调用任何构造函数。</p></li><li><p>当我们反序列化一个对象时，JVM会给我们创建一个单独的对象，在此过程中，JVM并不会调用任何构造函数。为了反序列化一个对象，我们需要让我们的类实现Serializable接口</p></li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/3/10 10:39</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>,<span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mAge;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        mName = name;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        mName = name;</div><div class="line">        mAge = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printStudentInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</div><div class="line">                <span class="string">"mName='"</span> + mName + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", mAge="</span> + mAge +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>注意三个构造方法的作用域以及参数。</strong></p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line"></div><div class="line">           Utils.print(<span class="string">"============1.调用构造方法函数创建对象============="</span>);</div><div class="line">           Student student1 = <span class="keyword">new</span> Student();</div><div class="line">           Utils.println(<span class="string">"student1:"</span> + student1);</div><div class="line"></div><div class="line">           Utils.print(<span class="string">"============2.调用Class类的newInstance方法，调用无参数的public的构造方法，创建对象============="</span>);</div><div class="line">           Student student2 = (Student) Class.forName(<span class="string">"Student"</span>).newInstance();</div><div class="line">           Utils.print(<span class="string">"student2:"</span> + student2.printStudentInfo());</div><div class="line">           Student student22 = Student.class.newInstance();</div><div class="line">           Utils.println(<span class="string">"student22:"</span> + student22.printStudentInfo());</div><div class="line"></div><div class="line">           Utils.print(<span class="string">"============3.调用Constructor类的newInstance方法，调用带参数的public构造方法，创建对象============="</span>);</div><div class="line">           Constructor&lt;Student&gt; constructor = Student.class.getConstructor(String.class);</div><div class="line">           Student student3 = constructor.newInstance(<span class="string">"WalkerZeng"</span>);</div><div class="line">           Utils.println(<span class="string">"student3:"</span> + student3.printStudentInfo());</div><div class="line"></div><div class="line"></div><div class="line">           Utils.print(<span class="string">"============4.调用Constructor类的newInstance方法，调用带参数的private构造方法，创建对象============="</span>);</div><div class="line">           Class&lt;?&gt; aStudent = Class.forName(<span class="string">"Student"</span>);</div><div class="line">           Constructor&lt;?&gt; declaredConstructor = aStudent.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</div><div class="line">           declaredConstructor.setAccessible(<span class="keyword">true</span>);</div><div class="line">           Student student4 = (Student) declaredConstructor.newInstance(<span class="string">"WalkerZeng"</span>, <span class="number">24</span>);</div><div class="line">           Utils.print(<span class="string">"student4:"</span> + student4.printStudentInfo());</div><div class="line">           Utils.println(<span class="string">"student4:"</span> + student4);</div><div class="line"></div><div class="line"></div><div class="line">           Utils.print(<span class="string">"============5.调用clone方法创建对象============="</span>);</div><div class="line">           Student student5 = (Student) student4.clone();</div><div class="line">           Utils.print(<span class="string">"student5:"</span> + student5.printStudentInfo());</div><div class="line">           Utils.println(<span class="string">"student5:"</span> + student5);</div><div class="line"></div><div class="line"></div><div class="line">           Utils.print(<span class="string">"============6.使用序列化机制创建对象============="</span>);</div><div class="line">           Constructor&lt;Student&gt; constructor1 = Student.class</div><div class="line">                   .getConstructor(String.class);</div><div class="line">           Student student6 = constructor1.newInstance(<span class="string">"WalkerWang"</span>);</div><div class="line">           Utils.print(<span class="string">"student6:"</span> + student6);</div><div class="line">           Utils.print(<span class="string">"student6:"</span> + student6.printStudentInfo());</div><div class="line"></div><div class="line"><span class="comment">//写对象</span></div><div class="line">           ObjectOutputStream output = <span class="keyword">new</span> ObjectOutputStream(</div><div class="line">                   <span class="keyword">new</span> FileOutputStream(<span class="string">"student.bin"</span>));</div><div class="line">           output.writeObject(student6);</div><div class="line">           output.close();</div><div class="line"></div><div class="line"><span class="comment">//读对象</span></div><div class="line">           ObjectInputStream input = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(</div><div class="line">                   <span class="string">"student.bin"</span>));</div><div class="line">           Student student7 = (Student) input.readObject();</div><div class="line">           Utils.print(<span class="string">"student7:"</span> + student7);</div><div class="line">           Utils.print(<span class="string">"student7:"</span> + student7.printStudentInfo());</div><div class="line"></div><div class="line"></div><div class="line">       &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | ClassNotFoundException | NoSuchMethodException | InvocationTargetException | CloneNotSupportedException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>输出情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">============<span class="number">1</span>.调用构造方法函数创建对象=============</div><div class="line">student1:Student@<span class="number">140e19</span>d</div><div class="line"> </div><div class="line">============<span class="number">2</span>.调用Class类的newInstance方法，调用无参数的<span class="keyword">public</span>的构造方法，创建对象=============</div><div class="line">student2:Student&#123;mName=<span class="string">'null'</span>, mAge=<span class="number">0</span>&#125;</div><div class="line">student22:Student&#123;mName=<span class="string">'null'</span>, mAge=<span class="number">0</span>&#125;</div><div class="line"> </div><div class="line">============<span class="number">3</span>.调用Constructor类的newInstance方法，调用带参数的<span class="keyword">public</span>构造方法，创建对象=============</div><div class="line">student3:Student&#123;mName=<span class="string">'WalkerZeng'</span>, mAge=<span class="number">0</span>&#125;</div><div class="line"> </div><div class="line">============<span class="number">4</span>.调用Constructor类的newInstance方法，调用带参数的<span class="keyword">private</span>构造方法，创建对象=============</div><div class="line">student4:Student&#123;mName=<span class="string">'WalkerZeng'</span>, mAge=<span class="number">24</span>&#125;</div><div class="line">student4:Student@<span class="number">17327</span>b6</div><div class="line"> </div><div class="line">============<span class="number">5</span>.调用clone方法创建对象=============</div><div class="line">student5:Student&#123;mName=<span class="string">'WalkerZeng'</span>, mAge=<span class="number">24</span>&#125;</div><div class="line">student5:Student@<span class="number">14</span>ae5a5</div><div class="line"> </div><div class="line">============<span class="number">6</span>.使用序列化机制创建对象=============</div><div class="line">student6:Student@<span class="number">131245</span>a</div><div class="line">student6:Student&#123;mName=<span class="string">'WalkerWang'</span>, mAge=<span class="number">0</span>&#125;</div><div class="line">student7:Student@<span class="number">1</span>d6c5e0</div><div class="line">student7:Student&#123;mName=<span class="string">'WalkerWang'</span>, mAge=<span class="number">0</span>&#125;</div></pre></td></tr></table></figure><p>简单说明几点：</p><ol><li>student4 是通过反射调用 Studet 带两个参数的 private 方法创建的。</li><li>student5 是通过 student4 clone 创建的，通过观察 student4 和 student5 两者的内存地址不同可知，student5 是一个新的对象。</li><li>student7 是通过 student6 反序列化创建的，同样观察两个对象的内存地址可知，student7 是一个新的对象。</li></ol><h1 id="Java-对象的创建过程"><a href="#Java-对象的创建过程" class="headerlink" title="Java 对象的创建过程"></a>Java 对象的创建过程</h1><p>流程如下图：</p><p><img src="https://i.imgur.com/HEt0f3r.png" alt=""></p><h2 id="实例变量初始化与实例代码块初始化"><a href="#实例变量初始化与实例代码块初始化" class="headerlink" title="实例变量初始化与实例代码块初始化"></a>实例变量初始化与实例代码块初始化</h2><p>当申明一个对象的时候，可以同时对其进行赋值，这就是实例变量初始化，也可以使用代码块为其赋值。那么这些操作是在构造函数执行之前完成的。<strong><font color="#ff0000">换言之，实例变量初始化和构造函数初始化的代码，实际上是被放在构造函数中，对超类构造函数调用代码之后，构造函数本身的代码之前的。</font></strong></p><p>举个栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/3/10 11:45</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> j = i + <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test1</span><span class="params">(<span class="keyword">int</span> var)</span> </span>&#123;</div><div class="line"><span class="comment">//此处省略了 super() 超类的无参构造方法是可以省略不写出来的，但是有参构造方法必须写出</span></div><div class="line">        Utils.print(<span class="string">"i="</span> + i);</div><div class="line">        Utils.print(<span class="string">"j="</span> + j);</div><div class="line">        <span class="keyword">this</span>.i = var;</div><div class="line">        Utils.print(<span class="string">"i="</span> + i);</div><div class="line">        Utils.print(<span class="string">"j="</span> + j);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        j += <span class="number">4</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Test1 test1 = <span class="keyword">new</span> Test1(<span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//output:</span></div><div class="line">i=<span class="number">1</span></div><div class="line">j=<span class="number">6</span></div><div class="line">i=<span class="number">3</span></div><div class="line">j=<span class="number">6</span></div></pre></td></tr></table></figure><p>根据上面标红的那句话，那么这段代码实际的执行顺序是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/3/10 11:45</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test1</span><span class="params">(<span class="keyword">int</span> var)</span> </span>&#123;</div><div class="line"><span class="comment">//此处省略了 super() 超类的无参构造方法是可以省略不写出来的，但是有参构造方法必须写出</span></div><div class="line"> <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> j = i + <span class="number">1</span>;</div><div class="line"> &#123;</div><div class="line">         j += <span class="number">4</span>;</div><div class="line">     &#125;</div><div class="line">        Utils.print(<span class="string">"i="</span> + i);</div><div class="line">        Utils.print(<span class="string">"j="</span> + j);</div><div class="line">        <span class="keyword">this</span>.i = var;</div><div class="line">        Utils.print(<span class="string">"i="</span> + i);</div><div class="line">        Utils.print(<span class="string">"j="</span> + j);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Test1 test1 = <span class="keyword">new</span> Test1(<span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>那么，这种在看上面的输出结果，就很显而易见了。这个例子也就验证了上面标红的结论</p><h2 id="JVM先会给对象赋默认值"><a href="#JVM先会给对象赋默认值" class="headerlink" title="JVM先会给对象赋默认值"></a>JVM先会给对象赋默认值</h2><p>上图中的第二步，JVM 给对象赋默认值，然后再按照代码的赋值情况，去给对象重新赋值。那么赋默认值这个过程到底是否存在呢？我们用代码来验证下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/3/10 11:57</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> j = getI();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;</div><div class="line">        i = <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getI</span><span class="params">()</span> </span>&#123;</div><div class="line">Utils.print(<span class="string">"getI() j="</span>+j+<span class="string">" i="</span>+i);</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Test2 test2 = <span class="keyword">new</span> Test2();</div><div class="line">        Utils.print(test2.j);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>按照之前的结论，这段代码是可以等价成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/3/10 11:57</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">int</span> j = getI();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">        i = <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getI</span><span class="params">()</span> </span>&#123;</div><div class="line">Utils.print(<span class="string">"getI() j="</span>+j+<span class="string">" i="</span>+i);</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Test2 test2 = <span class="keyword">new</span> Test2();</div><div class="line">        Utils.print(test2.j);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//output:</span></div><div class="line">getI() j=<span class="number">0</span> i=<span class="number">0</span></div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure><p>为什么会输出 0 ？ 分析一下，首先调用 Test2 的构造函数，那么就会去给 int 类型的 j 和 i 对象分配内存空间，并且赋默认值，int 类型的默认值是 0 。然后再按照代码的情况去给他们赋值，第 7 行是给 j 赋值的，这个值是 getI() 函数的返回值，那么来看看 getI() 函数，这个函数就是返回 i ，此时的 i 的值是 JVM 赋予的默认值，也就是 0 ，所以这么一来， 就是将 0 赋给 j。</p><p>所以这段代码是可以体现出 JVM 在申请内存空间的同时，是对变量进行了一个赋默认值的过程的。</p><h2 id="构造函数初始化"><a href="#构造函数初始化" class="headerlink" title="构造函数初始化"></a>构造函数初始化</h2><p>我们可以从上文知道，实例变量初始化与实例代码块初始化总是发生在构造函数初始化之前，那么我们下面着重看看构造函数初始化过程。众所周知，每一个Java中的对象都至少会有一个构造函数，如果我们没有显式定义构造函数，那么它将会有一个默认无参的构造函数。在编译生成的字节码中，这些构造函数会被命名成 <init>() 方法，参数列表与 Java 语言书写的构造函数的参数列表相同。</init></p><p>我们知道，<strong><font color="#ff0000">Java 要求在实例化类之前，必须先实例化其超类</font></strong>，以保证所创建实例的完整性。事实上，这一点是在构造函数中保证的：Java 强制要求 Object 对象( Object 是J ava 的顶层对象，没有超类)之外的所有对象构造函数的第一条语句必须是超类构造函数的调用语句或者是类中定义的其他的构造函数，如果我们既没有调用其他的构造函数，也没有显式调用超类的构造函数，那么编译器会为我们自动生成一个对超类构造函数的调用,比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>另外有种情况， 当有重载构造函数时，我们经常会在一个构造函数中去调用另外一个构造函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/3/10 12:21</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test3</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//这里不是省略了 super() 而是根本就没有</span></div><div class="line">        <span class="keyword">this</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test3</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line"><span class="comment">//super() 这里省略了</span></div><div class="line">        <span class="keyword">this</span>.i = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Test3 test3 = <span class="keyword">new</span> Test3();</div><div class="line">        Utils.print(<span class="string">"test3.i="</span> + test3.i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于这种情况， Java 只允许在 Test(int i) 中去调用超类的构造函数。</p><p>Java 做出这种限制，就是为了一个类在使用前，能够正确的被初始化。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>一个类的创建过程，实际上是一个递归的过程，总结如下图：</p><p><img src="https://i.imgur.com/oP7vHej.png" alt=""></p><p>递归的思想在 Android 中的事件分发机制以及 View 的绘制等过程中也有体现。拿事件分发来说，不同的是，事件分发是从上到下分发，然后从下到上递归，如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/966283-b9cb65aceea9219b.png" alt=""></p><p>引用自： <a href="https://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="external">图解 Android 事件分发机制 （作者：Kelin）</a></p><h1 id="实例变量初始化、代码块初始化、构造函数初始化以及多态的例子"><a href="#实例变量初始化、代码块初始化、构造函数初始化以及多态的例子" class="headerlink" title="实例变量初始化、代码块初始化、构造函数初始化以及多态的例子"></a>实例变量初始化、代码块初始化、构造函数初始化以及多态的例子</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/3/10 13:03</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line"></div><div class="line">        Foo() &#123;</div><div class="line">            System.out.println(i);            <span class="comment">// -----------(1)</span></div><div class="line">            <span class="keyword">int</span> x = getValue();</div><div class="line">            System.out.println(x);            <span class="comment">// -----------(2)</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#123;</div><div class="line">            i = <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//子类</span></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</div><div class="line"></div><div class="line">        Bar() &#123;</div><div class="line">            j = <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#123;</div><div class="line">            j = <span class="number">3</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">            Bar bar = <span class="keyword">new</span> Bar();</div><div class="line">            System.out.println(bar.getValue());            <span class="comment">// -----------(3)</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>根据上面的总结，Foo 和 Bar 的构造函数等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Foo类构造函数的等价变换：</span></div><div class="line">Foo() &#123;</div><div class="line">    i = <span class="number">1</span>;</div><div class="line">    i = <span class="number">2</span>;</div><div class="line">    System.out.println(i);</div><div class="line">    <span class="keyword">int</span> x = getValue();</div><div class="line">    System.out.println(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Bar类构造函数的等价变换</span></div><div class="line">Bar() &#123;</div><div class="line">    Foo();</div><div class="line">    j = <span class="number">1</span>;</div><div class="line">    j = <span class="number">3</span>;</div><div class="line">    j = <span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样程序就好看多了，我们一眼就可以观察出程序的输出结果。</p><ul><li><p>在通过使用 Bar 类的构造方法 new 一个 Bar 类的实例时，首先会调用 Foo 类构造函数，因此(1)处输出是2，这从Foo类构造函数的等价变换中可以直接看出。</p></li><li><p>(2) 处输出是 0，为什么呢？因为在执行 Foo 的构造函数的过程中，由于 Bar 重载了 Foo 中的 getValue 方法，所以根据Java 的多态特性可以知道，其调用的 getValue 方法是被 Bar 重载的那个 getValue 方法。但由于这时 Bar 的构造函数还没有被执行，因此此时 j 的值还是默认值 0，因此 (2) 处输出是 0。</p></li><li><p>最后，在执行 (3) 处的代码时，由于 bar 对象已经创建完成，所以此时再访问 j 的值时，就得到了其初始化后的值 2，这一点可以从 Bar 类构造函数的等价变换中直接看出。</p></li></ul></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://stackify.com/wp-content/uploads/2017/10/Java-Blogs-793x397.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;摘要：这篇博文总结一下 Java 当中实例化对象的方法和过程。并且涉及到多态特性在 Java 对象初始化过程中的表现&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://zengfanyu.top/categories/Java/"/>
    
    
      <category term="Java 基础夯实" scheme="http://zengfanyu.top/tags/Java-%E5%9F%BA%E7%A1%80%E5%A4%AF%E5%AE%9E/"/>
    
  </entry>
  
  <entry>
    <title>只因为在众多框架中多看了你一眼 RxJava （六） 背压策略</title>
    <link href="http://zengfanyu.top/2018/02/26/RxJava6/"/>
    <id>http://zengfanyu.top/2018/02/26/RxJava6/</id>
    <published>2018-02-26T06:16:16.000Z</published>
    <updated>2018-02-28T13:57:25.190Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/cCjinS0.png" alt=""></p><p>理解 RxJava2 中的被压策略</p><a id="more"></a><font face="黑体"><blockquote><p>文中措辞 被观察者 &lt;=&gt; 上游； 观察者 &lt;=&gt; 下游 是等价的。</p></blockquote><h1 id="宏观上解决流速不匹配的问题"><a href="#宏观上解决流速不匹配的问题" class="headerlink" title="宏观上解决流速不匹配的问题"></a>宏观上解决流速不匹配的问题</h1><p>通过上一篇，我们知道，阻塞是因为上游发送事件的流速和下游接收处理事件的流速不匹配造成的（一般是 上游流速 &gt; 下游流速），那么要解决这个问题，「要么减少上游发送事件的数量」，「要么减少上游发送事件的频率」，但是我们又不能手动实现这一点，因为我们不知道上游道理应该发送多少事件和发送事件的速度，并且也不知道下游处理消耗事件的能力，所以简单的通过控制上游发送事件的数量和速度是不可行的。</p><p>那么我们这里抛开代码实现，从宏观上谈一下如何解决这个问题。</p><p>要解决阻塞，控制流速，需要上下游协同合作。比如说：下游告诉上游，我可以处理 20 个事件（<strong>响应式拉取</strong>），那么上游就发送 20 个事件（<strong>反馈控制</strong>），当下游处理完了之后，下游又告诉上游，我还可以再处理 30 个事件，那么上游又发送 30 个事件过来，我们知道，异步订阅，上游发送的事件是放在一个 缓存池 中的， 而下游直接从缓存池中去取，那么如果上游发送的事件个数大于下游的处理个数，缓存池就会有溢出的风险，所以在这里也得有一个方法来解决。</p><p>这种方法就类似于 Universal Image Loader 中提供的各种缓存策略，内存缓存的大小有限，所以用内存做缓存时要处理好当接近内存大小临界值时，如何丢弃现有的缓存，存入新的缓存？是最近最少使用的丢弃？还是暂用空间最小的丢弃？还是最先缓存的丢弃？这里就涉及到各种策略。RxJava2.0 中也提供了好几种策略，后面详细说。</p><p>通过上面描述的方案，就可以有效的解决上下游流速不匹配导致的阻塞问题。</p><p>总的来说： </p><ol><li>要尽量避免出现流速不匹配。</li><li>当已经出现流速不匹配了，应该采取策略。</li></ol><p>下面谈谈 RxJava2 中的背压策略。</p><h1 id="背压策略"><a href="#背压策略" class="headerlink" title="背压策略"></a>背压策略</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一种控制事件流速的方法。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>在 <strong><font color="#ff0000">异步事件订阅</font></strong> 中，控制事件发送的速度和接收的速度。</p><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>解决了 <strong><font color="#ff0000">异步订阅中</font></strong> 因被观察者发送事件速度 与 观察者接收事件速度不匹配（一般是前者 快于 后者），从而导致观察者无法及时响应 / 处理所有被观察者发送事件的问题</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://i.imgur.com/yn6AlrP.png" alt=""></p><p>示意图：</p><p><img src="https://i.imgur.com/8wquKHV.png" alt=""></p><p>与 Rxjava1 中被观察者的旧实现 Observable 相比：</p><p><img src="https://i.imgur.com/rSYpGnt.png" alt=""></p><p>图中出现了一个新的类， Flowable ，它就是 RxJava2.0 中被观察者的一种新的实现，同时也是背压策略的承载者，下面就来看看如何使用它。</p><h1 id="背压策略的实现：Flowable"><a href="#背压策略的实现：Flowable" class="headerlink" title="背压策略的实现：Flowable"></a>背压策略的实现：Flowable</h1><h2 id="Flowable-基本使用"><a href="#Flowable-基本使用" class="headerlink" title="Flowable 基本使用"></a>Flowable 基本使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable <span class="comment">//Observable --&gt; Flowable</span></div><div class="line">        .create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123; <span class="comment">//1.ObservableOnSubscribe -&gt; FlowableOnSubscribe</span></div><div class="line">            <span class="meta">@Override</span>  <span class="comment">//2.ObservableEmitter -&gt; FlowableEmitter</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">                LogUtil.d(TAG, <span class="string">"emitter 1"</span>);</div><div class="line">                e.onNext(<span class="number">1</span>);</div><div class="line">                LogUtil.d(TAG, <span class="string">"emitter 2"</span>);</div><div class="line">                e.onNext(<span class="number">2</span>);</div><div class="line">                LogUtil.d(TAG, <span class="string">"emitter 3"</span>);</div><div class="line">                e.onNext(<span class="number">3</span>);</div><div class="line">                LogUtil.d(TAG, <span class="string">"emitter complete"</span>);</div><div class="line">                e.onComplete();</div><div class="line">            &#125;</div><div class="line">        &#125;, BackpressureStrategy.ERROR) <span class="comment">//3.背压策略</span></div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span> <span class="comment">//4.onSubscribe(Disposable d) -&gt; onSubscribe(Subscription s)</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">                s.request(Long.MAX_VALUE);<span class="comment">//5. 向上游请求的元素，响应式拉取</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onNext integer="</span> + integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                LogUtil.w(TAG, t);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">09</span>:<span class="number">11.591</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onSubscribe</div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">09</span>:<span class="number">11.591</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== emitter <span class="number">1</span></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">09</span>:<span class="number">11.591</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=<span class="number">1</span></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">09</span>:<span class="number">11.591</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== emitter <span class="number">2</span></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">09</span>:<span class="number">11.591</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=<span class="number">2</span></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">09</span>:<span class="number">11.591</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== emitter <span class="number">3</span></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">09</span>:<span class="number">11.592</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=<span class="number">3</span></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">09</span>:<span class="number">11.592</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== emitter complete</div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">09</span>:<span class="number">11.592</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onComplete</div></pre></td></tr></table></figure><p>代码中已经注释出了 Flowable 相对于 Observable 使用的不同之处，这里总结一下</p><ol><li>ObservableOnSubscribe -&gt; FlowableOnSubscribe</li><li>ObservableEmitter -&gt; FlowableEmitter</li><li>背压策略</li><li>onSubscribe(Disposable d) -&gt; onSubscribe(Subscription s)</li><li>s.request(Long.MAX_VALUE);// 向被观察者请求的元素，响应式拉取</li></ol><p>下面针对这几点不同做讲解。</p><h2 id="Subscription-request-控制观察者的接收速度"><a href="#Subscription-request-控制观察者的接收速度" class="headerlink" title="Subscription.request 控制观察者的接收速度"></a>Subscription.request 控制观察者的接收速度</h2><p>我们从 request 方法开始看看 Flowable 的使用。</p><p>现在将19行的 s.request(Long.MAX_VALUE) 删掉，在看日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">53.949</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onSubscribe</div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">53.949</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== emitter <span class="number">1</span></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">53.950</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples W/===RxJavaSample==: io.reactivex.exceptions.MissingBackpressureException: create: could not emit value due to lack of requests</div><div class="line">                         at io.reactivex.internal.operators.flowable.FlowableCreate$ErrorAsyncEmitter.onOverflow(FlowableCreate.java:<span class="number">411</span>)</div><div class="line">                         at io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter.onNext(FlowableCreate.java:<span class="number">377</span>)</div><div class="line">                         at com.rengwuxian.rxjavasamples.Test$<span class="number">2</span>$override.subscribe(Test.java:<span class="number">91</span>)</div><div class="line">                         at com.rengwuxian.rxjavasamples.Test$<span class="number">2</span>$override.access$dispatch(Test.java)</div><div class="line">                         at com.rengwuxian.rxjavasamples.Test$<span class="number">2</span>.subscribe(Test.java:<span class="number">0</span>)</div><div class="line">                         at io.reactivex.internal.operators.flowable.FlowableCreate.subscribeActual(FlowableCreate.java:<span class="number">72</span>)</div><div class="line">                         at io.reactivex.Flowable.subscribe(Flowable.java:<span class="number">12970</span>)</div><div class="line">                         at io.reactivex.Flowable.subscribe(Flowable.java:<span class="number">12920</span>)</div><div class="line">                         at com.rengwuxian.rxjavasamples.Test$override.onClick(Test.java:<span class="number">100</span>)</div><div class="line">                         at com.rengwuxian.rxjavasamples.Test$override.access$dispatch(Test.java)</div><div class="line">                         at com.rengwuxian.rxjavasamples.Test.onClick(Test.java:<span class="number">0</span>)</div><div class="line">                         at com.rengwuxian.rxjavasamples.Test_ViewBinding$<span class="number">1</span>.doClick(Test_ViewBinding.java:<span class="number">37</span>)</div><div class="line">                         at butterknife.internal.DebouncingOnClickListener.onClick(DebouncingOnClickListener.java:<span class="number">22</span>)</div><div class="line">                         at android.view.View.performClick(View.java:<span class="number">5619</span>)</div><div class="line">                         at android.view.View$PerformClick.run(View.java:<span class="number">22295</span>)</div><div class="line">                         at android.os.Handler.handleCallback(Handler.java:<span class="number">754</span>)</div><div class="line">                         at android.os.Handler.dispatchMessage(Handler.java:<span class="number">95</span>)</div><div class="line">                         at android.os.Looper.loop(Looper.java:<span class="number">163</span>)</div><div class="line">                         at android.app.ActivityThread.main(ActivityThread.java:<span class="number">6342</span>)</div><div class="line">                         at java.lang.reflect.Method.invoke(Native Method)</div><div class="line">                         at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">880</span>)</div><div class="line">                         at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">770</span>)</div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">53.950</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== emitter <span class="number">2</span></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">53.950</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== emitter <span class="number">3</span></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">03</span>:<span class="number">53.950</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== emitter complete</div></pre></td></tr></table></figure><p>在上游发送了第一个事件之后，下游就抛出了 MissingBackpressureException 异常，但是根据上一篇的内容，这里是同步订阅关系，上游要等下游处理完事件之后才回去发送下一个事件，所以应该不会阻塞，所以这里不应该会抛出异常啊！但事实还是抛出了异常，为什么呢？带着这个疑问，我们仍然将 19 行 s.request(Long.MAX_VALUE) 删掉并且将上下游放到不同的线程中再看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable <span class="comment">//Observable --&gt; Flowable</span></div><div class="line">            .create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                    LogUtil.d(TAG, <span class="string">"emitter 1"</span>);</div><div class="line">                    e.onNext(<span class="number">1</span>);</div><div class="line">                    LogUtil.d(TAG, <span class="string">"emitter 2"</span>);</div><div class="line">                    e.onNext(<span class="number">2</span>);</div><div class="line">                    LogUtil.d(TAG, <span class="string">"emitter 3"</span>);</div><div class="line">                    e.onNext(<span class="number">3</span>);</div><div class="line">                    LogUtil.d(TAG, <span class="string">"emitter complete"</span>);</div><div class="line">                    e.onComplete();</div><div class="line">                &#125;</div><div class="line">            &#125;, BackpressureStrategy.ERROR) <span class="comment">//策略</span></div><div class="line">            .subscribeOn(Schedulers.io())<span class="comment">//上游io线程</span></div><div class="line">            .observeOn(AndroidSchedulers.mainThread())<span class="comment">//下游主线程</span></div><div class="line">            .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                    LogUtil.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">            </div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                    LogUtil.d(TAG, <span class="string">"onNext integer="</span> + integer);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                    LogUtil.w(TAG, t);</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                    LogUtil.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure><p>日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">13</span>:<span class="number">13.942</span> <span class="number">22450</span>-<span class="number">22450</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onSubscribe</div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">13</span>:<span class="number">13.943</span> <span class="number">22450</span>-<span class="number">29562</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== emitter <span class="number">1</span></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">13</span>:<span class="number">13.944</span> <span class="number">22450</span>-<span class="number">29562</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== emitter <span class="number">2</span></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">13</span>:<span class="number">13.944</span> <span class="number">22450</span>-<span class="number">29562</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== emitter <span class="number">3</span></div><div class="line"><span class="number">02</span>-<span class="number">25</span> <span class="number">10</span>:<span class="number">13</span>:<span class="number">13.944</span> <span class="number">22450</span>-<span class="number">29562</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== emitter complete</div></pre></td></tr></table></figure><p>只能看到上游发送的事件，但是下游并没有获取到事件，这又是为什么？</p><p>这是因为 Flowable 采用的是一种响应式拉取的方式，上游需要根据下游的能力去发送事件。<br>而<strong>第 19 行的 s.request(Long.MAX_VALUE) 就相当于下游告知上游其本身的接收能力</strong>。</p><p>那么现在就可以解释上面代码的现象了。</p><ul><li><p>当同步的订阅时，上游发送出一个事件后就抛出 MissingBackpressureException 异常，这是因为下游没有调用 request 方法，也就是说下游没有告知上游其处理事件的能力，那么上游就认为下游没有处理事件的能力，又因为是同步的，上游是需要等待下游处理完事件之后才发送下一个事件，现在下游没有处理事件的能力，那上游不能一直等着吧？所以就抛出异常咯。</p></li><li><p>当异步订阅的时候，会存在一个缓存池，上游发送的事件都放到这个缓存池里面去了，然后下游根据其能力 （request 方法的参数） 从缓存池里取出事件。然而此时并没有调用 request 方法，所以我们只看得到上游发送事件的日志，看不到下游响应事件的日志。但是一旦下游调用 request 时，就会从缓存池中去取出事件，是不是这样呢? 看代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@OnClick</span>(&#123;R.id.id_btn_request, R.id.id_btn_emitter&#125;)</div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (view.getId() == R.id.id_btn_emitter) &#123;</div><div class="line">           LogUtil.d(TAG,<span class="string">"emitter event"</span>);</div><div class="line">           Flowable <span class="comment">//Observable --&gt; Flowable</span></div><div class="line">                   .create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">                       <span class="meta">@Override</span></div><div class="line">                       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                           LogUtil.d(TAG, <span class="string">"emitter 1"</span>);</div><div class="line">                           e.onNext(<span class="number">1</span>);</div><div class="line">                           LogUtil.d(TAG, <span class="string">"emitter 2"</span>);</div><div class="line">                           e.onNext(<span class="number">2</span>);</div><div class="line">                           LogUtil.d(TAG, <span class="string">"emitter 3"</span>);</div><div class="line">                           e.onNext(<span class="number">3</span>);</div><div class="line">                           LogUtil.d(TAG, <span class="string">"emitter complete"</span>);</div><div class="line">                           e.onComplete();</div><div class="line"></div><div class="line">                       &#125;</div><div class="line">                   &#125;, BackpressureStrategy.ERROR) <span class="comment">//策略</span></div><div class="line">                   .subscribeOn(Schedulers.io())</div><div class="line">                   .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                   .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">                       <span class="meta">@Override</span></div><div class="line">                       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                           LogUtil.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">                           mSubscription=s;</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       <span class="meta">@Override</span></div><div class="line">                       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                           LogUtil.d(TAG, <span class="string">"onNext integer="</span> + integer);</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       <span class="meta">@Override</span></div><div class="line">                       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                           LogUtil.w(TAG, t);</div><div class="line"></div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       <span class="meta">@Override</span></div><div class="line">                       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                           LogUtil.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line"></div><div class="line">                       &#125;</div><div class="line">                   &#125;);</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view.getId() == R.id.id_btn_request) &#123;</div><div class="line">           <span class="keyword">if</span> (mSubscription != <span class="keyword">null</span>) &#123;</div><div class="line">               LogUtil.d(TAG,<span class="string">"request invoked"</span>);</div><div class="line">               mSubscription.request(<span class="number">1</span>);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               LogUtil.d(TAG, <span class="string">"mSubscription is null"</span>);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>可以看到，这里我们设置了两个按钮，当点击 btnEmitter 时会发送事件，并且在 onSubscribe 回调中将 Subscription 保存起来，然后当点击 btnRequest 按钮时，会调用 mSubscription.request(1)。这里我们点击 btnEmitter 一下，然后点击 btnRequest 3 下，看看日志：</p><p><img src="https://i.imgur.com/eMjKDXS.gif" alt=""></p><p>ok，验证了，确实是这样。</p><blockquote><p>之前我们说到，上游会将事件发送到缓存池里，然后下游根据其能力从缓存池中取出事件，那么这个缓存池有多大呢？ <strong>128</strong> ！从上游发送 128 个事件和 129 个事件，分别观察日志即可证明，这里就不在写出代码。</p></blockquote><p>到这里，下游已经可以通过 request 控制处理事件的能力了，但是上游还得获取这一信息呀，上游根据这一信息来控制其本身发送事件的速度，怎么获取呢？</p><h2 id="FlowableEmitter-requested-控制被观察者发送事件的速度"><a href="#FlowableEmitter-requested-控制被观察者发送事件的速度" class="headerlink" title="FlowableEmitter.requested 控制被观察者发送事件的速度"></a>FlowableEmitter.requested 控制被观察者发送事件的速度</h2><p>FlowableEmitter 的 requested 方法的返回值就是<strong><font color="#ff000000">当前线程</font></strong>中，下游 subscription 的 request(n) 的 n 值，那么很显然，这里就分为同步订阅关系和异步订阅关系。</p><h3 id="同步订阅情况下"><a href="#同步订阅情况下" class="headerlink" title="同步订阅情况下"></a>同步订阅情况下</h3><p><img src="https://upload-images.jianshu.io/upload_images/944365-233a841e920c83e0.png" alt="image"></p><p>看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">                <span class="comment">// 调用emitter.requested()获取当前观察者需要接收的事件数量</span></div><div class="line">                <span class="keyword">long</span> n = emitter.requested();</div><div class="line"></div><div class="line">                Log.d(TAG, <span class="string">"观察者可接收事件"</span> + n);</div><div class="line"></div><div class="line">                <span class="comment">// 根据emitter.requested()的值，即当前观察者需要接收的事件数量来发送事件</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">                    Log.d(TAG, <span class="string">"发送了事件"</span> + i);</div><div class="line">                    emitter.onNext(i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, BackpressureStrategy.ERROR)</div><div class="line">                .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                        Log.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line"></div><div class="line">                        <span class="comment">// 设置观察者每次能接受10个事件</span></div><div class="line">                        s.request(<span class="number">10</span>);</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                        Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                        Log.w(TAG, <span class="string">"onError: "</span>, t);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                        Log.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure><p>日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.844</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: onSubscribe</div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.845</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 观察者可接收事件<span class="number">10</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.845</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">0</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.845</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 接收到了事件<span class="number">0</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.845</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">1</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 接收到了事件<span class="number">1</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">2</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 接收到了事件<span class="number">2</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">3</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 接收到了事件<span class="number">3</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">4</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 接收到了事件<span class="number">4</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">5</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 接收到了事件<span class="number">5</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">6</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 接收到了事件<span class="number">6</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">7</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 接收到了事件<span class="number">7</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">8</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 接收到了事件<span class="number">8</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">9</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">10.846</span> <span class="number">23613</span>-<span class="number">23613</span>/com.rengwuxian.rxjavasamples D/==Test==: 接收到了事件<span class="number">9</span></div></pre></td></tr></table></figure><p>并且在<strong>同步订阅</strong>当中使用 requested 时，有三个特性需要注意。</p><p><strong>1. 可叠加性：下游可以连续调用 request，上游会进行叠加。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable <span class="comment">//Observable --&gt; Flowable</span></div><div class="line">        .create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">long</span> requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"subscribe requested="</span> + requested);</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;, BackpressureStrategy.ERROR) <span class="comment">//策略</span></div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">                s.request(<span class="number">10</span>);</div><div class="line">                s.request(<span class="number">20</span>);</div><div class="line">                s.request(<span class="number">30</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onNext integer="</span> + integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                LogUtil.w(TAG, t);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>日志：</p><p><img src="https://i.imgur.com/hqRoGqL.png" alt=""></p><p><strong>2. 实时更新性：每次发送事件后，emitter.requested() 会实时更新观察者能接受的事件</strong></p><p>仅计算 onNext 事件，onComplete  onError事件不算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable <span class="comment">//Observable --&gt; Flowable</span></div><div class="line">        .create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">long</span> requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"没有发送事件前， requested="</span> + requested);</div><div class="line"></div><div class="line">                e.onNext(<span class="number">1</span>);</div><div class="line">                requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"发送第一个事件之后， requested="</span> + requested);</div><div class="line"></div><div class="line">                e.onNext(<span class="number">2</span>);</div><div class="line">                requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"发送第二个事件之后， requested="</span> + requested);</div><div class="line"></div><div class="line">                e.onNext(<span class="number">3</span>);</div><div class="line">                requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"发送第三个事件之后， requested="</span> + requested);</div><div class="line"></div><div class="line">                e.onNext(<span class="number">4</span>);</div><div class="line">                requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"发送第四个事件之后， requested="</span> + requested);</div><div class="line"></div><div class="line">                e.onNext(<span class="number">5</span>);</div><div class="line">                requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"发送第五个事件之后， requested="</span> + requested);</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;, BackpressureStrategy.ERROR) <span class="comment">//策略</span></div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">                s.request(<span class="number">10</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onNext integer="</span> + integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                LogUtil.w(TAG, t);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>日志：</p><p><img src="https://i.imgur.com/JvBotn1.png" alt=""></p><p><strong>3. 异常</strong></p><p>当 FlowableEmitter.requested() 减到 0 时，则代表观察者已经不可接收事件，此时被观察者若继续发送事件，则会抛出MissingBackpressureException 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable <span class="comment">//Observable --&gt; Flowable</span></div><div class="line">        .create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">long</span> requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"没有发送事件前， requested="</span> + requested);</div><div class="line"></div><div class="line">                e.onNext(<span class="number">1</span>);</div><div class="line">                requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"发送第一个事件之后， requested="</span> + requested);</div><div class="line"></div><div class="line">                e.onNext(<span class="number">2</span>);</div><div class="line">                requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"发送第二个事件之后， requested="</span> + requested);</div><div class="line"></div><div class="line">                e.onNext(<span class="number">3</span>);</div><div class="line">                requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"发送第三个事件之后， requested="</span> + requested);</div><div class="line"></div><div class="line">                e.onNext(<span class="number">4</span>);</div><div class="line">                requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"发送第四个事件之后， requested="</span> + requested);</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;, BackpressureStrategy.ERROR) <span class="comment">//策略</span></div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">                s.request(<span class="number">3</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onNext integer="</span> + integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                LogUtil.w(TAG, t);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>这里下游只能处理 3 个事件，但是上游却发出了 4 个，那么看看发出第四个事件时，会发生什么情况：</p><p><img src="https://i.imgur.com/dLRroTM.png" alt=""></p><p>抛出异常。</p><p>额外的一点，当下游没有调用 request 方法时，此时上游 requested 的返回值为 0 。</p><h3 id="异步订阅情况下"><a href="#异步订阅情况下" class="headerlink" title="异步订阅情况下"></a>异步订阅情况下</h3><p><img src="https://upload-images.jianshu.io/upload_images/944365-45e520e7016cf9fd.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable <span class="comment">//Observable --&gt; Flowable</span></div><div class="line">        .create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">long</span> requested = e.requested();</div><div class="line">                LogUtil.d(TAG, <span class="string">"没有发送事件前， requested="</span> + requested);</div><div class="line">            &#125;</div><div class="line">        &#125;, BackpressureStrategy.ERROR) <span class="comment">//策略</span></div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">                s.request(<span class="number">3</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onNext integer="</span> + integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                LogUtil.w(TAG, t);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>日志：</p><p><img src="https://i.imgur.com/FXUoosP.png" alt=""></p><p>这里我们可以看到，下游调用 request 表明自己处理事件的能力为 3 ，但是上游 requested 方法返回的值仍然是 128；</p><p>所以，<strong>当上下游二者处于不同线程，上游无法通过 FlowableEmitter.requested() 知道下游自身接收事件能力，即 上游不能根据 下游自身接收事件的能力 控制发送事件的速度。</strong></p><p><strong><font color="#ff0000">而在异步订阅关系中，反向控制的原理是：通过 RxJava 内部固定调用被观察者线程中的 request(n) 从而 反向控制被观察者的发送事件速度.</font></strong></p><p>那么什么时候在 RxJava 内部调用 request(n)，并且 n 等于多少呢？</p><p>看下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/944365-f6314aba60c08455.png" alt="image"></p><p>究竟是不是这样呢，还是要上代码来验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable <span class="comment">//Observable --&gt; Flowable</span></div><div class="line">        .create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"观察者可接收事件数量 = "</span> + e.requested());</div><div class="line">                <span class="keyword">boolean</span> flag; <span class="comment">//设置标记位控制</span></div><div class="line"></div><div class="line">                <span class="comment">// 被观察者一共需要发送500个事件</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">501</span>; i++) &#123;</div><div class="line">                    flag = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">                    <span class="comment">// 若requested() == 0则不发送</span></div><div class="line">                    <span class="keyword">while</span> (e.requested() == <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (!flag) &#123;</div><div class="line">                            Log.d(TAG, <span class="string">"不再发送"</span>);</div><div class="line">                            flag = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// requested() ≠ 0 才发送</span></div><div class="line">                    e.onNext(i);</div><div class="line">                    Log.d(TAG, <span class="string">"发送了事件"</span> + i + <span class="string">"，观察者可接收事件数量 = "</span> + e.requested());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;, BackpressureStrategy.ERROR) <span class="comment">//策略</span></div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">                mSubscription = s;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onNext integer="</span> + integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                LogUtil.w(TAG, t);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="meta">@OnClick</span>(R.id.id_btn_request)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    mSubscription.request(<span class="number">48</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>程序启动：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">02-25 16:38:53.177 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onSubscribe</div><div class="line">02-25 16:38:53.179 16487-16512/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== 观察者可接收事件数量 = 128</div><div class="line">02-25 16:38:53.180 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件1，观察者可接收事件数量 = 127</div><div class="line">02-25 16:38:53.180 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件2，观察者可接收事件数量 = 126</div><div class="line">02-25 16:38:53.180 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件3，观察者可接收事件数量 = 125</div><div class="line">02-25 16:38:53.180 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件4，观察者可接收事件数量 = 124</div><div class="line">....</div><div class="line">02-25 16:38:53.186 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件126，观察者可接收事件数量 = 2</div><div class="line">02-25 16:38:53.186 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件127，观察者可接收事件数量 = 1</div><div class="line">02-25 16:38:53.186 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件128，观察者可接收事件数量 = 0</div><div class="line">02-25 16:38:53.186 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 不再发送</div></pre></td></tr></table></figure><p>上游发送事件 1~128，下游没有接收任何事件</p><ul><li>第一次点击按钮调用 request(48):</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2-25 16:39:04.089 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=1</div><div class="line">02-25 16:39:04.089 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=2</div><div class="line">02-25 16:39:04.089 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=3</div><div class="line">02-25 16:39:04.089 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=4</div><div class="line">02-25 16:39:04.089 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=5</div><div class="line">...</div><div class="line">02-25 16:39:04.091 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=46</div><div class="line">02-25 16:39:04.091 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=47</div><div class="line">02-25 16:39:04.091 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=48</div></pre></td></tr></table></figure><p>从缓存池中取出 48 个事件(1~48)，且上游没有重新发送事件，此时下游观察者接收事件 n=48</p><ul><li>第二次点击按钮调用 request(48):</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">02-25 16:39:25.661 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=49</div><div class="line">02-25 16:39:25.661 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=50</div><div class="line">02-25 16:39:25.661 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=51</div><div class="line">02-25 16:39:25.661 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=52</div><div class="line">...</div><div class="line">02-25 16:39:25.663 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=94</div><div class="line">02-25 16:39:25.663 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=95</div><div class="line">02-25 16:39:25.663 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=96</div><div class="line">02-25 16:39:25.663 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件129，观察者可接收事件数量 = 95</div><div class="line">02-25 16:39:25.663 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件130，观察者可接收事件数量 = 94</div><div class="line">02-25 16:39:25.663 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件131，观察者可接收事件数量 = 93</div><div class="line">02-25 16:39:25.663 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件132，观察者可接收事件数量 = 92</div><div class="line">...</div><div class="line">02-25 16:39:25.667 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件222，观察者可接收事件数量 = 2</div><div class="line">02-25 16:39:25.667 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件223，观察者可接收事件数量 = 1</div><div class="line">02-25 16:39:25.667 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件224，观察者可接收事件数量 = 0</div><div class="line">02-25 16:39:25.667 16487-16512/com.rengwuxian.rxjavasamples D/==Test==: 不再发送</div></pre></td></tr></table></figure><p>从缓存池中取出 48 个事件(49~96)，此时下游观察者接收事件 n=96，满足条件了，所以上游接着发送 96 个事件（129~224）</p><ul><li>第三次点击按钮调用 request(48):</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">02-25 16:39:55.555 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=97</div><div class="line">02-25 16:39:55.555 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=98</div><div class="line">02-25 16:39:55.555 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=99</div><div class="line">...</div><div class="line">02-25 16:39:55.557 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=142</div><div class="line">02-25 16:39:55.557 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=143</div><div class="line">02-25 16:39:55.557 16487-16487/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=144</div></pre></td></tr></table></figure><p>从缓存池中取出 48 个事件(97~144)，此时下游观察者接收事件 n=48.</p><ul><li>第四次点击按钮调用 request(48):</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">02-25 17:01:33.844 25959-25959/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=145</div><div class="line">02-25 17:01:33.845 25959-25959/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=146</div><div class="line">02-25 17:01:33.845 25959-25959/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=147</div><div class="line">...</div><div class="line">02-25 17:01:33.846 25959-25959/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=190</div><div class="line">02-25 17:01:33.846 25959-25959/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=191</div><div class="line">02-25 17:01:33.846 25959-25959/com.rengwuxian.rxjavasamples D/===RxJavaSample==: ==Test== onNext integer=192</div><div class="line">02-25 17:01:33.846 25959-26028/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件225，观察者可接收事件数量 = 95</div><div class="line">02-25 17:01:33.846 25959-26028/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件226，观察者可接收事件数量 = 94</div><div class="line">02-25 17:01:33.846 25959-26028/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件227，观察者可接收事件数量 = 93</div><div class="line">...</div><div class="line">02-25 17:01:33.850 25959-26028/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件318，观察者可接收事件数量 = 2</div><div class="line">02-25 17:01:33.850 25959-26028/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件319，观察者可接收事件数量 = 1</div><div class="line">02-25 17:01:33.850 25959-26028/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件320，观察者可接收事件数量 = 0</div><div class="line">02-25 17:01:33.850 25959-26028/com.rengwuxian.rxjavasamples D/==Test==: 不再发送</div></pre></td></tr></table></figure><p>从缓存池中取出 48 个事件(145~192)，此时下游观察者接收事件 n=96，满足条件了，所以上游接着发送 96 个事件（225~320）</p><p>这个情况和第二次点击按钮情况一直。</p><p>到这里就可以证明上面图片的正确性了。</p><p>到这里，避免上下游流速不匹配的方法就讲完了，下游响应式拉取，上游根据下游的能力控制发送速度。但是万一流速已经不匹配了呢？接下来就是解决这个问题的。</p><h2 id="BackpressureStrategy-解决流速已经不匹配的问题"><a href="#BackpressureStrategy-解决流速已经不匹配的问题" class="headerlink" title="BackpressureStrategy 解决流速已经不匹配的问题"></a>BackpressureStrategy 解决流速已经不匹配的问题</h2><p>看看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Represents the options for applying backpressure to a source sequence.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> BackpressureStrategy &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * OnNext events are written without any buffering or dropping.</span></div><div class="line"><span class="comment">     * Downstream has to deal with any overflow.</span></div><div class="line"><span class="comment">     * &lt;p&gt;Useful when one applies one of the custom-parameter onBackpressureXXX operators.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    MISSING,</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Signals a MissingBackpressureException in case the downstream can't keep up.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    ERROR,</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Buffers &lt;em&gt;all&lt;/em&gt; onNext values until the downstream consumes it.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    BUFFER,</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Drops the most recent onNext value if the downstream can't keep up.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    DROP,</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Keeps only the latest onNext value, overwriting any previous value if the</span></div><div class="line"><span class="comment">     * downstream can't keep up.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    LATEST</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>根据注释，应该就可以很好的理解这几种策略了：</p><ul><li><p>MISSING：不丢弃不缓存的策略，给出友好提示 queue is full ？</p></li><li><p>ERROR：直接抛出 MissingBackpressureException 异常。</p></li><li><p>BUFFER：缓冲所有的 onNext 事件，直到下游消费它。就是相当于无限大的缓冲池。</p></li><li><p>DROP：当下游消费不了事件时，将事件直接丢弃</p></li><li><p>LATEST：当下游消费不了事件时，只向下游发送最近的事件</p></li></ul><p>一个一个的展示。</p><h3 id="BUFFER"><a href="#BUFFER" class="headerlink" title="BUFFER"></a>BUFFER</h3><blockquote><p>策略：使用大小不受限制的缓存池</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"emit "</span> + i);</div><div class="line">            emitter.onNext(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;, BackpressureStrategy.BUFFER) <span class="comment">//注意这里用的策略</span></div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onNext: "</span> + integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">02-25 17:40:47.655 18477-18477/com.rengwuxian.rxjavasamples D/==Test==: onSubscribe</div><div class="line">02-25 17:40:47.658 18477-18501/com.rengwuxian.rxjavasamples D/==Test==: emit 0</div><div class="line">02-25 17:40:47.658 18477-18501/com.rengwuxian.rxjavasamples D/==Test==: emit 1</div><div class="line">02-25 17:40:47.658 18477-18501/com.rengwuxian.rxjavasamples D/==Test==: emit 2</div><div class="line">...</div><div class="line">02-25 17:40:47.685 18477-18501/com.rengwuxian.rxjavasamples D/==Test==: emit 497</div><div class="line">02-25 17:40:47.685 18477-18501/com.rengwuxian.rxjavasamples D/==Test==: emit 498</div><div class="line">02-25 17:40:47.685 18477-18501/com.rengwuxian.rxjavasamples D/==Test==: emit 499</div></pre></td></tr></table></figure><p>使用无限大缓存池的 Flowable 表现出来的效果好像和 Observable 是一样的。但是单纯这种使用 Flowable 也需要注意 OOM 的情况，比如下面这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"emit "</span> + i);</div><div class="line">            emitter.onNext(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;, BackpressureStrategy.BUFFER)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onNext: "</span> + integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>日志和内存情况：</p><p><img src="https://i.imgur.com/r5N7sQz.gif" alt=""></p><blockquote><p>这里可以看到，即使使用容量无限大的缓存池，对内存的压力也是特别大的，只是和使用 Observable 比较起来，这里的增长速度是比较慢的。这也看出 FLowable 相比 Observable, 在性能方面有些不足, 毕竟FLowable内部为了实现响应式拉取做了更多的操作, 性能有所丢失也是在所难免, 因此单单只是说因为 FLowable 是新兴产物就盲目的使用也是不对的, 也要具体分场景.</p></blockquote><h3 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a>DROP</h3><blockquote><p>策略：丢弃超过缓存区大小(128)的事件。<br>比如发送 150 个事件，仅保存 1-128 个事件，129-150 个事件丢弃</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 发送150个事件</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; <span class="number">150</span>; i++) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"发送了事件"</span> + i);</div><div class="line">            emitter.onNext(i);</div><div class="line">        &#125;</div><div class="line">        emitter.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;, BackpressureStrategy.DROP)      <span class="comment">// 设置背压模式 = BackpressureStrategy.DROP</span></div><div class="line">        .subscribeOn(Schedulers.io()) <span class="comment">// 设置被观察者在io线程中进行</span></div><div class="line">        .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 设置观察者在主线程中进行</span></div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">                mSubscription = s;</div><div class="line">                <span class="comment">// 通过按钮进行接收事件</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>看看日志：</p><p><img src="https://i.imgur.com/Sy9jncs.gif" alt=""></p><p>下游只能从缓存池中取出前 128 个事件，后面再去取事件时，已经取不出来了，因为后面的时间已经被丢弃了，缓存池里没有其他的事件。</p><h3 id="LATEST"><a href="#LATEST" class="headerlink" title="LATEST"></a>LATEST</h3><blockquote><p>策略：只保存最新(最后)的事件，其他的事件丢弃</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@OnClick</span>(&#123;R.id.id_btn_request, R.id.id_btn_emitter&#125;)</div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (view.getId() == R.id.id_btn_request &amp;&amp; mSubscription != <span class="keyword">null</span>) &#123;</div><div class="line">          LogUtils.d(TAG,<span class="string">"Request button clicked"</span>);</div><div class="line">          mSubscription.request(<span class="number">128</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (view.getId() == R.id.id_btn_emitter) &#123;</div><div class="line">          LogUtils.d(TAG,<span class="string">"Emitter button clicked"</span>);</div><div class="line">          Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                  <span class="comment">// 发送150个事件</span></div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">150</span>; i++) &#123;</div><div class="line">                      Log.d(TAG, <span class="string">"发送了事件"</span> + i);</div><div class="line">                      emitter.onNext(i);</div><div class="line">                  &#125;</div><div class="line">                  emitter.onComplete();</div><div class="line">              &#125;</div><div class="line">          &#125;, BackpressureStrategy.LATEST)      <span class="comment">// 设置背压模式 = BackpressureStrategy.DROP</span></div><div class="line">                  .subscribeOn(Schedulers.io()) <span class="comment">// 设置被观察者在io线程中进行</span></div><div class="line">                  .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 设置观察者在主线程中进行</span></div><div class="line">                  .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">                      <span class="meta">@Override</span></div><div class="line">                      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                          Log.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">                          mSubscription = s;</div><div class="line">                          <span class="comment">// 通过按钮进行接收事件</span></div><div class="line">                      &#125;</div><div class="line"></div><div class="line">                      <span class="meta">@Override</span></div><div class="line">                      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                          Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</div><div class="line">                      &#125;</div><div class="line"></div><div class="line">                      <span class="meta">@Override</span></div><div class="line">                      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                          Log.w(TAG, <span class="string">"onError: "</span>, t);</div><div class="line">                      &#125;</div><div class="line"></div><div class="line">                      <span class="meta">@Override</span></div><div class="line">                      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                          Log.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line">                      &#125;</div><div class="line">                  &#125;);</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/DFeA1hJ.gif" alt=""></p><p>下游第一次接受到了前 128 个事件， 第二次接收到了 第 150 个事件，其他事件都没有收到。</p><p>这里就体现出 DROP 和 LATEST 的区别了。</p><h3 id="MISSING"><a href="#MISSING" class="headerlink" title="MISSING"></a>MISSING</h3><blockquote><p>策略和 ERROR 的体现方式类似，只是给出友好提示</p></blockquote><p>这里就不贴出代码只贴出日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">20.493</span> <span class="number">13037</span>-<span class="number">13037</span>/com.rengwuxian.rxjavasamples D/==Test==: onSubscribe</div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">20.495</span> <span class="number">13037</span>-<span class="number">13060</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">0</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">20.496</span> <span class="number">13037</span>-<span class="number">13060</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">1</span></div><div class="line">...</div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">20.501</span> <span class="number">13037</span>-<span class="number">13060</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">127</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">20.501</span> <span class="number">13037</span>-<span class="number">13060</span>/com.rengwuxian.rxjavasamples D/==Test==: 发送了事件<span class="number">128</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">11</span>:<span class="number">23</span>:<span class="number">20.521</span> <span class="number">13037</span>-<span class="number">13037</span>/com.rengwuxian.rxjavasamples W/==Test==: onError: </div><div class="line">                                                                        io.reactivex.exceptions.MissingBackpressureException: Queue is full?!</div><div class="line">                                                                            at io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.onNext(FlowableObserveOn.java:<span class="number">114</span>)</div><div class="line">                                                                            at io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.onNext(FlowableSubscribeOn.java:<span class="number">97</span>)</div><div class="line">                                                                            at io.reactivex.internal.operators.flowable.FlowableCreate$MissingEmitter.onNext(FlowableCreate.java:<span class="number">338</span>)</div><div class="line">                                                                            at com.rengwuxian.rxjavasamples.Test$<span class="number">2</span>.subscribe(Test.java:<span class="number">52</span>)</div><div class="line">                                                                            at io.reactivex.internal.operators.flowable.FlowableCreate.subscribeActual(FlowableCreate.java:<span class="number">72</span>)</div><div class="line">                                                                            at io.reactivex.Flowable.subscribe(Flowable.java:<span class="number">12970</span>)</div><div class="line">                                                                            at io.reactivex.Flowable.subscribe(Flowable.java:<span class="number">12917</span>)</div><div class="line">                                                                            at io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.run(FlowableSubscribeOn.java:<span class="number">82</span>)</div><div class="line">                                                                            at io.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:<span class="number">59</span>)</div><div class="line">                                                                            at io.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:<span class="number">51</span>)</div><div class="line">                                                                            at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">237</span>)</div><div class="line">                                                                            at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:<span class="number">272</span>)</div><div class="line">                                                                            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1133</span>)</div><div class="line">                                                                            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">607</span>)</div><div class="line">                                                                            at java.lang.Thread.run(Thread.java:<span class="number">760</span>)</div></pre></td></tr></table></figure><h2 id="当-Flowable-不是我们自己创建时"><a href="#当-Flowable-不是我们自己创建时" class="headerlink" title="当 Flowable 不是我们自己创建时"></a>当 Flowable 不是我们自己创建时</h2><p>上面例子中红的 Flowable 都是我们自己手动创建的，但是存在部分情况 Flowable 不是右我们自己创建的，比如使用 interval 操作符创建 Flowable ， 那么这种情况下当流速不匹配时如何选择背压策略呢？</p><blockquote><p>intetval 操作符：<img src="http://reactivex.io/documentation/operators/images/interval.c.png" alt=""><br>Interval运算符返回一个 Observable / Flowable，它发出一个升序整数(Long 类型)的无限序列，并在发射之间选择一个固定的时间间隔，默认运行在一个新的线程上。</p></blockquote><p>看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable.interval(<span class="number">1</span>, TimeUnit.MILLISECONDS) <span class="comment">// 1秒发送1000个事件</span></div><div class="line">                .observeOn(Schedulers.newThread()) <span class="comment">// 观察者同样工作在一个新开线程中</span></div><div class="line">                .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                        Log.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">                        mSubscription = s;</div><div class="line">                        s.request(Long.MAX_VALUE); <span class="comment">//默认可以接收Long.MAX_VALUE个事件</span></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                        Log.d(TAG, <span class="string">"onNext: "</span> + aLong);</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                        Log.w(TAG, <span class="string">"onError: "</span>, t);</div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                        Log.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure><p>日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">11</span>:<span class="number">59</span>:<span class="number">29.497</span> <span class="number">3959</span>-<span class="number">3959</span>/com.rengwuxian.rxjavasamples D/==Test==: onSubscribe</div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">11</span>:<span class="number">59</span>:<span class="number">29.501</span> <span class="number">3959</span>-<span class="number">4126</span>/com.rengwuxian.rxjavasamples D/==Test==: onNext: <span class="number">0</span></div><div class="line"><span class="number">02</span>-<span class="number">26</span> <span class="number">11</span>:<span class="number">59</span>:<span class="number">30.508</span> <span class="number">3959</span>-<span class="number">4126</span>/com.rengwuxian.rxjavasamples W/==Test==: onError: </div><div class="line">                                                                      io.reactivex.exceptions.MissingBackpressureException: Can<span class="string">'t deliver value 128 due to lack of requests</span></div><div class="line"><span class="string">                                                                          at io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.run(FlowableInterval.java:87)</span></div><div class="line"><span class="string">                                                                          at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:428)</span></div><div class="line"><span class="string">                                                                          at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:278)</span></div><div class="line"><span class="string">                                                                          at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:273)</span></div><div class="line"><span class="string">                                                                          at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)</span></div><div class="line"><span class="string">                                                                          at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)</span></div><div class="line"><span class="string">                                                                          at java.lang.Thread.run(Thread.java:760)</span></div></pre></td></tr></table></figure><p>这是没有采取背压策略，缓冲区马上被充满，然后抛出 MissingBackpressureException 。</p><p>如何解决？</p><p>上面抛出的异常是因为 RxJava2.0 在内部已经封装好了策略，默认使用的是 ERROR 策略，还有其他的三种：</p><ul><li>onBackpressureBuffer()</li><li>onBackpressureDrop()</li><li>onBackpressureLatest()</li></ul><p>使用 DROP 策略看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Flowable.interval(<span class="number">1</span>, TimeUnit.MILLISECONDS) <span class="comment">// 1秒发送1000个事件</span></div><div class="line">        .onBackpressureDrop()<span class="comment">// 采用 DROP 策略</span></div><div class="line">        .observeOn(Schedulers.newThread()) <span class="comment">// 观察者同样工作在一个新开线程中</span></div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</div><div class="line">                mSubscription = s;</div><div class="line">                s.request(Long.MAX_VALUE); <span class="comment">//默认可以接收Long.MAX_VALUE个事件</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onNext: "</span> + aLong);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">100</span>);</div><div class="line"></div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>日志：</p><p><img src="https://i.imgur.com/5DNSzwe.gif" alt=""></p><p>注意 127 之后的序列，符合 DROP 的策略模式。</p><p>其他两种就不做演示了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://upload-images.jianshu.io/upload_images/944365-1be234a3c566c7bc.png" alt=""></p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cCjinS0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;理解 RxJava2 中的被压策略&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://zengfanyu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>一口一口啃完Java中的24种设计模式---适配器模式</title>
    <link href="http://zengfanyu.top/2018/02/24/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zengfanyu.top/2018/02/24/适配器模式/</id>
    <published>2018-02-24T06:36:16.000Z</published>
    <updated>2018-02-28T14:01:55.171Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NSZhu74.png" alt=""><br><a id="more"></a><br>&gt;</p><h1 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h1><p>日常使用的笔记本的工作电压为 20v ，但是我国家庭用电的电压为 220V ，为了让笔记本电脑可以在国内所有的插座上充电使用，这里就会引入一个电源适配器，如图：</p><p><img src="http://wiki.jikexueyuan.com/project/design-pattern-structurized/images/1362066387_9870.jpg" alt="电源适配器"></p><p>有了这个电源适配器之后，生活用电和笔记本电脑用电的电压就可以兼容。这里体现出来的设计模式就是 <strong>适配器模式</strong>。</p><h1 id="对象适配器模式概述"><a href="#对象适配器模式概述" class="headerlink" title="对象适配器模式概述"></a>对象适配器模式概述</h1><p>与笔记本电脑的电源适配器类似，在适配器模式中引入了一个被称为适配器（Adapter）的包装类，而它所包装的对象叫做适配者（Adaptee），即被适配的类。适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。也就是说：当客户类调用适配器的方法时，在适配器类的内部将调用适配者类的方法，而这个过程对客户类是透明的，客户类并不直接访问适配者类。因此，适配器让那些由于接口不兼容而不能交互的类可以一起工作。</p><blockquote><p>【注：在适配器模式定义中所提及的 <strong>接口</strong> 是指广义的接口，它可以表示一个方法或者方法的集合。】</p></blockquote><p>在适配器模式中，我们通过新增一个适配器类来解决接口不兼容的问题，使原本没有任何关系的类可以协同使用。</p><p>适配器模式有两种实现方式，这里先说其中一种，<strong>对象适配器模式</strong>，UML 图：</p><p><img src="https://i.imgur.com/BG0x751.png" alt=""></p><p>在对象适配器模式结构图中包含如下几个角色：</p><ul><li><p>Target（目标抽象类）：目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以是具体类。</p></li><li><p>Adapter（适配器类）：适配器可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配，适配器类是适配器模式的核心，在对象适配器中，它通过继承Target并关联一个Adaptee对象使二者产生联系。</p></li><li><p>Adaptee（适配者类）：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体类，包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。</p></li></ul><p>根据对象适配器模式结构图，在对象适配器中，客户端需要调用 request() 方法，而适配者类 Adaptee 没有该方法，但是它所提供的 specificRequest() 方法却是客户端所需要的。为了使客户端能够使用适配者类，需要提供一个包装类 Adapter，即适配器类。这个包装类包装了一个适配者的实例，从而将客户端与适配者衔接起来，在适配器的 request() 方法中调用适配者的 specificRequest() 方法。因为适配器类与适配者类是关联关系（也可称之为委派关系），所以这种适配器模式称为对象适配器模式。</p><h1 id="没有源码的算法库的适配器解决方案"><a href="#没有源码的算法库的适配器解决方案" class="headerlink" title="没有源码的算法库的适配器解决方案"></a>没有源码的算法库的适配器解决方案</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>背景：某公司之前开发过一个算法库，其中包括常用的算法，例如查找算法、排序算法等，在进行各类软件开发时经常会用到这个算法库。在为某学校开发教务管理系统时，开发人员发现需要对学生成绩进行排序和查找，该系统的设计人员已经开发了一个成绩操作接口 ScoreOperation，在该接口中声明了排序方法 sort(int[]) 和查找方法 search(int[], int)，为了提高排序和查找的效率，开发人员决定重用算法库中的快速排序算法类 QuickSort 和二分查找算法类 BinarySearch，其中 QuickSort 的 quickSort(int[]) 方法实现了快速排序，BinarySearch 的 binarySearch (int[], int) 方法实现了二分查找。</p><p>但由于某些原因，开发人员现在找不到该算法库的源码，不能通过复制粘贴的方式去实现 ScoreOperation 中的方法，并且部分开发人员已经针对 ScoreOperation 的接口进行了编程，如果再要求对该接口进行修改或要求大家直接使用 QuickSort 类和 BinarySearch 类将导致大量代码需要修改。</p></blockquote><p>现在的问题就是：如何在既不修改现有接口又不需要任何算法库代码的基础上能够实现算法库的重用？</p><p>因为 ScoreOperation 接口已经确定，并且基于该接口已经进行了后续的开发了，所以这个接口肯定是不能修改的，而算法库已经引用到各类软件中，修改算法库的代价太大也没有必要，这是就要可以引入一个适配器 Adapter， 将算法库的接口适配成 ScoreOperation 的接口。</p><h2 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图"></a>UML 图</h2><p>结合上述对适配器模式的讲解，这个问题很符合适配器模式可以解决范围，UML 结构图如下：</p><p><img src="https://i.imgur.com/Kw3iplh.png" alt=""></p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 成绩操作接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/24 11:14</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScoreOperation</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 对成绩进行排序</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> array 成绩数组</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 排序过后的成绩数组</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 查找某一特定成绩</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> array 成绩数组</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> key   特定成绩</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 若成绩数据中存在该特定成绩，则返回该特定成绩在成绩数组中的索引，否则返回 -1</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> key)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="adaptee"><a href="#adaptee" class="headerlink" title="adaptee"></a>adaptee</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 快速排序工具类</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/24 11:18</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span> array[]) &#123;</div><div class="line">        sort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> array;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> q = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (p &lt; r) &#123;</div><div class="line">            q = partition(array, p, r);</div><div class="line">            sort(array, p, q - <span class="number">1</span>);</div><div class="line">            sort(array, q + <span class="number">1</span>, r);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> x = a[r];</div><div class="line">        <span class="keyword">int</span> j = p - <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt;= r - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (a[i] &lt;= x) &#123;</div><div class="line">                j++;</div><div class="line">                swap(a, j, i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        swap(a, j + <span class="number">1</span>, r);</div><div class="line">        <span class="keyword">return</span> j + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> t = a[i];</div><div class="line">        a[i] = a[j];</div><div class="line">        a[j] = t;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 二分查找工具类</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/24 11:18</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearch</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> key)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> high = array.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> midVal = array[mid];</div><div class="line">            <span class="keyword">if</span> (midVal &lt; key) &#123;</div><div class="line">                low = mid + <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; key) &#123;</div><div class="line">                high = mid - <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> mid; <span class="comment">//找到元素返回索引</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">//未找到元素返回-1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="adapter"><a href="#adapter" class="headerlink" title="adapter"></a>adapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/24 11:22</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationAdapter</span> <span class="keyword">implements</span> <span class="title">ScoreOperation</span> </span>&#123;</div><div class="line">    <span class="comment">//适配者</span></div><div class="line">    <span class="keyword">private</span> BinarySearch mBinarySearch;</div><div class="line">    <span class="comment">//适配者</span></div><div class="line">    <span class="keyword">private</span> QuickSort mQuickSort;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OperationAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">        mBinarySearch = <span class="keyword">new</span> BinarySearch();</div><div class="line">        mQuickSort = <span class="keyword">new</span> QuickSort();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array) &#123;</div><div class="line">        <span class="comment">//调用适配者的快排方法</span></div><div class="line">        <span class="keyword">return</span> mQuickSort.quickSort(array);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> key)</span> </span>&#123;</div><div class="line">        <span class="comment">//调用适配者的二分查找方法</span></div><div class="line">        <span class="keyword">return</span> mBinarySearch.binarySearch(array, key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/24 11:23</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ScoreOperation operation;  <span class="comment">//针对抽象目标接口编程</span></div><div class="line">        operation = <span class="keyword">new</span> OperationAdapter();</div><div class="line">        <span class="keyword">int</span> scores[] = &#123;<span class="number">84</span>, <span class="number">76</span>, <span class="number">50</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">88</span>, <span class="number">96</span>&#125;; <span class="comment">//定义成绩数组</span></div><div class="line">        <span class="keyword">int</span> result[];</div><div class="line">        <span class="keyword">int</span> index;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"成绩排序结果："</span>);</div><div class="line">        result = operation.sort(scores);</div><div class="line"></div><div class="line">        <span class="comment">//遍历输出成绩</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : scores) &#123;</div><div class="line">            System.out.print(i + <span class="string">","</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"查找成绩90："</span>);</div><div class="line">        index = operation.search(result, <span class="number">90</span>);</div><div class="line">        <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"找到成绩90。在数组中的所因为："</span> + index);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"没有找到成绩90。"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"查找成绩92："</span>);</div><div class="line">        index = operation.search(result, <span class="number">92</span>);</div><div class="line">        <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"找到成绩92。在数组中的所因为："</span> + index);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"没有找到成绩92。"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出为：</p><pre><code>成绩排序结果：50,69,76,84,88,90,91,96,查找成绩90：找到成绩90。查找成绩92：没有找到成绩92。</code></pre><h1 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h1><p>除了对象适配器模式之外，适配器模式还有一种形式，那就是 <strong>类适配器模式</strong>，类适配器模式和对象适配器模式最大的区别在于适配器和适配者之间的关系不同，对象适配器模式中适配器和适配者之间是<strong>关联</strong>关系，而类适配器模式中适配器和适配者是<strong>继承</strong>关系，类适配器模式结构如图所示：</p><p><img src="https://i.imgur.com/8x1Uzph.png" alt=""></p><p>典型代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">calss Adapter imlements Target extends Adaptee&#123;</div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</div><div class="line">        specificRequest();</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于 Java、C# 等语言不支持多重类继承，因此类适配器的使用受到很多限制，例如如果目标抽象类 Target 不是接口，而是一个类，就无法使用类适配器；此外，如果适配者 Adapter 为最终（Final）类，也无法使用类适配器。在 Java 等面向对象编程语言中，大部分情况下我们使用的是对象适配器，<strong>类适配器较少使用</strong>。</p><h1 id="缺省适配器"><a href="#缺省适配器" class="headerlink" title="缺省适配器"></a>缺省适配器</h1><p>缺省适配器模式是适配器模式的一种变体，其应用也较为广泛。缺省适配器模式的定义如下： 缺省适配器模式(Default Adapter Pattern)：当不需要实现一个接口所提供的所有方法时，可先设计一个抽象类实现该接口，并为接口中每个方法提供一个<strong>默认实现（空方法）</strong>，那么该抽象类的子类可以<strong>选择性地覆盖</strong>父类的某些方法来实现需求，它适用于不想使用一个接口中的所有方法的情况，又称为单接口适配器模式。UML 图如下：</p><p><img src="https://i.imgur.com/hS9XFYl.png" alt=""></p><p>在缺省适配器模式中，包含如下三个角色：</p><ul><li><p>ServiceInterface（适配者接口）：它是一个接口，通常在该接口中声明了大量的方法。</p></li><li><p>AbstractServiceClass（缺省适配器类）：它是缺省适配器模式的核心类，使用空方法的形式实现了在 ServiceInterface 接口中声明的方法。通常将它定义为抽象类，因为对它进行实例化没有任何意义。</p></li><li><p>ConcreteServiceClass（具体业务类）：它是缺省适配器类的子类，在没有引入适配器之前，它需要实现适配者接口，因此需要实现在适配者接口中定义的所有方法，而对于一些无须使用的方法也不得不提供空实现。在有了缺省适配器之后，可以直接继承该适配器类，根据需要有选择性地覆盖在适配器类中定义的方法。</p></li></ul><p>在 JDK 类库的事件处理包 java.awt.event 中广泛使用了缺省适配器模式，如 WindowAdapter、KeyAdapter、MouseAdapter 等。下面我们以处理窗口事件为例来进行说明：在 Java 语言中，一般我们可以使用两种方式来实现窗口事件处理类，<strong>一种是通过实现 WindowListener 接口，另一种是通过继承 WindowAdapter 适配器类</strong>。</p><p>如果是使用第一种方式，直接实现 WindowListener 接口，事件处理类需要实现在该接口中定义的七个方法，而对于大部分需求可能只需要实现一两个方法，其他方法都无须实现，但由于语言特性我们不得不为其他方法也提供一个简单的实现（通常是空实现），这给使用带来了麻烦。</p><p>而使用缺省适配器模式就可以很好地解决这一问题，在 JDK 中提供了一个适配器类 WindowAdapter 来实现 WindowListener 接口，该适配器类为接口中的每一个方法都提供了一个空实现，此时事件处理类可以继承 WindowAdapter 类，而无须再为接口中的每个方法都提供实现。</p><h1 id="适配器模式总结"><a href="#适配器模式总结" class="headerlink" title="适配器模式总结"></a>适配器模式总结</h1><h2 id="主要优点"><a href="#主要优点" class="headerlink" title="主要优点"></a>主要优点</h2><p>无论是对象适配器模式还是类适配器模式都具有如下优点：</p><p>(1) 将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构。</p><p>(2) 增加了类的透明性和复用性，将具体的业务实现过程封装在适配者类中，对于客户端类而言是透明的，而且提高了适配者的复用性，同一个适配者类可以在多个不同的系统中复用。</p><p>(3) 灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。</p><p>具体来说，类适配器模式还有如下优点：</p><p>由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器的灵活性更强。</p><p>对象适配器模式还有如下优点：</p><p>(1) 一个对象适配器可以把多个不同的适配者适配到同一个目标；</p><p>(2) 可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可通过该适配器进行适配。</p><h2 id="主要缺点"><a href="#主要缺点" class="headerlink" title="主要缺点"></a>主要缺点</h2><p>类适配器模式的缺点如下：</p><p>(1) 对于 Java、C# 等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；</p><p>(2) 适配者类不能为最终类，如在 Java 中不能为 final 类，C# 中不能为 sealed 类；</p><p>(3) 在 Java、C# 等语言中，类适配器模式中的目标抽象类只能为接口，不能为类，其使用有一定的局限性。</p><p>对象适配器模式的缺点如下：</p><p>与类适配器模式相比，要在适配器中置换适配者类的某些方法比较麻烦。如果一定要置换掉适配者类的一个或多个方法，可以先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>在以下情况下可以考虑使用适配器模式：</p><p>(1) 系统需要使用一些现有的类，而这些类的接口（如方法名）不符合系统的需要，甚至没有这些类的源代码。</p><p>(2) 想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NSZhu74.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Design Patterns" scheme="http://zengfanyu.top/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://zengfanyu.top/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>只因为在众多框架中多看了你一眼 RxJava （五） 背压问题引入</title>
    <link href="http://zengfanyu.top/2018/02/24/RxJava5/"/>
    <id>http://zengfanyu.top/2018/02/24/RxJava5/</id>
    <published>2018-02-24T06:16:16.000Z</published>
    <updated>2018-02-28T13:54:00.606Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/cCjinS0.png" alt=""></p><p>背压问题的引入</p><a id="more"></a><font face="黑体"><h1 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h1><p>在上一篇文章中谈到了 zip 操作符，其中 Observer 接收到的事件的数量是发送事件数量虽少的 Observable 发送的个数。那么现在有一种情况，如果有一个 Observable1 一直在发送事件，而 Observable2 只发送一个事件，并且两个 Observable 都不调用 onComplete 方法，那么这时 Observer 接收事件的顺序是怎么样的的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable&lt;Integer&gt; observable1 = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            e.onNext(i++);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io());</div><div class="line"></div><div class="line">Observable&lt;String&gt; observable2 = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        e.onNext(<span class="string">"A"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io());</div><div class="line"></div><div class="line">Observable</div><div class="line">        .zip(observable1, observable2, <span class="keyword">new</span> BiFunction&lt;Integer, String, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Integer integer, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer + s;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                LogUtil.d(TAG, s);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                LogUtil.e(TAG, throwable.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>可以看到 Observable1 以机器指令的执行速度循环发送 onNext 事件，Observable2 只发送一个 onNext 事件，并且 Observable1 Observable2 Obserber 分别在各自的线程中执行。</p><p>看看内存占用情况。</p><p><img src="https://i.imgur.com/wsRBAAK.gif" alt=""></p><p>是的，OOM 了，占用内存飙升到 500+M，报错信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">W/art: Throwing OutOfMemoryError <span class="string">"Failed to allocate a 28 byte allocation with 360 free bytes and 360B until OOM; failed due to fragmentation (required continguous free 4096 bytes for a new buffer where largest contiguous free 0 bytes)"</span> (recursive <span class="keyword">case</span>)</div><div class="line">W/art: <span class="string">"RxCachedThreadScheduler-1"</span> daemon prio=<span class="number">5</span> tid=<span class="number">17</span> Runnable</div><div class="line">W/art:   | group=<span class="string">"main"</span> sCount=<span class="number">0</span> dsCount=<span class="number">0</span> obj=<span class="number">0x32c06940</span> self=<span class="number">0x7fa349b600</span></div><div class="line">W/art:   | sysTid=<span class="number">28826</span> nice=<span class="number">0</span> cgrp=<span class="keyword">default</span> sched=<span class="number">0</span>/<span class="number">0</span> handle=<span class="number">0x7f94aba450</span></div><div class="line">W/art:   | state=R schedstat=( <span class="number">20565055506</span> <span class="number">41440899</span> <span class="number">661</span> ) utm=<span class="number">1941</span> stm=<span class="number">115</span> core=<span class="number">4</span> HZ=<span class="number">100</span></div><div class="line">W/art:   | stack=<span class="number">0x7f949b8000</span>-<span class="number">0x7f949ba000</span> stackSize=<span class="number">1037</span>KB</div><div class="line">W/art:   | held mutexes= <span class="string">"mutator lock"</span>(shared held)</div><div class="line">W/art:     at io.reactivex.plugins.RxJavaPlugins.onError(RxJavaPlugins.java:<span class="number">366</span>)</div><div class="line">W/art:     at io.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:<span class="number">62</span>)</div><div class="line">W/art:     at io.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:<span class="number">51</span>)</div><div class="line">W/art:     at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">237</span>)</div><div class="line">W/art:     at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:<span class="number">272</span>)</div><div class="line">W/art:     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1133</span>)</div><div class="line">W/art:     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">607</span>)</div><div class="line">W/art:     at java.lang.Thread.run(Thread.java:<span class="number">760</span>)</div></pre></td></tr></table></figure><p>为什么会这样呢？ 这里先不解释。</p><p>现在讲问题简化一下，只使用一个 Observable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable</div><div class="line">        .create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    e.onNext(i++);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">                LogUtil.d(TAG, integer + <span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>发送端循环发送事件，接收端接收处理事件前延迟 2 秒，并且两段工作在同一个线程中。</p><p><img src="https://i.imgur.com/wh0KS2p.gif" alt=""></p><p>似乎很平静，和想象当中的不一样。</p><p>但是如果将发送端和接收端放置在不同的线程中会是什么情况呢？</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable</div><div class="line">        .create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    e.onNext(i++);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">                LogUtil.d(TAG, integer + <span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>发送端在 io 线程，接收端在主线程。</p><p><img src="https://i.imgur.com/PVkp8ZE.gif" alt=""></p><p>又像脱缰的野马一样，直接 OOM了。</p><p>为什么同一线程和不同线程区别这么大呢？这里就涉及到同步和异步的知识。</p><ul><li><p>当接收端和发送端在同一个线程中时，这时是一种同步订阅关系，既然是同步的，那么发送端就必须等接收端处理完一个事件之后才可以去发送下一个事件。<br><img src="https://upload-images.jianshu.io/upload_images/1008453-3cb28e0f4f3ac788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/580" alt=""></p></li><li><p>当接收端和发送端在不同线程中时，这时是一种异步订阅关系，此时两个线程不能直接进行通讯，所以有一个异步的「缓存池」用于缓存接收端来不及处理的发送端发送的数据，因此当发送端发送速度太快，接收端取出事件处理速度太慢，缓存池就会阻塞溢出，最后导致 OOM。<br><img src="https://upload-images.jianshu.io/upload_images/1008453-785506a07f98d30a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/607" alt=""></p></li></ul><p>同步订阅和异步订阅的区别在于是否有「缓存池」，那么到这里问题的源头也知道了，只要有缓存池就会出现发送端和接收端速度不平衡的情况。那么如何解决这种问题呢？</p><p>总结一下两种订阅关系：</p><p><img src="https://upload-images.jianshu.io/upload_images/944365-a8ca5dd7f71bd781.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></p><p>到这里对「背压」就有了一个直观的了解了，可以这么理解：</p><blockquote><p>被观察者发送消息太快以至于它的操作符或者订阅者不能及时处理相关的消息，从而操作消息的阻塞现象。</p></blockquote><h1 id="如何解决阻塞"><a href="#如何解决阻塞" class="headerlink" title="如何解决阻塞"></a>如何解决阻塞</h1><p>首先，我们分析阻塞形成的原因，无非是因为下面的原因啊：</p><ol><li>上游的水流过快（发送端发送事件过快）</li><li>上游的水流过大（接收端发送事件过多）</li></ol><p>总结来说就是短时间发送的事件过多，接收端忙不过来！</p><p>那么先使用第一种方法，让事件发送的顺序慢一点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable</div><div class="line">        .create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    Thread.sleep(<span class="number">2000</span>);</div><div class="line">                    e.onNext(i++);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            </div><div class="line">                LogUtil.d(TAG, integer + <span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>还是看看日志和内存</p><p><img src="https://i.imgur.com/V35cOOL.gif" alt=""></p><p>稳稳地，没毛病。</p><p>再试试第二种方法，下游少接收一点事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable</div><div class="line">        .create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    e.onNext(i++);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .filter(<span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer % <span class="number">100</span> == <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                LogUtil.d(TAG, integer + <span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>这里只接收 100 的整数倍事件，看看日志：</p><p><img src="https://i.imgur.com/VnI63v3.gif" alt=""></p><p>这种情况，内存还是会爆掉，但是速度会相对来说慢一点。</p><p>那么在这里，对文章开头的 zip 操作符的例子，就可以使用上述两个方法去解决，这里就不写出代码了。</p><p>上面唠唠叨叨说了那么多，基本上也给是阐明了阻塞形成的原因和解决阻塞的方法，基本策略就是减少发送事件的频率和减少发送事件的数量。</p><p>But……</p><p>我们手动让上游发送事件的速度满下来貌似是不可取的，你想让上游的速度是多快呢？上游需要等多久呢？</p><p>还有……</p><p>我们依旧无法知道下游处理事件的能力，无法很好地处理阻塞的事件。</p><p>所以这个时候，RxJava2 很好的支持了背压，对阻塞进行了比较好的处理。</p><p>下一篇详细讲解 RxJava2.0 中的背压策略。</p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cCjinS0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;背压问题的引入&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://zengfanyu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>一口一口啃完Java中的24种设计模式---代理模式</title>
    <link href="http://zengfanyu.top/2018/02/10/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zengfanyu.top/2018/02/10/代理模式/</id>
    <published>2018-02-10T08:49:16.000Z</published>
    <updated>2018-02-10T08:50:29.602Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NSZhu74.png" alt=""><br><a id="more"></a></p><font face="黑体"><h1 id="代理模式的引入"><a href="#代理模式的引入" class="headerlink" title="代理模式的引入"></a>代理模式的引入</h1><p>东汉末年，大将军何进引董卓入京，想借西北王的军队对抗阉党，无奈自己先被阉党做掉，而后造成巨变，导致诸侯并起，最终形成三国鼎立局面。汉献帝即位后，初平三年（公元 192 年），治中从事毛玠向曹操建议“奉天子以令不臣”，曹操采纳了他的建议，迎接汉献帝来到许昌。汉献帝刘协在许都没有实际的权利，曹操不断地诛除公卿大臣，不断地集军政大权于一身。建安元年八月，曹操进驻洛阳，立刻趁张杨、杨奉兵众在外，赶跑了韩暹，接着做了三件事：杀侍中台崇、尚书冯硕等，谓“讨有罪”；封董承、伏完等，谓“赏有功”；追赐射声校尉沮俊，谓“矜死节”。然后在第九天趁他人尚未来得及反应的情况下，迁帝都许，使皇帝摆脱其他势力的控制。此后，他还加紧步伐剪除异己，提高自己的权势。他首先向最有影响力的三公发难，罢免太尉杨彪、司空张喜；其次诛杀议郎赵彦；再次是发兵征讨杨奉，解除近兵之忧；最后是一方面以天子名义谴责袁绍，打击其气焰，另一方面将大将军让予袁绍，稳定大敌。这就是历史上著名的<strong>“挟天子以令诸侯”</strong>。汉献帝与曹操的关系，是历史上两位伟大的政治家的联手，稳定了东汉政权，最终平稳交接给曹魏政权，也间接映射了<strong>“代理模式”</strong>。</p><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理模式使用代理对象完成用户请求，屏蔽用户对真实对象的访问。现实世界的代理人被授权执行当事人的一些事宜，无需当事人出面，从第三方的角度看，似乎当事人并不存在，因为他只和代理人通信。而事实上代理人是要有当事人的授权，并且在核心问题上还需要请示当事人。<br>在软件设计中，使用代理模式的意图也很多，比如因为安全原因需要屏蔽客户端直接访问真实对象，或者在远程调用中需要使用代理类处理远程方法调用的技术细节 ，也可能为了提升系统性能，对真实对象进行封装，从而达到延迟加载的目的。</p><p>代理模式角色分为 4 种：</p><ol><li><p>主题接口：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；</p></li><li><p>真实主题：真正实现业务逻辑的类</p></li><li><p>代理主题：用于代理和封装真实主题</p></li><li><p>客户端：面向主题接口，使用代理主题完成一些工作。</p></li></ol><p>UML 图如下：</p><p><img src="https://i.imgur.com/0nUXFAK.png" alt=""></p><p>但是在实际开发中，代理类的实现比上述 UML 要复杂的多，代理模式根据其目的和实现方式不同可以分为很多种类，下面列举几种常用的代理模式：</p><p>(1) 远程代理（Remote Proxy）：为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在另一台主机中，远程代理又称为大使（Ambassador）。</p><p>(2) 虚拟代理（Virtual Proxy）：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。</p><p>(3) 保护代理（Protect Proxy）：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</p><p>(4) 缓冲代理（Cache Proxy）：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。</p><p>(5) 智能引用代理（Smart Reference Proxy）：当一个对象被引用时，提供一些额外的操作，例如将对象被调用的次数记录下来等。</p><p>在这些常用的代理模式中，有些代理类的设计非常复杂，例如远程代理类，它封装了底层网络通信和对远程对象的调用，其实现较为复杂。</p><h1 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h1><h2 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h2><blockquote><p>开发一个商务信息查询系统，要求如下：</p><p>(1) 在进行商务信息查询之前用户需要通过<strong>身份验证</strong>，只有合法用户才能够使用该查询系统；</p><p>(2) 在进行商务信息查询时系统需要<strong>记录查询日志</strong>，以便根据查询次数收取查询费用。</p><p>假设已经完成了商务信息查询模块的开发任务，现希望能够以一种松耦合的方式向原有系统增加身份验证和日志记录功能，客户端代码可以无区别地对待原始的商务信息查询模块和增加新功能之后的商务信息查询模块，而且可能在将来还要在该信息查询模块中增加一些新的功能。</p></blockquote><p>根据上述 UML 图，对这个系统进行建模：</p><p><img src="https://i.imgur.com/MR78HGR.png" alt=""></p><p>根据上述需求「已经开发完成的商务信息查询模块」在图中用 RealSearcher 表示，其中用于查询信息的方法为 doSearch ，<br>按照代理模式的思想，将 doSearch 这个方法给抽象出来，放置到 Search 接口中，然后 RealSearcher 去实现这个接口。</p><p>验证身份和记录次数这两个操作很明显一个是位于查询之前，一个是位于查询之后，并且作为一个商务信息查询系统，直接将 RealSearcher 开放给用户使用，明显是不安全的行为，所以此处提供一个 ProxySearcher 对象作为 RealSearcher 的代理，相同的去实现 Searcher 接口，并且在 ProxySearcher 当中可以封装好身份校验和查询次数记录的逻辑。</p><p>RealSeacher 和 ProxySeacher 都实现了 Searcher 接口，对外暴露的方法都是相同的，所以对于 Client 来说，    调用 RealSearcher 和 ProxySearcher 并没有实质性的区别，在代码上体现出来的就是，Client 面向的是 Search 接口，而不是它的实现类。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/10 10:24</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Searcher</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 调用查询系统的接口</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> userId  用户名</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">String <span class="title">doSeach</span><span class="params">(String userId, String password)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="RealSubject"><a href="#RealSubject" class="headerlink" title="RealSubject"></a>RealSubject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/10 10:30</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSearcher</span> <span class="keyword">implements</span> <span class="title">Searcher</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSeach</span><span class="params">(String userId, String password)</span> </span>&#123;</div><div class="line">        <span class="comment">//模拟查询信息</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"userName:"</span>+ userId +<span class="string">"success some info:........"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ProxySubject"><a href="#ProxySubject" class="headerlink" title="ProxySubject"></a>ProxySubject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/10 10:33</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySearcher</span> <span class="keyword">implements</span> <span class="title">Searcher</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"==ProxySearcher=="</span>;</div><div class="line">    <span class="comment">//持有真正进行查询过程对象的引用</span></div><div class="line">    <span class="keyword">private</span> RealSearcher mRealSearcher;</div><div class="line">    <span class="comment">//验证用户身份的工具</span></div><div class="line">    <span class="keyword">private</span> AccessValidator mAccessValidator;</div><div class="line">    <span class="comment">//记录查询次数的工具</span></div><div class="line">    <span class="keyword">private</span> Logger mLogger;</div><div class="line"><span class="comment">//这里代理对象使用单例模式</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ProxySearcher sProxySearcher;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ProxySearcher</span><span class="params">()</span> </span>&#123;</div><div class="line">        mRealSearcher = <span class="keyword">new</span> RealSearcher();</div><div class="line">        mAccessValidator = <span class="keyword">new</span> AccessValidator();</div><div class="line">        mLogger = <span class="keyword">new</span> Logger();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProxySearcher <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sProxySearcher == <span class="keyword">null</span>) &#123;</div><div class="line">            sProxySearcher = <span class="keyword">new</span> ProxySearcher();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sProxySearcher;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSeach</span><span class="params">(String userId, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (userId == <span class="keyword">null</span> || password == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">"params empty"</span>;</div><div class="line"></div><div class="line">        String result = <span class="string">"search fail"</span>;</div><div class="line">        <span class="keyword">if</span> (mAccessValidator != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (isVertify(userId)) &#123;</div><div class="line">                <span class="keyword">if</span> (mRealSearcher != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//调用 RealSearcher 的 doReach 方法</span></div><div class="line">                    result = mRealSearcher.doSeach(userId, password);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">"Access deny"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!result.equals(<span class="string">"search fail"</span>)) &#123;</div><div class="line">            logSearchCount(userId);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//检查用户身份是否合法</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isVertify</span><span class="params">(String userId)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mAccessValidator.Validate(userId);</div><div class="line">    &#125;</div><div class="line"><span class="comment">//记录查询次数</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logSearchCount</span><span class="params">(String userId)</span> </span>&#123;</div><div class="line">        mLogger.searchLog(userId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/10 10:53</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Searcher mSearcher;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mSearcher == <span class="keyword">null</span>) &#123;</div><div class="line">            mSearcher = getSearchInstance();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mSearcher.doSeach(<span class="string">"ZFY"</span>, <span class="string">"blabala"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"><span class="comment">//写入配置文件当中，然后通过反射调用，灵活性更高</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Searcher <span class="title">getSearchInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ProxySearcher.getInstance();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="辅助类，验证身份、记录查询次数"><a href="#辅助类，验证身份、记录查询次数" class="headerlink" title="辅助类，验证身份、记录查询次数"></a>辅助类，验证身份、记录查询次数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 身份验证类</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/10 10:33</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessValidator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"==AccessValidator=="</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 模拟实现登录验证</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Validate</span><span class="params">(String userId)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"在数据库中验证用户"</span> + userId + <span class="string">"是否是合法用户？"</span>);</div><div class="line">        <span class="keyword">if</span> (userId.equals(<span class="string">"ZFY"</span>)) &#123;</div><div class="line">            System.out.println(<span class="string">"登录成功！"</span> + userId);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"登录失败！"</span> + userId);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 用于记录查询次数</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/2/10 10:37</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"==Logger=="</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 模拟记录查询次数</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchLog</span><span class="params">(String userId)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"更新数据库，用户:"</span> + userId + <span class="string">" 查询次数+1！"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p><img src="https://i.imgur.com/kw5ec17.png" alt=""></p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NSZhu74.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Design Patterns" scheme="http://zengfanyu.top/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://zengfanyu.top/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket、Socket、SocketIO、HTTP的关系</title>
    <link href="http://zengfanyu.top/2018/02/03/WebSocket_Socket_HTTP_SocketIO/"/>
    <id>http://zengfanyu.top/2018/02/03/WebSocket_Socket_HTTP_SocketIO/</id>
    <published>2018-02-03T02:16:16.000Z</published>
    <updated>2018-02-03T03:08:03.005Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.pubnub.com/wp-content/uploads/2014/09/WebSockets-Diagram.png" alt=""></p><p>摘要：最近部门在做一个基于 WebRTC 的视频会议系统，其中 Android 端代码需要连接三个服务器，分别是 RoomServer、MessageServer、MediaServer。</p><p>RoomServer 用于处理 client 请求（创建房间、发布视频等），并且将 MediaServer 的最新消息通过 MessageServer 推送至 client。</p><p>client 和 RoomServer 之间使用 http 连接实现；既然 client 需要接受 MessageServer 的消息推送，那么用 HTTP 明显是不能完成的，所以 client 到 MessageServer 之间使用了 WebSocket，用于保持长连接，这样 client 和 MessageServer 都可以主动发送消息； client 和 MediaServer 之间使用了 SocketIO，这样信令通道也是全双工的工作类型。</p><p>其中涉及到的 HTTP、WebSocket、SocketIO 的，一顿 google 之后，搞清楚了三者之间的关系，这里记录做下记录。</p><a id="more"></a><font face="黑体"><h1 id="要搞清楚的问题"><a href="#要搞清楚的问题" class="headerlink" title="要搞清楚的问题"></a>要搞清楚的问题</h1><p>说到底，这篇博文就是要搞清楚以下的问题，从宏观上了解，不深究细节部分。</p><ol><li>socket 是觉得了什么问题？</li><li>WebSocket 为什么被引入？ 又解决了什么问题？</li><li>Socket 和 WebSocket 有哪些区别和联系？</li><li>WebSocket 和 HTML5 是什么关系？</li><li>必须在浏览器中才能使用 WebSocket 吗？</li><li>WebSocket 能和 Socket 一样传输 raw 数据么？</li><li>WebSocket 和 HTTP 什么关系？有什么区别？</li><li>Socket.IO 是什么？</li><li>Socket.IO 与 WebSocket 之间是什么关系？</li></ol><h1 id="OSI模型与TCP-IP"><a href="#OSI模型与TCP-IP" class="headerlink" title="OSI模型与TCP/IP"></a>OSI模型与TCP/IP</h1><p>以下是 维基百科 中关于OSI 模型的说明：</p><blockquote><p>开放式系统互联通信参考模型（英语：Open System Interconnection Reference Model，ISO/IEC 7498-1），简称为OSI模型（OSI model），一种概念模型，由国际标准化组织（ISO）提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。</p></blockquote><p>而 TCP/IP 协议可以看做是对 OSI 模型的一种简化（以下内容来自 维基百科）：</p><blockquote><p>它将软件通信过程抽象化为四个抽象层，采取协议堆叠的方式，分别实作出不同通信协议。协议套组下的各种协议，依其功能不同，被分别归属到这四个阶层之中7，常被视为是简化的七层OSI模型。</p></blockquote><p>这里有一张图详细介绍了 TCP/IP 协议族中的各个协议在 OSI模型 中的分布，一图胜千言（下图来自 <a href="http://www.colasoft.com.cn/download/protocols_map.php" target="_blank" rel="external">科来</a>）：</p><p><img src="https://blog.zengrong.net/uploads/2014/12/TCP-IP.gif" alt="TCP/IP 协议族中的各个协议在 OSI模型 中的分布"></p><p>HTTP 、WebSocket 等协议运行在应用层，TCP 协议运行在传输层，IP 协议运行在网络层。</p><h1 id="WebSocket-与-HTTP"><a href="#WebSocket-与-HTTP" class="headerlink" title="WebSocket 与 HTTP"></a>WebSocket 与 HTTP</h1><p>从上图可以看出，HTTP、WebSocket 等应用层协议，都是基于 TCP 协议来传输数据的。我们可以把这些高级协议理解成对 TCP 的封装。</p><p>既然大家都使用 TCP 协议，那么大家的连接和断开，都要遵循 TCP 协议中的三次握手和四次挥手 ，只是在连接之后发送的内容不同，或者是断开的时间不同。</p><p>对于 WebSocket 来说，它必须依赖 HTTP 协议进行一次握手 ，握手成功后，数据就直接从 TCP 通道传输，与 HTTP 无关了。</p><p>至于具体的这里就不展开了，可以参考：</p><p><a href="http://www.52im.net/thread-1258-1-1.html" target="_blank" rel="external">WebSocket详解（四）：刨根问底HTTP与WebSocket的关系(上篇)</a></p><p><a href="http://www.52im.net/thread-1266-1-1.html" target="_blank" rel="external">WebSocket详解（五）：刨根问底HTTP与WebSocket的关系(下篇)</a></p><h1 id="为什么引入WebSocket协议"><a href="#为什么引入WebSocket协议" class="headerlink" title="为什么引入WebSocket协议"></a>为什么引入WebSocket协议</h1><p>从整个计算机网络的层面面知道了 WebSocket 的定位之后，接下来的问题就是：已经有了 HTTP 协议，为什么还需要 WebSocket 协议？</p><p>现在提到 WebSocket，首先会想到 “及时通讯” 和 “推送” 这类词。在 WebSocket 以前，很多网站通过其他方式来推送信息，下面我们先看看以前的推送方式，这样，有比较才能看出 WebSocket 的优势以及为什么引入WebSocket协议。</p><h2 id="短-轮询（Polling）"><a href="#短-轮询（Polling）" class="headerlink" title="(短)轮询（Polling）"></a>(短)轮询（Polling）</h2><p><img src="http://img.blog.csdn.net/20130517151509160" alt="enter image description here"></p><p>这种方式下，client 每隔一段时间都会向 server 发送 http 请求，服务器收到请求后，将最新的数据发回给 client。一开始必须通过提交表单的形式，这样的后果就是传输很多冗余的数据，浪费了带宽。后来 Ajax 出现，减少了传输数据量。</p><p>如图所示，在 client 向 server 发送一个请求活动结束后，server 中的数据发生了改变，所以 client 向 server 发送的第二次请求中，server 会将最新的数据返回给 client。</p><p>但这种方式也存在弊端。比如在某个时间段 server 没有更新数据，但 client 仍然每隔一段时间发送请求来询问，所以这段时间内的询问都是无效的，这样浪费了网络带宽。将发送请求的间隔时间加大会缓解这种浪费，但如果 server 更新数据很快时，这样又不能满足数据的实时性。</p><h2 id="Comet"><a href="#Comet" class="headerlink" title="Comet"></a>Comet</h2><p>鉴于（短）轮询的弊端，一种基于 HTTP 长连接的 “服务器推” 的技术被 hack 了出来，这种技术被命名为 Comet。其与（短）轮询主要区别就是，在轮询方式下，要想取得数据，必须首先发送请求，在实时性要求较高的情况下，只能增加向 server 请求的频率；而 Comet 则不同，client 与 server 端保持一个长连接，只有数据发生改变时，server 才主动将数据推送给 client。Comet 又可以被细分为两种实现方式，一种是长轮询机制，一种是流技术。</p><h3 id="长轮询（Long-polling）"><a href="#长轮询（Long-polling）" class="headerlink" title="长轮询（Long-polling）"></a>长轮询（Long-polling）</h3><p><img src="http://img.blog.csdn.net/20130517151612871" alt="enter image description here"></p><p>client 向 server 发出请求，server 接收到请求后，server 并不一定立即发送回应给 client，而是看数据是否更新，如果数据已经更新了的话，那就立即将数据返回给 client；但如果数据没有更新，那就把这个请求保持住，等待有新的数据到来时，才将数据返回给 client。</p><p>当然了，如果 server 的数据长时间没有更新，一段时间后，请求便会超时，client 收到超时信息后，再立即发送一个新的请求给 server。</p><p>如图所示，在长轮询机制下，client 向 server 发送了请求后，server会等数据更新完才会将数据返回，而不是像（短）轮询一样不管数据有没有更新然后立即返回。</p><p>这种方式也有弊端。当 server 向 client 发送数据后，必须等待下一次请求才能将新的数据发送出去，这样 client 接收到新数据的间隔最短时间便是 2 * RTT（往返时间），这样便无法应对 server 端数据更新频率较快的情况。</p><h3 id="流技术（Http-Streaming）"><a href="#流技术（Http-Streaming）" class="headerlink" title="流技术（Http Streaming）"></a>流技术（Http Streaming）</h3><p><img src="https://pic1.zhimg.com/80/v2-b0bc3974bd8b04c67d460d55d6945145_hd.jpg" alt="enter image description here"></p><p>流技术基于 Iframe。Iframe 是 HTML 标记，这个标记的 src 属性会保持对指定 server 的长连接请求，server 就可以不断地向 client 返回数据。</p><p>可以看出，流技术与长轮询的区别是长轮询本质上还是一种轮询方式，只不过连接的时间有所增加，想要向 server 获取新的数据，client 只能一遍遍的发送请求；而流技术是一直保持连接，不需要 client 请求，当数据发生改变时，server 自动的将数据发送给 client。</p><p>如图所示，client 与 server 建立连接之后，便不会断开。当数据发生变化，server 便将数据发送给 client。</p><p>但这种方式有一个明显的不足之处，网页会一直显示未加载完成的状态。</p><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p><strong><font color="#ff0000">前人推出那么多的解决方案，想要解决的唯一的问题便是怎么让 server 将最新的数据以最快的速度发送给 client。</font></strong></p><p>但 HTTP 是个懒惰的协议，server 只有收到请求才会做出回应，否则什么事都不干。因此，为了彻底解决这个 server 主动向 client 发送数据的问题，W3C 在 HTML5 中提供了一种 client 与 server 间进行全双工通讯的网络技术 WebSocket。WebSocket 是一个全新的、独立的协议，基于 TCP 协议，与 HTTP 协议兼容却不会融入 HTTP 协议，仅仅作为 HTML5 的一部分。</p><p>那 WebSocket 与 HTTP 什么关系呢？简单来说，WebSocket 是一种协议，是一种与 HTTP 同等的网络协议，两者都是应用层协议，都基于 TCP 协议。但是 WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p><p>相比于传统 HTTP 的每次“请求-应答”都要 client 与 server 建立连接的模式，WebSocket 是一种长连接的模式。具体什么意思呢？就是一旦 WebSocket 连接建立后，除非 client 或者 server 中有一端主动断开连接，否则每次数据传输之前都不需要 HTTP 那样请求数据。从上面的图可以看出，client 第一次需要与 server 建立连接，当 server 确认连接之后，两者便一直处于连接状态。直到一方断开连接，WebSocket 连接才断开。</p><p>从报文层面来说，如下：</p><p><img src="https://pic3.zhimg.com/80/v2-9063570c22d3e12a821ab8c07834f18f_hd.jpg" alt="enter image description here"></p><p>首先，client 发起 WebSocket 连接，报文类似于 HTTP，但主要有几点不一样的地方：</p><ul><li><p>“Upgrade: websocket”： 表明这是一个 WebSocket 类型请求，意在告诉 server 需要将通信协议切换到 WebSocket</p></li><li><p>“Sec-WebSocket-Key: *”: 是 client 发送的一个 base64 编码的密文，要求 server 必须返回一个对应加密的 “Sec-WebSocket-Accept” 应答，否则 client 会抛出 “Error during WebSocket handshake” 错误，并关闭连接</p></li></ul><p>server 收到报文后，如果支持 WebSocket 协议，那么就会将自己的通信协议切换到 WebSocket，返回以下信息：</p><ul><li><p>“HTTP/1.1 101 WebSocket Protocol Handshake”：返回的状态码为 101，表示同意 client 的协议转换请求</p></li><li><p>“Upgrade: websocket”</p></li><li><p>“Connection: Upgrade”</p></li><li><p>“Sec-WebSocket-Accept: *”</p></li></ul><p>…</p><p>客户端请求响应报文：（引用自<a href="http://www.52im.net/forum.php?mod=viewthread&amp;tid=331&amp;ctid=15" target="_blank" rel="external">即时通讯网</a>）</p><p><img src="http://www.52im.net/data/attachment/forum/201605/25/162049w1tzfgg5z5ebvet5.png" alt="enter image description here"></p><p>以上都是利用 HTTP 协议完成的。这样，经过“请求-响应”的过程， server 与 client 的 WebSocket 连接握手成功，后续便可以进行 TCP 通讯了，也就没有 HTTP 什么事了。可以查阅WebSocket 协议栈了解 WebSocket 的 client 与 server 更详细的交互数据格式。</p><h1 id="什么是-Socket"><a href="#什么是-Socket" class="headerlink" title="什么是 Socket"></a>什么是 Socket</h1><p><strong><font color="#ff0000">网络应用中，两个应用程序同时需要向对方发送消息的能力（即全双工通信），所利用到的技术就是 socket，其能够提供端对端的通信。</font></strong></p><p>对于程序员而言，其需要在 A 端创建一个 socket 实例，并为这个实例提供其所要连接的 B 端的 IP 地址和端口号，而在 B 端创建另一个 socket 实例，并且绑定本地端口号来进行监听。当 A 和 B 建立连接后，双方就建立了一个端对端的 TCP 连接，从而可以进行双向通信。</p><p>Socket 其实并不是一个协议。它工作在 OSI 模型会话层（第5层），是为了方便大家直接使用更底层协议（一般是 TCP 或 UDP ）而存在的一个抽象层。</p><p>最早的一套 Socket API 是 Berkeley sockets ，采用 C 语言实现。它是 Socket 的事实标准，POSIX sockets 是基于它构建的，多种编程语言都遵循这套 API，在 JAVA、Python 中都能看到这套 API 的影子。</p><p>下面摘录一段更容易理解的文字：</p><blockquote><p>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p></blockquote><p><img src="https://blog.zengrong.net/uploads/2014/12/socket.gif" alt="enter image description here"><br><img src="https://blog.zengrong.net/uploads/2014/12/socket-traffic.gif" alt="enter image description here"></p><blockquote><p>主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接，而建立 Socket 连接必须需要底层 TCP/IP 协议来建立 TCP 连接。建立 TCP 连接需要底层 IP 协议来寻址网络中的主机。我们知道网络层使用的 IP 协议可以帮助我们根据 IP 地址来找到目标主机，但是一台主机上可能运行着多个应用程序，如何才能与指定的应用程序通信就要通过 TCP 或 UPD 的地址也就是端口号来指定。这样就可以通过一个 Socket 实例唯一代表一个主机上的一个应用程序的通信链路了。</p></blockquote><p>而 WebSocket 则不同，它是一个完整的 应用层协议，包含一套标准的 API 。</p><p>所以，从使用上来说，WebSocket 更易用，而 Socket 更灵活。</p><h1 id="WebSocket-与-Socket"><a href="#WebSocket-与-Socket" class="headerlink" title="WebSocket 与 Socket"></a>WebSocket 与 Socket</h1><p>WebSocekt 是 HTML5 规范中的一部分，其借鉴了 socket 的思想，为 client 和 server 之间提供了类似 Socket 的双向通信机制。同时，WebSocket 又是一种新的应用层协议，包含一套标准的 API；而 socket 并不是一个协议，而是一组接口，其主要方便大家直接使用更底层的协议（比如 TCP 或 UDP），所以，从使用上来说，WebSocket 更易用，而 Socket 更灵活。</p><h1 id="HTML5-与-WebSocket"><a href="#HTML5-与-WebSocket" class="headerlink" title="HTML5 与 WebSocket"></a>HTML5 与 WebSocket</h1><p>WebSocket API 是 HTML5 标准的一部分， 但这并不代表 WebSocket 一定要用在 HTML 中，或者只能在基于浏览器的应用程序中使用。</p><p>实际上，许多语言、框架和服务器都提供了 WebSocket 支持，例如：</p><ul><li>基于 C 的 libwebsocket.org</li><li>基于 Node.js 的 Socket.io</li><li>基于 Python 的 ws4py</li><li>基于 C++ 的 WebSocket++</li><li>Apache 对 WebSocket 的支持： Apache Module mod_proxy_wstunnel</li><li>Nginx 对 WebSockets 的支持： NGINX as a WebSockets Proxy 、 NGINX Announces Support for WebSocket Protocol 、WebSocket proxying</li><li>lighttpd 对 WebSocket 的支持：mod_websocket</li></ul><h1 id="什么是-Socket-IO"><a href="#什么是-Socket-IO" class="headerlink" title="什么是 Socket.IO"></a>什么是 Socket.IO</h1><p>Socket.IO 是一个封装了 Websocket、基于 Node 的 JavaScript 框架，包含 client 的 JavaScript 和 server 的 Node。其屏蔽了所有底层细节，你不用关心里面用了什么连接方式,让顶层调用非常简单。</p><p>另外，Socket.IO 还有一个非常重要的好处。其不仅支持 WebSocket，还支持许多种轮询机制以及其他实时通信方式，并封装了通用的接口。这些方式包含 Adobe Flash Socket、Ajax 长轮询、Ajax multipart streaming 、持久 Iframe、JSONP 轮询等。换句话说，当 Socket.IO 检测到当前环境不支持 WebSocket 时，能够自动地选择最佳的方式来实现网络的实时通信。</p><p>好了，基本搞清楚 WebSocket、Socket、HTTP、SocketIO 的概念以及之间的关系了。</p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.pubnub.com/wp-content/uploads/2014/09/WebSockets-Diagram.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;摘要：最近部门在做一个基于 WebRTC 的视频会议系统，其中 Android 端代码需要连接三个服务器，分别是 RoomServer、MessageServer、MediaServer。&lt;/p&gt;
&lt;p&gt;RoomServer 用于处理 client 请求（创建房间、发布视频等），并且将 MediaServer 的最新消息通过 MessageServer 推送至 client。&lt;/p&gt;
&lt;p&gt;client 和 RoomServer 之间使用 http 连接实现；既然 client 需要接受 MessageServer 的消息推送，那么用 HTTP 明显是不能完成的，所以 client 到 MessageServer 之间使用了 WebSocket，用于保持长连接，这样 client 和 MessageServer 都可以主动发送消息； client 和 MediaServer 之间使用了 SocketIO，这样信令通道也是全双工的工作类型。&lt;/p&gt;
&lt;p&gt;其中涉及到的 HTTP、WebSocket、SocketIO 的，一顿 google 之后，搞清楚了三者之间的关系，这里记录做下记录。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机网络基础拾遗" scheme="http://zengfanyu.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%8B%BE%E9%81%97/"/>
    
    
      <category term="HTTP" scheme="http://zengfanyu.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>SQLite IllegalStateException 的隐蔽 bug 修复</title>
    <link href="http://zengfanyu.top/2018/01/20/SQLiteException/"/>
    <id>http://zengfanyu.top/2018/01/20/SQLiteException/</id>
    <published>2018-01-20T10:00:16.000Z</published>
    <updated>2018-08-18T10:50:03.865Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/xUBT0kU.png" alt=""></p><p>摘要：java.lang.IllegalStateException: Couldn’t read row 0, col -1 from CursorWindow.  Make sure the Cursor is initialized correctly before accessing data from it.</p><a id="more"></a><font face="黑体"><p>发生场景：查询数据库</p><p>报错日志如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">java.lang.RuntimeException: <span class="function">An error occurred <span class="keyword">while</span> executing <span class="title">doInBackground</span><span class="params">()</span></span></div><div class="line"><span class="function">at android.os.AsyncTask$3.<span class="title">done</span><span class="params">(AsyncTask.java:<span class="number">325</span>)</span></span></div><div class="line"><span class="function">at java.util.concurrent.FutureTask.<span class="title">finishCompletion</span><span class="params">(FutureTask.java:<span class="number">354</span>)</span></span></div><div class="line"><span class="function">at java.util.concurrent.FutureTask.<span class="title">setException</span><span class="params">(FutureTask.java:<span class="number">223</span>)</span></span></div><div class="line"><span class="function">at java.util.concurrent.FutureTask.<span class="title">run</span><span class="params">(FutureTask.java:<span class="number">242</span>)</span></span></div><div class="line"><span class="function">at android.os.AsyncTask$SerialExecutor$1.<span class="title">run</span><span class="params">(AsyncTask.java:<span class="number">243</span>)</span></span></div><div class="line"><span class="function">at java.util.concurrent.ThreadPoolExecutor.<span class="title">runWorker</span><span class="params">(ThreadPoolExecutor.java:<span class="number">1133</span>)</span></span></div><div class="line"><span class="function">at java.util.concurrent.ThreadPoolExecutor$Worker.<span class="title">run</span><span class="params">(ThreadPoolExecutor.java:<span class="number">607</span>)</span></span></div><div class="line"><span class="function">at java.lang.Thread.<span class="title">run</span><span class="params">(Thread.java:<span class="number">761</span>)</span></span></div><div class="line"><span class="function">Caused by: java.lang.IllegalStateException: Couldn't read row 0, col -1 from CursorWindow.  Make sure the Cursor is initialized correctly before accessing data from it.</span></div><div class="line"><span class="function">at android.database.CursorWindow.<span class="title">nativeGetLong</span><span class="params">(Native Method)</span></span></div><div class="line"><span class="function">at android.database.CursorWindow.<span class="title">getLong</span><span class="params">(CursorWindow.java:<span class="number">511</span>)</span></span></div><div class="line"><span class="function">at android.database.CursorWindow.<span class="title">getInt</span><span class="params">(CursorWindow.java:<span class="number">578</span>)</span></span></div><div class="line"><span class="function">at android.database.AbstractWindowedCursor.<span class="title">getInt</span><span class="params">(AbstractWindowedCursor.java:<span class="number">69</span>)</span></span></div><div class="line"><span class="function">at com.pplive.media.upload.db.UploadDataBaseManager.<span class="title">searchAllUploads</span><span class="params">(UploadDataBaseManager.java:<span class="number">146</span>)</span></span></div><div class="line"><span class="function">at com.pplive.media.upload.UploadManager.<span class="title">searchAllUploads</span><span class="params">(UploadManager.java:<span class="number">400</span>)</span></span></div><div class="line"><span class="function">at com.suning.mobile.ebuy.uvideo.MainActivity$GetReLunchDataTask.<span class="title">doInBackground</span><span class="params">(MainActivity.java:<span class="number">1201</span>)</span></span></div><div class="line"><span class="function">at com.suning.mobile.ebuy.uvideo.MainActivity$GetReLunchDataTask.<span class="title">doInBackground</span><span class="params">(MainActivity.java:<span class="number">1196</span>)</span></span></div><div class="line"><span class="function">at android.os.AsyncTask$2.<span class="title">call</span><span class="params">(AsyncTask.java:<span class="number">305</span>)</span></span></div><div class="line"><span class="function">at java.util.concurrent.FutureTask.<span class="title">run</span><span class="params">(FutureTask.java:<span class="number">237</span>)</span></span></div><div class="line"><span class="function">... 4 more</span></div><div class="line"><span class="function">java.lang.IllegalStateException: Couldn't read row 0, col -1 from CursorWindow.  Make sure the Cursor is initialized correctly before accessing data from it.</span></div><div class="line"><span class="function">at android.database.CursorWindow.<span class="title">nativeGetLong</span><span class="params">(Native Method)</span></span></div><div class="line"><span class="function">at android.database.CursorWindow.<span class="title">getLong</span><span class="params">(CursorWindow.java:<span class="number">511</span>)</span></span></div><div class="line"><span class="function">at android.database.CursorWindow.<span class="title">getInt</span><span class="params">(CursorWindow.java:<span class="number">578</span>)</span></span></div><div class="line"><span class="function">at android.database.AbstractWindowedCursor.<span class="title">getInt</span><span class="params">(AbstractWindowedCursor.java:<span class="number">69</span>)</span></span></div><div class="line"><span class="function">at com.pplive.media.upload.db.UploadDataBaseManager.<span class="title">searchAllUploads</span><span class="params">(UploadDataBaseManager.java:<span class="number">146</span>)</span></span></div><div class="line"><span class="function">at com.pplive.media.upload.UploadManager.<span class="title">searchAllUploads</span><span class="params">(UploadManager.java:<span class="number">400</span>)</span></span></div><div class="line"><span class="function">at com.xxxx.zzzz.cccc.uvideo.MainActivity$GetReLunchDataTask.<span class="title">doInBackground</span><span class="params">(MainActivity.java:<span class="number">1201</span>)</span></span></div><div class="line"><span class="function">at com.xxxx.zzzz.cccc.uvideo.MainActivity$GetReLunchDataTask.<span class="title">doInBackground</span><span class="params">(MainActivity.java:<span class="number">1196</span>)</span></span></div><div class="line"><span class="function">at android.os.AsyncTask$2.<span class="title">call</span><span class="params">(AsyncTask.java:<span class="number">305</span>)</span></span></div><div class="line"><span class="function">at java.util.concurrent.FutureTask.<span class="title">run</span><span class="params">(FutureTask.java:<span class="number">237</span>)</span></span></div><div class="line"><span class="function">at android.os.AsyncTask$SerialExecutor$1.<span class="title">run</span><span class="params">(AsyncTask.java:<span class="number">243</span>)</span></span></div><div class="line"><span class="function">at java.util.concurrent.ThreadPoolExecutor.<span class="title">runWorker</span><span class="params">(ThreadPoolExecutor.java:<span class="number">1133</span>)</span></span></div><div class="line"><span class="function">at java.util.concurrent.ThreadPoolExecutor$Worker.<span class="title">run</span><span class="params">(ThreadPoolExecutor.java:<span class="number">607</span>)</span></span></div><div class="line"><span class="function">at java.lang.Thread.<span class="title">run</span><span class="params">(Thread.java:<span class="number">761</span>)</span></span></div></pre></td></tr></table></figure><p>最开始一看这个日志「Couldn’t read row 0, col -1 from CursorWindow.  Make sure the Cursor is initialized correctly before accessing data from it」，应该是 SQLite 查询的时候字段写错了吧，因为这个情况之前也遇到过，所以 google 验证一下，确实很多都是因为字段写错了。于是我返回代码中去查看字段。</p><p>很遗憾的是，数据库相关字段我都是用 public static final String XXXX 的形式来定义，并且在创建数据库和查询表的时候，都是使用的 XXXX ，那么照理来说是不会出现建表和查询时，填错大小写或者多一个空格少一个空格的情况，那么这种情况被 pass。</p><p>接着又去检查 SQL 语句，因为之前会碰到一个 SQL 语句当中插入一个值，而没有用空格，导致的 SQL 语句不正确的情况，例如：”select <em> from”+TABLENAME ,这样就不对，应该是：”select </em> from “+TABLENAME，但是如果是 SQL 语句的问题，那么不应该是报这个错误呀，应该会报 SQL 语句相关的错误才对，于是这个情况也被 pass。</p><p>于是接着从日志当中的 -1 入手，cursor 的 getColumnIndex() 方法注解是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Returns the zero-based index for the given column name, or -1 if the column doesn't exist.</span></div><div class="line"><span class="comment"> * If you expect the column to exist use &#123;<span class="doctag">@link</span> #getColumnIndexOrThrow(String)&#125; instead, which</span></div><div class="line"><span class="comment"> * will make the error more clear.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> columnName the name of the target column.</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> the zero-based column index for the given column name, or -1 if</span></div><div class="line"><span class="comment"> * the column name does not exist.</span></div><div class="line"><span class="comment"> * <span class="doctag">@see</span> #getColumnIndexOrThrow(String)</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getColumnIndex</span><span class="params">(String columnName)</span></span>;</div></pre></td></tr></table></figure><p>这么说，当前列如果不存在的话，那么这个方法的返回值是 -1 ，那么上面的报错日志就合理啦，于是我在查询之前打印了一下当前数据库的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">UploadInfo&#123;status=<span class="number">0</span>, ppfeature=<span class="string">'null'</span>, fid=<span class="string">'null'</span>, categoryId=<span class="number">0</span>, state=<span class="number">0</span>, size=<span class="string">'null'</span>, name=<span class="string">'null'</span>, localPath=<span class="string">'null'</span>, id=<span class="number">6</span>, progress=<span class="number">0</span>, token=<span class="string">'null'</span>, isPause=<span class="keyword">false</span>, channel_web_id=<span class="string">'null'</span>, pic_upload_url=<span class="string">'null'</span>, startTime=<span class="number">1516106247809</span>, length=<span class="number">0</span>, channelId=<span class="number">0</span>, userId=<span class="number">0</span>, maxSpeed=<span class="number">0</span>, minSpeed=<span class="number">0</span>, fileState=<span class="number">0</span>, isStop=<span class="keyword">false</span>&#125;</div></pre></td></tr></table></figure><p>对的，没问题，我要查询的那一列是存在的，并且这里的字段和建表语句是符合的。要查询的那一列不存在这种情况也被 pass。</p><p>到了这里，我感觉我已经把可能出现问题的地方都检查过了，但是还有一个地方，日志当中有这么一句：</p><pre><code>at android.database.AbstractWindowedCursor.getInt(AbstractWindowedCursor.java:69)</code></pre><p>是不是 getInt 的问题？？ 看看源码注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Returns the value of the requested column as an int.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * &lt;p&gt;The result and whether this method throws an exception when the</span></div><div class="line"><span class="comment"> * column value is null, the column type is not an integral type, or the</span></div><div class="line"><span class="comment"> * integer value is outside the range [&lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;,</span></div><div class="line"><span class="comment"> * &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;] is implementation-defined.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> columnIndex the zero-based index of the target column.</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> the value of that column as an int.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getInt</span><span class="params">(<span class="keyword">int</span> columnIndex)</span></span>;</div></pre></td></tr></table></figure><p>「<strong>当结果为默认值</strong>」，「<strong>列值为空</strong>」，「<strong>不是 integer 类型</strong>」， 「<strong>integer 类型超出范围</strong>」，这几种情况下，该方法会不会引起异常，是由现实情况决定的。</p><p>现实情况决定的？？那就是可以理解成，跟设备相关咯（这个想法后来被证实是正确的，确实跟设备型号相关，上述异常在部分设备上不会抛出）。</p><p>那么这个注释的意思就是说：上述四种情况，我们去获取它，那么结果在不同的设备上不一样，有的设备上是可以正常获取到 SQLite 中定义的初始值的，有的就会直接抛异常。</p><p>以上几种情况，根据项目代码的一些限定和过滤以及之前的单元测试（业务相关），只有「<strong>当结果为默认值</strong>」这种情况可能会发生，也就是<strong>程序只创建了数据库和数据表，但是还没有往里面插入数据，就查询数据</strong>，那么这时数据表中的字段就应该是默认值。</p><p>怎么解决？</p><p>既然出问题的是默认值，那么我就在应该返回默认值的时候，手动去赋一个默认值。</p><p>保证每次调用 cursor 的 getXXX 方法时，都需要检查返回值是否为空。用下面的代码去替代系统 cursor 的 getXXX 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">(Cursor cursor, String indexName)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> value = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> columnIndex = -<span class="number">1</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">columnIndex = cursor.getColumnIndex(indexName);</div><div class="line"><span class="keyword">if</span> (!cursor.isNull(columnIndex)) &#123;</div><div class="line">value = cursor.getLong(columnIndex);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Throwable tr) &#123;</div><div class="line"></div><div class="line">LogUtils.error(<span class="string">"columnIndex:"</span> + columnIndex + <span class="string">"e:"</span> + tr.getMessage());</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(Cursor cursor, String indexName)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> columnIndex = -<span class="number">1</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">columnIndex = cursor.getColumnIndex(indexName);</div><div class="line"><span class="keyword">if</span> (!cursor.isNull(columnIndex)) &#123;</div><div class="line">value = cursor.getInt(columnIndex);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Throwable tr) &#123;</div><div class="line"></div><div class="line">LogUtils.error(<span class="string">"columnIndex:"</span> + columnIndex + <span class="string">"e:"</span> + tr.getMessage());</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getString</span><span class="params">(Cursor cursor, String indexName)</span> </span>&#123;</div><div class="line">String value = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">int</span> columnIndex = -<span class="number">1</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">columnIndex = cursor.getColumnIndex(indexName);</div><div class="line"><span class="keyword">if</span> (!cursor.isNull(columnIndex)) &#123;</div><div class="line">value = cursor.getString(columnIndex);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Throwable tr) &#123;</div><div class="line"></div><div class="line">LogUtils.error(<span class="string">"columnIndex:"</span> + columnIndex + <span class="string">"e:"</span> + tr.getMessage());</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> value;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用后，异常完美解决。</p><p>还有一种思路没有实践： 既然是默认值的问题，那么在 SQLiteOpenHelper 的 onCreate 方法中建表的时候，就将默认值写死就好啦，就是在每一个字段的建表语句后加上一个 DEFAULT ，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">db.execSQL(String.format(</div><div class="line"><span class="string">"CREATE TABLE %s (%s INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "</span> <span class="comment">// BaseColumns._ID</span></div><div class="line">+ <span class="string">"%s TEXT DEFAULT null, "</span> <span class="comment">// FIELD_LOCAL_PATH</span></div><div class="line">+ <span class="string">"%s TEXT DEFAULT null, "</span> <span class="comment">// FIELD_NAME</span></div><div class="line">+ <span class="string">"%s TEXT DEFAULT null, "</span> <span class="comment">// FIELD_TOKEN</span></div><div class="line">+ <span class="string">"%s TEXT DEFAULT null, "</span> <span class="comment">// FIELD_SIZE</span></div><div class="line">+ <span class="string">"%s INTEGER DEFAULT 0, "</span> <span class="comment">// FIELD_STATE</span></div><div class="line">+ <span class="string">"%s TEXT DEFAULT null, "</span> <span class="comment">// FIELD_PPFEATURE</span></div><div class="line">+ <span class="string">"%s TEXT DEFAULT null, "</span> <span class="comment">// FIELD_FID</span></div><div class="line">+ <span class="string">"%s TEXT DEFAULT null, "</span><span class="comment">// FIELD_CATEGORY_ID</span></div><div class="line">+ <span class="string">"%s TEXT DEFAULT null, "</span><span class="comment">// FIELD_CHANNEL_WEB_ID</span></div><div class="line">+ <span class="string">"%s INTEGERvDEFAULT 0, "</span> <span class="comment">// CHANNEL_ID</span></div><div class="line">TABLE_UPLOAD, BaseColumns._ID, FIELD_LOCAL_PATH, FIELD_NAME, FIELD_TOKEN, FIELD_SIZE, FIELD_STATE,</div><div class="line">FIELD_PPFEATURE, FIELD_FID, FIELD_CATEGORY_ID, FIELD_CHANNEL_WEB_ID,CHANNEL_ID));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>后面可以实践下。</p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xUBT0kU.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;摘要：java.lang.IllegalStateException: Couldn’t read row 0, col -1 from CursorWindow.  Make sure the Cursor is initialized correctly before accessing data from it.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="BugFix" scheme="http://zengfanyu.top/tags/BugFix/"/>
    
  </entry>
  
  <entry>
    <title>只因为在众多框架中多看了你一眼 RxJava （四） RxJava 调度器和操作符</title>
    <link href="http://zengfanyu.top/2018/01/20/RxJava4/"/>
    <id>http://zengfanyu.top/2018/01/20/RxJava4/</id>
    <published>2018-01-20T06:16:16.000Z</published>
    <updated>2018-01-20T09:10:42.323Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/cCjinS0.png" alt=""></p><p>摘要：之前的记录了一下 RxJava 最基本的使用方法，没有涉及到为什么这么多人使用它的具体原因，就是说没体现它的魅力所在嘛， 所以这一篇就记录一下我学习的RxJava 当中的变换操作符（Operator）和调度器（Scheduler），前者可以说是 RxJava 的核心功能之一，也是大多数人使用 RxJava 的主要原因，后者是可以让不同线程之间的代码在一条链路代码中书写，极大简化逻辑。</p><a id="more"></a><font face="黑体"><h1 id="调度器（Scheduler）"><a href="#调度器（Scheduler）" class="headerlink" title="调度器（Scheduler）"></a>调度器（Scheduler）</h1><p>开发过程中经常会碰到这样的需求：子线程中去请求服务器数据，拿到数据之后进行解析，然后回调给主线程中的接口去展示。</p><p>这种需求有很多种写法，比如用 AsyncTask ，在 doInBackground 中进行耗时操作，然后在 onPostExecute 当中接受结果，进行处理；或者是直接在主线程中切进行耗时操作，然后通过用 Looper.getMainLooper() 创建的 Handler 将结果发送至主线程去处理。</p><p>上面提到的两种方法，主要要解决的问题就是切换线程，因为 Android 中规定耗时操作不能在主线程当中进行，但是 UI 的更新操作又必须在主线程中进行，而 UI 的更新状态往往是需要耗时操作所得到的结果来做支撑的。所以为了解决这一矛盾，Google 官方给了 AsyncTask 和 Handler 两个工具。</p><p>RxJava 当然也可以解决上述问题，并且是在同一条链路中，不存在各种接口的回调，起到这个作用的就是 Scheduler，线程调度器。RxJava 通过它来指定每一行代码应该运行在什么样的线程环境，RxJava 当中已经内置了好几种 Scheduler：</p><h2 id="Scheduler-的种类"><a href="#Scheduler-的种类" class="headerlink" title="Scheduler 的种类"></a>Scheduler 的种类</h2><p><strong>1. Schedulers.newThread()</strong> </p><p>这个 Scheduler 会创建一个新的线程，并且用这个 Scheduler 指定的代码会在新创建的线程中去执行。</p><p><strong>2. Scheduler.io()</strong></p><p>这个 Scheduler 适用于一些执行阻塞式 IO 操作的，比如说：读写文件、读写数据库、访问网络等。它在内部是使用 CacheThreadPool 实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</div><div class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</div><div class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个线程池没有核心线程数，它会根据需要去创建线程，并且有 60秒 的超时机制。<strong>不要用这个 Scheduler 去指定计算操作的运行线程，这样可以避免创建多余的线程。</strong></p><p><strong>3. Schedulers.computation()</strong></p><p>这个 Scheduler 适合执行 CPU 密集型的操作，比如事件循环，处理回调和其他计算工作。它内部使用的是固定线程数的线程池，大小等于 CPU 核数。<strong>不要用它去指定 IO 操作的代码运行线程环境，不然 IO 操作的等待会浪费 CPU。</strong></p><p><strong>4. AndroidScheculers.mainThread()</strong></p><p>这个 Scheduler 是 Android 独有的， 用它指定的代码会运行在主线程当中。</p><h2 id="Scheduler-的使用"><a href="#Scheduler-的使用" class="headerlink" title="Scheduler 的使用"></a>Scheduler 的使用</h2><p>有了上述 Scheduler 之后， 就可以使用 subscribeOn()  和 observerOn() 两个方法来指定代码的运行环境了。</p><p>这里的代码使用的是 RxJava2 的 API<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_test);</div><div class="line">    tv = findViewById(R.id.id_tv);</div><div class="line">    Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">            String result = getDataFromServer();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(result)) &#123;</div><div class="line">                e.onNext(result);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">            .subscribeOn(Schedulers.io())<span class="comment">//指定subscribe（）发生在io线程</span></div><div class="line">            .observeOn(AndroidSchedulers.mainThread())<span class="comment">//指定 Subscriber 的回调发在主线程</span></div><div class="line">            .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull String result)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                    LogUtil.d(TAG, <span class="string">"[ accept ] "</span> + <span class="string">"result="</span> + result);</div><div class="line">                    LogUtil.d(TAG, <span class="string">"[ accept ] "</span> + <span class="string">"current thread is "</span> + Thread.currentThread().getName());</div><div class="line">                    tv.setText(result);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDataFromServer</span><span class="params">()</span> </span>&#123;</div><div class="line">    LogUtil.d(TAG, <span class="string">"[ getDataFromServer ] "</span> + <span class="string">"current thread is "</span> + Thread.currentThread().getName());</div><div class="line">    LogUtil.d(TAG, <span class="string">"[ getDataFromServer ] "</span> + <span class="string">"get data from server"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello RxJava"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>看看 Log情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">D/===RxJavaSample==: TestActivity [ getDataFromServer ] current thread is RxCachedThreadScheduler-<span class="number">1</span></div><div class="line">D/===RxJavaSample==: TestActivity [ getDataFromServer ] get data from server</div><div class="line">D/===RxJavaSample==: TestActivity [ accept ] result=Hello RxJava</div><div class="line">D/===RxJavaSample==: TestActivity [ accept ] current thread is main</div></pre></td></tr></table></figure><p>很明显了， Observable 是在子线程中发送事件， 而 Obserber 接收并处理事件是在 主线程中进行的。</p><p>总结一下，</p><ul><li><code>subscribeOn()</code> <strong>用于指定 Observable 发送事件的线程。</strong></li><li><code>obserberOn()</code> <strong>用于指定 Observer 接受并处理事件的线程。</strong></li></ul><p>关于两者多次使用的情况，做一下总结：</p><ul><li><code>subscribeOn()</code>：<strong>多次调用，只有第一次有效。</strong></li><li><code>observerOn()</code>：<strong>每调用一次，下面的代码就会切换一次。</strong></li></ul><p>举个例子(使用了 lambda 表达式)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">      setContentView(R.layout.activity_test);</div><div class="line">      tv = findViewById(R.id.id_tv);</div><div class="line"></div><div class="line">      Observable.create((ObservableOnSubscribe&lt;String&gt;) e -&gt; &#123;</div><div class="line">          LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"current thread is "</span> + Thread.currentThread().getName());</div><div class="line">          String token = getTokenFromServer();</div><div class="line">          LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"token:"</span> + token);</div><div class="line">          e.onNext(token);</div><div class="line">      &#125;)</div><div class="line">              .subscribeOn(Schedulers.io())<span class="comment">//第一次指定subscribe()在io线程</span></div><div class="line">              .subscribeOn(AndroidSchedulers.mainThread())<span class="comment">//第二次指定subscribe()的线程在主线程</span></div><div class="line">              .observeOn(Schedulers.io())<span class="comment">//指定下面map操作发生在io线程</span></div><div class="line">              .map(s -&gt; &#123;</div><div class="line">                  LogUtil.d(TAG, <span class="string">"[ apply ] "</span> + <span class="string">"current thread is "</span> + Thread.currentThread().getName());</div><div class="line">                  String playUrl = getPlayUrl(s);</div><div class="line">                  LogUtil.d(TAG, <span class="string">"[ apply ] "</span> + <span class="string">"play url is "</span> + playUrl);</div><div class="line">                  <span class="keyword">return</span> playUrl;</div><div class="line"></div><div class="line">              &#125;)</div><div class="line">              .observeOn(AndroidSchedulers.mainThread())<span class="comment">//指定Observer接受事件是在主线程</span></div><div class="line">              .subscribe(s -&gt; &#123;</div><div class="line">                  LogUtil.d(TAG, <span class="string">"[ accept ] "</span> + <span class="string">"current thread is "</span> + Thread.currentThread().getName());</div><div class="line">                  LogUtil.d(TAG, <span class="string">"[ accept ] "</span> + <span class="string">"s="</span> + s);</div><div class="line">                  tv.setText(s);</div><div class="line">              &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getTokenFromServer</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"token-123456"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getPlayUrl</span><span class="params">(String token)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"api.xxxx.com?a=12&amp;b=34&amp;token="</span> + token;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">01</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">51.191</span> <span class="number">12827</span>-<span class="number">12853</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: TestActivity [ subscribe ] current thread is RxCachedThreadScheduler-<span class="number">1</span></div><div class="line"><span class="number">01</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">51.191</span> <span class="number">12827</span>-<span class="number">12853</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: TestActivity [ subscribe ] token:token-<span class="number">123456</span></div><div class="line"><span class="number">01</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">51.191</span> <span class="number">12827</span>-<span class="number">12854</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: TestActivity [ apply ] current thread is RxCachedThreadScheduler-<span class="number">2</span></div><div class="line"><span class="number">01</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">51.191</span> <span class="number">12827</span>-<span class="number">12854</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: TestActivity [ apply ] play url is api.xxxx.com?a=<span class="number">12</span>&amp;b=<span class="number">34</span>&amp;token=token-<span class="number">123456</span></div><div class="line"><span class="number">01</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">51.351</span> <span class="number">12827</span>-<span class="number">12827</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: TestActivity [ accept ] current thread is main</div><div class="line"><span class="number">01</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">51.351</span> <span class="number">12827</span>-<span class="number">12827</span>/com.rengwuxian.rxjavasamples D/===RxJavaSample==: TestActivity [ accept ] s=api.xxxx.com?a=<span class="number">12</span>&amp;b=<span class="number">34</span>&amp;token=token-<span class="number">123456</span></div></pre></td></tr></table></figure><ul><li><p>可以看到在第二次调用 subscribeOn(AndroidSchedulers.mainThread()) 并没有起作用，拿 token 的操作仍然是在 io 线程执行的。</p></li><li><p>而第一次调用 observeOn(Schedulers.io()) 之后，后面的 map 操作用 token 去拿 url 地址这个过程是在 io 线程执行的。</p></li><li><p>在第二次调用 observeOn(AndroidSchedulers.mainThread()) 之后，将 url 地址显示在 TextView 这个过程是在 主线程中执行的。</p></li></ul><h1 id="变换操作符"><a href="#变换操作符" class="headerlink" title="变换操作符"></a>变换操作符</h1><p>在 <a href="http://zengfanyu.top/2018/01/06/RxJava2/">只因为在众多框架中多看了你一眼 RxJava （二） 从概念上理解 RxJava</a> 这篇中举了一个过滤的例子，那么我理解的 RxJava 的变换操作，就类似于过滤过程，“过滤” 就是这个变换，但是变换不仅仅包含过滤。下面记录一些常用的操作符。</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map 就是对 Observable 发出的每一个事件，都施加一个函数，使得每一个事件都按照指定的函数去变化，Observer 接收到的事件就是经过函数变化后的。</p><p>官方图：</p><p><img src="https://i.imgur.com/qqxZRN3.png" alt=""></p><p>用代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">    .map(<span class="keyword">new</span> Function&lt;Integer, Integer&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(@NonNull Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="keyword">return</span> integer*<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull Integer s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            LogUtil.d(TAG,<span class="string">"[accept] "</span> + <span class="string">"after map s:"</span>+s);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><p>从上面的代码和示意图能看出来， <strong>map 操作符是一种一对一的关系</strong>。</p><h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><p>这个操作符通过例子来理解：</p><blockquote><p>需求：打印出每一个学生所选修的课程，一个学生不止选修一门课程。</p></blockquote><p>学生和课程的数据结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/1/8 10:22</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String mName;</div><div class="line">    <span class="keyword">private</span> List&lt;Course&gt;mCourses;</div><div class="line"></div><div class="line">    <span class="comment">//getter setter</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/1/8 10:35</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String courseName;</div><div class="line"></div><div class="line"><span class="comment">//getter setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>常规写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.fromIterable(mStudentList)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Student&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull Student student)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">for</span> (Course course : student.getCourses()) &#123;</div><div class="line">                    LogUtil.d(TAG, <span class="string">"[accept] "</span> + course.toString());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>mStudentList 中，xiaoming1 选修 yuwen1、yuwen2;xiaoming2 选修 yuwen3、yuwen4;xiaoming3 选修 yuwen5、yuwen6;</p><p>上述代码没报名，可以打印出每一个学生的选修课程，但是这对代码的复用性不高，我们希望的是在 Consumer 的 accept() 当中传入的参数就是一个一个的 Course 对象。</p><p>这个时候就要靠 flatMap 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.fromIterable(mStudentList)</div><div class="line">        .flatMap(<span class="keyword">new</span> Function&lt;Student, ObservableSource&lt;Course&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> ObservableSource&lt;Course&gt; <span class="title">apply</span><span class="params">(@NonNull Student student)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> Observable.fromIterable(student.getCourses());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Course&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull Course course)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"[accept] "</span> + course);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>flatMap 将原始 Observable 发送的事件构造成多个 Observable 对象，然后将他们发送的事件整合到另外的一个单独的 Observable 中。</p><p>官方解释图：</p><p><img src="https://i.imgur.com/VuAsIkS.png" alt=""></p><p>扔物线的解释图：</p><p><img src="http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4i8da2j20hg0dydgx.jpg" alt=""></p><p>还有一种图，很形象：</p><p><img src="https://upload-images.jianshu.io/upload_images/1008453-2ccce5cf25e8023a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/647" alt=""></p><p>flatMap 的原理：</p><ol><li>使用传入的事件对象创建一个 Observable 对象；</li><li>并不发送这个 Observable, 而是将它激活，于是它开始发送事件；</li><li>每一个创建出来的 Observable 发送的事件，都被汇入同一个 Observable ，而这个 Observable 负责将这些事件统一交给 Subscriber 的回调方法。</li></ol><p>这三个步骤，把事件拆成了两级，通过一组新创建的 Observable 将初始的对象<strong>「铺平」</strong>之后通过统一路径分发了下去。而这个「铺平」就是 flatMap() 所谓的 flat。</p><p>可以看得出来上面的示意图能看出来，<strong>flatMap 并不能保证事件的顺序，要想保证顺序，则用 ConcatMap</strong>。</p><p>从上面的代码和示意图能看出来， <strong>flatMap 操作符是一种一对多的关系</strong>。</p><h3 id="flatMap-拓展"><a href="#flatMap-拓展" class="headerlink" title="flatMap 拓展"></a>flatMap 拓展</h3><p>传统的嵌套请求是需要嵌套回调机制来实现的，但是使用 flatMap 就可以把请求写在一条链中，使逻辑清晰，这也可以体现它的优势吧：随着程序逻辑越来越复杂，它仍然能保持简洁。</p><p>假设存在两个 Retrofit 接口， 一个用于注册，一个用于登录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="function">Observable&lt;LoginResponse&gt; <span class="title">login</span><span class="params">(@Body LoginRequest request)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="function">Observable&lt;RegisterResponse&gt; <span class="title">register</span><span class="params">(@Body RegisterRequest request)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>(这里涉及到Rxjava + Retrofit 的使用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">api.register(<span class="keyword">new</span> RegisterRequest())            <span class="comment">//发起注册请求</span></div><div class="line">    .subscribeOn(Schedulers.io())               <span class="comment">//在IO线程进行网络请求</span></div><div class="line">    .observeOn(AndroidSchedulers.mainThread())  <span class="comment">//回到主线程去处理请求注册结果</span></div><div class="line">    .doOnNext(<span class="keyword">new</span> Consumer&lt;RegisterResponse&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(RegisterResponse registerResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="comment">//先根据注册的响应结果去做一些操作</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .observeOn(Schedulers.io())                 <span class="comment">//回到IO线程去发起登录请求</span></div><div class="line">    .flatMap(<span class="keyword">new</span> Function&lt;RegisterResponse, ObservableSource&lt;LoginResponse&gt;&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> ObservableSource&lt;LoginResponse&gt; <span class="title">apply</span><span class="params">(RegisterResponse registerResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="keyword">return</span> api.login(<span class="keyword">new</span> LoginRequest());</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .observeOn(AndroidSchedulers.mainThread())  <span class="comment">//回到主线程去处理请求登录的结果</span></div><div class="line">    .subscribe(<span class="keyword">new</span> Consumer&lt;LoginResponse&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(LoginResponse loginResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"登录成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"登录失败"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>concat 操作符用于链接多个事件，只有当前面一个事件<strong>结束</strong>之后，才会发送后面的事件。</p><p>官方图：</p><p><img src="https://i.imgur.com/k64tmTR.png" alt=""></p><p>我们获取网络数据的时候，经常会在本地缓存一份，然后在下一次获取数据的时候，会先从缓存中去拿数据，如果拿到了数据就直接返回，如果没有拿到数据，再去请求网络获取数据。</p><p>这样的需求就十分适合使用 concat 操作符来完成。</p><ul><li>从缓存中拿数据的 Observable</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//从缓存获取数据</span></div><div class="line">Observable&lt;FidResponseBean&gt; getCacheDataObservable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;FidResponseBean&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;FidResponseBean&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"current thread:"</span> + Thread.currentThread().getName());</div><div class="line"><span class="comment">//尝试从缓存弄中拿数据</span></div><div class="line">        FidResponseBean cacheData = CacheManager.getInstance().getCache(Network.fid);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (cacheData != <span class="keyword">null</span>) &#123;</div><div class="line">            isFromNet = <span class="keyword">false</span>;</div><div class="line">            LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"data from cache"</span>);</div><div class="line">            runOnUiThread(() -&gt; tv.setText(<span class="string">"data from: cahce"</span>));</div><div class="line"><span class="comment">//调用 onNext 方法不会触发下一个 Observable</span></div><div class="line">            e.onNext(cacheData);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            isFromNet = <span class="keyword">true</span>;</div><div class="line">            LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"data from net"</span>);</div><div class="line">            runOnUiThread(() -&gt; tv.setText(<span class="string">"data from: net"</span>));</div><div class="line">            <span class="comment">//只有调用 onComplete 之后，才会执行下一个 Observable</span></div><div class="line">            e.onComplete();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>从网络拿数据的 Observable</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//从网络获取数据</span></div><div class="line">Observable&lt;FidResponseBean&gt; getNetDataObservable = Network.getFidApi().getFidInfo(</div><div class="line">        Network.name,</div><div class="line">        Network.length,</div><div class="line">        Network.ppfeature);</div></pre></td></tr></table></figure><p>其中 Network 是封装好的 Retrofit 工具。</p><p>API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FidApi</span> </span>&#123;</div><div class="line">    <span class="meta">@GET</span>(<span class="string">"uploadtest/uptoken"</span>)</div><div class="line">    <span class="function">Observable&lt;FidResponseBean&gt; <span class="title">getFidInfo</span><span class="params">(@Query(<span class="string">"name"</span>)</span> String name,</span></div><div class="line"><span class="function">                                           @<span class="title">Query</span><span class="params">(<span class="string">"length"</span>)</span> String length,</span></div><div class="line"><span class="function">                                           @<span class="title">Query</span><span class="params">(<span class="string">"ppfeature"</span>)</span>String ppfeature)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>使用 concat 操作符。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.concat(getCacheDataObservable, getNetDataObservable)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;FidResponseBean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull FidResponseBean fidResponseBean)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"[ accept ] "</span> + <span class="string">"subscribe success thread:"</span> + Thread.currentThread().getName());</div><div class="line"></div><div class="line">                show.setText(String.format(<span class="string">"data: %s"</span>, fidResponseBean.toString()));</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (isFromNet) &#123;</div><div class="line"><span class="comment">//缓存</span></div><div class="line">                    CacheManager.getInstance().putCache(fidResponseBean);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                LogUtil.d(TAG, <span class="string">"[ accept ] "</span> + <span class="string">"subscribe fail thread:"</span> + Thread.currentThread().getName() + <span class="string">"\n"</span> +</div><div class="line">                        <span class="string">"e:"</span> + throwable.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//没有缓存的时候</div><div class="line">01-20 13:58:56.774 6750-7543/com.rengwuxian.rxjavasamples D/===RxJavaSample==: TestActivity [ subscribe ] current thread:RxCachedThreadScheduler-1</div><div class="line">01-20 13:58:56.775 6750-7543/com.rengwuxian.rxjavasamples D/===RxJavaSample==: TestActivity [ subscribe ] data from net</div><div class="line">01-20 13:58:57.491 6750-6750/com.rengwuxian.rxjavasamples D/===RxJavaSample==: TestActivity [ accept ] subscribe success thread:main</div><div class="line"></div><div class="line">//有缓存的时候</div><div class="line">01-20 14:06:32.625 6750-14144/com.rengwuxian.rxjavasamples D/===RxJavaSample==: TestActivity [ subscribe ] current thread:RxCachedThreadScheduler-2</div><div class="line">01-20 14:06:32.625 6750-14144/com.rengwuxian.rxjavasamples D/===RxJavaSample==: TestActivity [ subscribe ] data from cache</div><div class="line">01-20 14:06:32.627 6750-6750/com.rengwuxian.rxjavasamples D/===RxJavaSample==: TestActivity [ accept ] subscribe success thread:main</div></pre></td></tr></table></figure><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>关于 zip 操作符，官方的解释图：</p><p><img src="https://i.imgur.com/JhkoxIt.png" alt=""></p><p>另一种解释图：</p><p><img src="https://i.imgur.com/SIkeMyp.png" alt=""></p><p>详细版：</p><p><img src="https://i.imgur.com/hc1blb8.png" alt=""></p><blockquote><p>后两张水管图引用自： <a href="https://www.jianshu.com/p/bb58571cdb64" target="_blank" rel="external">https://www.jianshu.com/p/bb58571cdb64</a></p></blockquote><p>有了上面三张图， zip 操作符的作用就很好理解了，就是<strong>通过一个函数将多个 Observable 发送的事件结合到一起，然后发送这些组合到一起的事件. 它按照严格的顺序应用这个函数。它只发射与发射数据项最少的那个 Observable 一样多的数据。</strong></p><p>当然了，还有一些细节上的问题需要注意的，闲先总结：</p><ul><li>zip 可以将多个 Observable 发送的事件组合在一起，并且基于这个函数的结果，将每一个组合后的事件重新发送出去，并且一个事件只能被组合一次，组合的顺序是严格按照事件发送的顺序来进行的。</li><li>最终 Observer 接收到的事件的数量，是 Observable 发送事件最少的哪一个的事件数量。</li></ul><p>举个栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable&lt;Integer&gt; observable1 = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter 1"</span>);</div><div class="line">               e.onNext(<span class="number">1</span>);</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter 2"</span>);</div><div class="line">               e.onNext(<span class="number">2</span>);</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter 3"</span>);</div><div class="line">               e.onNext(<span class="number">3</span>);</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter 4"</span>);</div><div class="line">               e.onNext(<span class="number">4</span>);</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"complete 1"</span>);</div><div class="line">               e.onComplete();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       Observable&lt;String&gt; observable2 = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter a"</span>);</div><div class="line">               e.onNext(<span class="string">"a"</span>);</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter b"</span>);</div><div class="line">               e.onNext(<span class="string">"b"</span>);</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter c"</span>);</div><div class="line">               e.onNext(<span class="string">"c"</span>);</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"complete 2"</span>);</div><div class="line">               e.onComplete();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">       Observable.zip(observable1, observable2, <span class="keyword">new</span> BiFunction&lt;Integer, String, String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(@NonNull Integer integer, @NonNull String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               <span class="keyword">return</span> integer+s;</div><div class="line">           &#125;</div><div class="line">       &#125;).subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ onSubscribe ] "</span>);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ onNext ] "</span> + <span class="string">"s:"</span> + s);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ onError ] "</span> + e.toString());</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">               LogUtil.d(TAG, <span class="string">"[ onComplete ] "</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure><p>代码很简单，一个 Observable 发送 1、2、3、4、onCompele，另外一个 Observab 发送 a、b、c、onComplete。</p><p>打印出的结果：</p><p><img src="https://i.imgur.com/OpDcovw.png" alt=""></p><p>照这个顺序看，似乎是先发送 Observable1 的事件，然后再发送 Observable2 的事件，并且每发送一个 Observable2 的事件就会触发 Observer 做出反应。</p><p>那么是不是这样呢？</p><p>我们将每个发送事件的代码都延时 1s ，这里就不贴代码了。</p><p><img src="https://i.imgur.com/93rKh2W.gif" alt=""></p><p>似乎是这样哈？ 但是按照上面的解释图来说，不应该是这样呀，应该是 Observable1 发送一个事件，然后 Observable2 发送一个事件，然后组合了之后，Observer 接收一个事件 才对。 </p><p>分析一下原因：</p><p>目前的代码，Observable1 和 Observable2 发送事件都在同一个线程当中，在同一个线程里代码的执行时有先后顺序的，当然是先执行完 Observable1 发送的所有事件之后，再执行 Observer2 发送的事件，然后组合，然后 Observer 接收。</p><p>如果将 Observa1 和 Observa2 发送事件分别放在两个线程当中呢？</p><p>修改一下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> Observable&lt;Integer&gt; observable1 = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">         LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter 1"</span>);</div><div class="line">         e.onNext(<span class="number">1</span>);</div><div class="line">         Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">         LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter 2"</span>);</div><div class="line">         e.onNext(<span class="number">2</span>);</div><div class="line">         Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">         LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter 3"</span>);</div><div class="line">         e.onNext(<span class="number">3</span>);</div><div class="line">         Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">         LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter 4"</span>);</div><div class="line">         e.onNext(<span class="number">4</span>);</div><div class="line"><span class="comment">//注意这里没有睡 1s</span></div><div class="line"></div><div class="line">         LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"complete 1"</span>);</div><div class="line">         e.onComplete();</div><div class="line">     &#125;</div><div class="line"> &#125;).subscribeOn(Schedulers.io());</div><div class="line"></div><div class="line"> Observable&lt;String&gt; observable2 = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">         LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter a"</span>);</div><div class="line">         e.onNext(<span class="string">"a"</span>);</div><div class="line">         Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">         LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter b"</span>);</div><div class="line">         e.onNext(<span class="string">"b"</span>);</div><div class="line">         Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">         LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"emitter c"</span>);</div><div class="line">         e.onNext(<span class="string">"c"</span>);</div><div class="line">         Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">         LogUtil.d(TAG, <span class="string">"[ subscribe ] "</span> + <span class="string">"complete 2"</span>);</div><div class="line">         e.onComplete();</div><div class="line">     &#125;</div><div class="line"> &#125;).subscribeOn(Schedulers.io());</div><div class="line"></div><div class="line"> Observable.zip(observable1, observable2, <span class="keyword">new</span> BiFunction&lt;Integer, String, String&gt;() &#123;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(@NonNull Integer integer, @NonNull String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">         <span class="keyword">return</span> integer + s;</div><div class="line">     &#125;</div><div class="line"> &#125;)</div><div class="line">         .subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">             <span class="meta">@Override</span></div><div class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line">                 LogUtil.d(TAG, <span class="string">"[ onSubscribe ] "</span>);</div><div class="line">             &#125;</div><div class="line"></div><div class="line">             <span class="meta">@Override</span></div><div class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                 LogUtil.d(TAG, <span class="string">"[ onNext ] "</span> + <span class="string">"s:"</span> + s);</div><div class="line">             &#125;</div><div class="line"></div><div class="line">             <span class="meta">@Override</span></div><div class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                 LogUtil.d(TAG, <span class="string">"[ onError ] "</span> + e.toString());</div><div class="line">             &#125;</div><div class="line"></div><div class="line">             <span class="meta">@Override</span></div><div class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                 LogUtil.d(TAG, <span class="string">"[ onComplete ] "</span>);</div><div class="line">             &#125;</div><div class="line">         &#125;);</div></pre></td></tr></table></figure><p>跟之前的代码比较，就是将两个 Observab 放在子线程中去执行了。</p><p>看看 Log</p><p><img src="https://i.imgur.com/50XjXdR.png" alt=""></p><p>动态图：</p><p><img src="https://i.imgur.com/Y8LVCgP.gif" alt=""></p><p>这次的 Log 是不是就比较合理了！两个 Observable 同时开始发送，每发送一个 zip 就会组合一个，然后发送给 Observer，然后当事件少的哪一个 Observab2 发送了 onComplete 之后，虽然 Observable1 还是会继续发送，但是 Obserber 不会接收了。</p><p>还有一点要注意的：上面图片中的 红色的框框，会发现并不一定就是 observable1 发一个，然后 Observable2 发送一个，两者可能是交错进行的，这个涉及到某一时刻是哪个线程获取到 cpu 的执行权，所以上面代码多运行几次，log 并不相同，比如还有这种情况：</p><p><img src="https://i.imgur.com/FT4TRnJ.png" alt=""></p><p>并且把延迟的代码去掉之后，再看看 log</p><p><img src="https://i.imgur.com/TX88LHQ.png" alt=""></p><p>对的，毫无规律可言，因为当前是哪个线程拿到 cpu 的控制权是不确定的，并且在每一轮当中的时间片长短也有差别，所以日志中会出现这种情况。</p><p>这个部分就总结到这了，后面看看背压相关的。</p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cCjinS0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;摘要：之前的记录了一下 RxJava 最基本的使用方法，没有涉及到为什么这么多人使用它的具体原因，就是说没体现它的魅力所在嘛， 所以这一篇就记录一下我学习的RxJava 当中的变换操作符（Operator）和调度器（Scheduler），前者可以说是 RxJava 的核心功能之一，也是大多数人使用 RxJava 的主要原因，后者是可以让不同线程之间的代码在一条链路代码中书写，极大简化逻辑。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://zengfanyu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>只因为在众多框架中多看了你一眼 RxJava （三） RxJava 最基础的使用</title>
    <link href="http://zengfanyu.top/2018/01/06/RxJava3/"/>
    <id>http://zengfanyu.top/2018/01/06/RxJava3/</id>
    <published>2018-01-06T08:27:16.000Z</published>
    <updated>2018-01-06T09:04:10.179Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/cCjinS0.png" alt=""></p><p>摘要：上一篇理解了概念之后，这里就要用代码来实现以下了，这一篇只涉及到 RxJava 的最基础的用法，不涉及高级特性。<br><a id="more"></a></p><font face="黑体"><h1 id="RxJava的基本用法"><a href="#RxJava的基本用法" class="headerlink" title="RxJava的基本用法"></a>RxJava的基本用法</h1><p>RxJava 的基本实现,总结起来,主要有三点:</p><ol><li>创建 Observer</li><li>创建 Observable</li><li>订阅</li></ol><h2 id="创建-Observer-观察者"><a href="#创建-Observer-观察者" class="headerlink" title="创建 Observer 观察者"></a>创建 Observer 观察者</h2><p><strong>Observer 即观察者,它决定当事件发生的时候,会有怎么样的行为</strong>.RxJava 中 Observer 接口的实现方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Item: "</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Completed!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Error!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>除了 Observer 接口之外, Rxjava 当中还内置了一个实现了 Observer 接口的抽象类, Subscriber , Subscriber 对 Observer 做了扩展,但是两者的使用方式是完全一样的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Item: "</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Completed!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"Error!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>既然 观察者的作用是 决定当事件触发时,会有什么样的行为,那么我们能不能直接有方法定义出行为就可以了呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="comment">// onNext()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(tag, s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//Action1接口是RxJava当中定义的,其中只有一个call(T param)方法,这个call方法有1个参数,无返回值</span></div><div class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">    <span class="comment">// onError()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">        <span class="comment">// Error handling</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//Action0接口是RxJava当中定义的,其中只有一个call()方法,这个call方法无参数无返回值</span></div><div class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</div><div class="line">    <span class="comment">// onCompleted()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"completed"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>至于 onNextAction onErrorAction onCompletedAction 如何使用,为什么几个 Action 就能代表 Subscriber 的 onNext onError onCompleted 方法呢 ? 下面 Subscribe 订阅的时候说.</p><h2 id="创建-Observable-被观察者"><a href="#创建-Observable-被观察者" class="headerlink" title="创建 Observable 被观察者"></a>创建 Observable 被观察者</h2><p><strong>Observable 指的是被观察者,它决定事件什么时候触发,以及触发何种事件</strong>. RxJava 用 <strong>create()</strong> 方法来创建一个 Observable ,并为它定义触发规则.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        subscriber.onNext(<span class="string">"Java"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"C++"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"Python"</span>);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>这里参数传入的是 OnSubscribe 对象,这个对象会被存储在 Observable 中,充当一个<strong>计划表</strong>的角色,具体的计划内容就是 call 方法中的实现.</li><li>call() 方法的参数 Subscriber 就是观察者,两者关系的建立看下面.</li><li>当 Observable 被订阅的时候, OnSubscribe 的 call 方法会被自动调用,然后去执行计划,上面的代码的计划就是执行三次 onNext() ,然后执行一次 onCompleted().</li><li>到这里就实现了事件由被观察者向观察者的传递.</li></ul><p>看上面的代码,被观察者的作用就是触发事件,那么可不可以有一种类似于 Java8 当中的便捷构造流的方法一样(Stream.of(T…)),直接将事件按照顺序创建出来就行了?当然有</p><ul><li>just(T…)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable observable = Observable.just(<span class="string">"Java"</span>, <span class="string">"C++"</span>, <span class="string">"Python"</span>);</div><div class="line"></div><div class="line"><span class="comment">//上述代码等价于创建被观察者,然后依次调用了观察者的 onNext("Java"), onNext("C++"),onNext("Python"),onCompleted()</span></div></pre></td></tr></table></figure><ul><li>from(T[]) / from(Iterable&lt;? extends T&gt;) : 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String[] words = &#123;<span class="string">"Java"</span>, <span class="string">"C++"</span>, <span class="string">"Python"</span>&#125;;</div><div class="line">Observable observable = Observable.from(words);</div><div class="line"><span class="comment">// 效果和上面一样</span></div></pre></td></tr></table></figure><h2 id="Subscribe-订阅"><a href="#Subscribe-订阅" class="headerlink" title="Subscribe 订阅"></a>Subscribe 订阅</h2><p>之前创建了 Observer 和 Observable 之后,就要将两者关联起来了,这就相当于创建了 Button 和 OnClickListener 之后,需要有一个 setOnClickListener 方法,将两者关联起来,这样当 Button 上有点击事件发生的时候,它就回去调用 OnClickListener 的 onClick 方法.这里的 Subscribe 订阅起的作用和 setOnClickListener 是一样的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">observable.subscribe(observer);</div><div class="line"><span class="comment">//或者</span></div><div class="line">observable.subscribe(subscriber);</div><div class="line"><span class="comment">//这个过程就类似于</span></div><div class="line"><span class="comment">//button.setOnClickListener(mOnClickListener);</span></div></pre></td></tr></table></figure><p>Observable.subscribe(Subscriber) 的内部实现是这样的（仅核心代码）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Subscription <span class="title">subscribe</span><span class="params">(Subscriber subscriber)</span> </span>&#123;</div><div class="line">    subscriber.onStart();</div><div class="line">    onSubscribe.call(subscriber);</div><div class="line">    <span class="keyword">return</span> subscriber;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>订阅过程做三件事:</p><ol><li>调用 subscriber.onStart() 做预处理工作.</li><li>调用 onSubscribe.call(subscriber) 方法.(这也就是为什么在上面创建被观察者时,我们说 「<em>当 Observable 被订阅的时候, OnSubscribe 的 call 方法会被自动调用,然后去执行计划</em>.」)</li><li>将传入的 subscriber 返回,便于 unSubscribe().</li></ol><p>现在可以说说之前在创建 Observer  时,创建的三个 Action 了.</p><p>除了 subscribe(Observer) 和 subscribe(Subscriber) ，subscribe() 还支持不完整定义的回调，RxJava 会自动根据定义创建出 Subscriber 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 来定义 onNext()</span></div><div class="line">observable.subscribe(onNextAction);</div><div class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></div><div class="line">observable.subscribe(onNextAction, onErrorAction);</div><div class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></div><div class="line">observable.subscribe(onNextAction, onErrorAction, onCompletedAction);</div></pre></td></tr></table></figure><p>我们观察可以发现,</p><ul><li>Subscriber 的 onNext , onError 方法的返回类型是 void , 并带有一个参数,分别是 String , Throwable 而 Action1 接口里面的 call 方法也是有一个参数 T ,返回类型是 void.</li><li>Subscriber 的 onCompleted 方法的返回类型是 void, 没有参数,而 Action0 接口里的 call 方法也是没有参数的, 并且返回值为 void.</li></ul><p>这么一总结,上面这个操作是不是就像 java8 当中的 lamuda 表达式了 ?   <a href="http://zengfanyu.top/2017/11/13/Java8---Lambda%20Expressions/">我在学习lambda表达式时总结的一篇文章</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//Before Java8</span></div><div class="line">mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"Button clicked!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"><span class="comment">//In java8 way    </span></div><div class="line">   mButton.setOnClickListener((v)-&gt; &#123;</div><div class="line">       System.out.println(<span class="string">"Button clicked!"</span>);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure><p>注意看下面的 lambda 表达式中的 (V) ,这里的 v 形参, 就是代表的是上面回调方法中的 view ,后面的 -&gt;System.out.println(“Button clicked!”) ,就是用于定义 onClick() 的方法体的.</p><p>确实类似,这里相当于其他语言中的 「闭包」.</p><p>到这里,就已经说完了 RxJava 当中最基础的三个角色了. 那么也可以简单的使用一下啦.</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>1)打印一串字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="string">"Java"</span>,<span class="string">"C++"</span>,<span class="string">"Python"</span>)</div><div class="line">  .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;()&#123;</div><div class="line"><span class="meta">@override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String languageName)</span></span>&#123;</div><div class="line">    log.d(<span class="string">"RxJava"</span>,<span class="string">"languageName"</span>);</div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>2)根据 drawable 资源名, 取出 drawable,然后显示到 imageView 上.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">int</span> drawableRes = ...;</div><div class="line">ImageView imageView = ...;</div><div class="line">Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Drawable&gt; subscriber)</span> </span>&#123;</div><div class="line">        Drawable drawable = getTheme().getDrawable(drawableRes));</div><div class="line">        subscriber.onNext(drawable);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">        imageView.setImageDrawable(drawable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Toast.makeText(activity, <span class="string">"Error!"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cCjinS0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;摘要：上一篇理解了概念之后，这里就要用代码来实现以下了，这一篇只涉及到 RxJava 的最基础的用法，不涉及高级特性。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://zengfanyu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>只因为在众多框架中多看了你一眼 RxJava （二） 从概念上理解 RxJava</title>
    <link href="http://zengfanyu.top/2018/01/06/RxJava2/"/>
    <id>http://zengfanyu.top/2018/01/06/RxJava2/</id>
    <published>2018-01-06T08:27:15.000Z</published>
    <updated>2018-01-06T09:23:54.313Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/cCjinS0.png" alt=""><br>摘要：一开始学习 RxJava ，觉得这东西特抽象，不好把握，但是在阅读了一些文章之后，也逐渐对 RxJaba 在宏观上有一个大概的认识，这一篇就记录一下我对 RxJava 最基础的理解。</p><a id="more"></a><font face="黑体"><h1 id="RxJava-是什么"><a href="#RxJava-是什么" class="headerlink" title="RxJava 是什么"></a>RxJava 是什么</h1><p>想要知道 RxJava 是什么，当然还是要去看看 RxJava 在 Github 上面的主页，毕竟官方的介绍是最准确的。</p><p>RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.</p><p>对，这就是官方对 RxJava 的解释，翻译一下：RxJava—JVM的反应式扩展。 是一个使用可观测的序列来组成异步的，基于事件序列的库。这么一说，我还是不能理解这个库到底是干嘛的，毕竟这是官方站在一定的高度上对 RxJava 的总结，就类似于在 Java 中的一句话：Everything is objects，刚开始接触 Java 时肯定也无法理解这句话的意思 。</p><p>既然官方的解释对于初学者的我来说这么难懂，那就先看看 Rx 是什么意思吧。Rx—全称是Reactive Extensions，直译过来就是响应式扩展。Rx<strong>基于观察者模式</strong>，他是一种编程模型，目标是提供一致的编程接口，帮助开发者更方便的处理异步数据流。ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。</p><p>这么一捋之后，我似乎有一点点理解了，它完成的功能似乎就是和 Google 官方的 AsyncTask Handler 类似，<strong>解决异步问题的</strong>，<strong>但是为什么大家都用它而不去使用 AsyncTask Handler 呢？ 这些也都是解决异步的呀？</strong> </p><p>答案是：<strong>简洁</strong>，逻辑上的简洁。</p><p>所以这里就一句话，<strong>RxJava 是用一种扩展的观察者模式解决异步问题的基于事件序列的库</strong>。</p><p>所以我就从观察者模式开始学习了。</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>那就要先说说观察者模式了。</p><p>打个比方来说，我们公司外面的馄饨店，每天中午好多人都回去哪里吃馄饨，大家过去了之后「点了一碗馄饨并付账」，就坐在那里等着老板叫号了。老板一叫：25号鲜肉小馄饨好了，那么一哥们听到之后，就立马「屁颠颠的跑过去端回来吃」，老板又叫：28号荠菜大馄饨好了，一妹子又「屁颠颠的跑过去端回来吃」。这个过程就是一个观察者模式。</p><p>这里涉及到三个对象，观察者：坐着等馄饨的吃货们。被观察者：馄饨店老板。订阅关系：点了一碗馄饨并付账。 还涉及到一个具体的反应过程：「屁颠颠的跑过去端回来吃」。</p><p>图解：</p><p><img src="https://i.imgur.com/AhpeI4B.png" alt=""></p><p>再说说在 Android 开发中会经常接触到的观察者模式，对一个 Button 的监听。Button 是被观察者，OnClickListener 是观察者，两者通过 setOnClickListener 方法达成订阅关系，那么此时 OnClickListener 就对 Button 的点击事件高度敏感了，只要 Button 以被用户点击，那么 OnClickListener 就会“立马”（这个立马，要打个引号，应为这里还涉及到事件的分发过程，不展开说了）做出反应，也就是调用它的 onClick 方法。</p><p>图解：</p><p><img src="https://i.imgur.com/6z9gunU.png" alt=""></p><p>其实上面两个过程我们也可以这样理解，<strong>观察者和被观察者之间先有订阅关系，然后被观察者发出了一个事件，然后观察者接收到这个事件之后，做出了响应</strong>。</p><p>在从事件出发的角度捋捋上面两个过程：</p><p>吃货去馄饨店里「点了一碗馄饨并付账」，那么就<strong>订阅了馄饨店老板发出的 HuntunReady 事件</strong>。当馄饨店老板<strong>发出了一个 HuntunReady 的事件</strong>（图中没有画出）的时候，吃货A<strong>接收到这个事件</strong>并做出反应，也就是<strong>调用了 onHuntunReady 方法去处理</strong>,具体的处理逻辑就是：「屁颠颠的跑过去端回来吃」（图中也没有画出）。</p><p>OnClickListener 通过 setOnclickListener 订阅 Button 的 Click 事件，当Button 发出了一个 Click 的事件， OnClickListener 接受到了这个事件，就要做出了反映，也就是调用 onClick 方法，执行当中的逻辑。</p><p>对照表：</p><p><img src="https://i.imgur.com/7HYKYLy.png" alt=""></p><p>那么我们把这个概念抽象为观察者，被观察者，订阅，那么图应该是这样的：</p><p><img src="https://i.imgur.com/E31Ycqd.png" alt=""></p><h2 id="RxJava-当中的观察者模式"><a href="#RxJava-当中的观察者模式" class="headerlink" title="RxJava 当中的观察者模式"></a>RxJava 当中的观察者模式</h2><p>有了上面两个例子的铺垫，这里就推导出，RxJava 就是 Observer 和 Observable 两者先发生订阅关系，然后 Observable 发出事件序列，Observer 接受事件并响应处理。</p><p>但之前又说到 RxJava 使用的是一种扩展的观察者模式，那么跟上面两个例子中肯定是有不同的。它扩展之后的形式如下：</p><p><img src="https://i.imgur.com/HYAnpoS.png" alt=""></p><h3 id="区别（一）"><a href="#区别（一）" class="headerlink" title="区别（一）"></a>区别（一）</h3><p>看的出来， RxJava 中的观察者模式跟传统观察者模式比起来，事件的回调方法除了普通事件 onNext（相当于上面例子中的 onClick 和 onHuntunReady）之外，还定义了两个特殊的事件， onCompleted()， onError();</p><p>这三个事件遵从一定的规则：</p><ol><li>Observable 可以发送无限个 onNext 事件，Observer 可以接受无限个 onNext 事件。</li><li>当 Observable 发送了 onCompleted 或者 onError 序列之后，之后的事件序列仍然会发送，但是 Observer 这边在接收到 onCompleted 或者 onError 事件之后，是不会在继续接收之后的事件序列的。</li><li>Observable 可以不发送 onCompleted 或者 onError 事件。</li><li>onCompleted 和 onError 事件必须互斥。也就是说在一个事件序列中，要么是没有 onCompleted 和 onError 事件，要么有且只能有其中一个。</li></ol><h3 id="区别（二）"><a href="#区别（二）" class="headerlink" title="区别（二）"></a>区别（二）</h3><p>就是 Observable 在发送事件到 Observer 的过程中，多了一个 Operate 过程，这个操作就是对事件进行一系列的处理，然后再发送至 Observer。要说到这个操作就不得不提 Java8 当中的 Stream 和它对其中每一个元素进行的函数式操作。</p><p>我们用“过滤”这个操作来打个比方，</p><blockquote><p>就像下面这幅图中画的那样，我有一杯混合着大大小小石子的蓝色的水。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_1.jpg" alt=""></p><p>现在按照我们关于“流”的定义，我用下图中的方法将水转化成“流”。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_2.jpg" alt=""></p><p>为了让水变成水流，我把水从一个杯子倒进另一个杯子 里。现在我想去掉水中的大石子，所以我造了一&gt;</p><p>个可以帮我滤掉大石子的过滤器。“大石子过滤器”如下图所示。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_3.jpg" alt=""></p><p>现在，将这个过滤器作用在水流上，这会得到不包含大石子的水。如下图所示。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_4.jpeg" alt=""></p><p>接下来，我想从水中清除掉所有石子。已经有一个过滤大石子的过滤器了，我们需要造一个新的来过滤&gt;小石子。“小石子过滤器”如下图所示。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_5.jpg" alt=""></p><p>像下图这样，将两个过滤器同时作用于水流上。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_6.png" alt=""></p><p>接下来，我想把水的颜色从蓝色变成黑色。为了达到这个目的，我需要造一个像下图这样的“水颜色转换器（mapper）”。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_7.jpg" alt=""></p><p>像下图这样使用这个转换器。</p><p><img src="http://www.uwanttolearn.com/wp-content/uploads/2017/03/war_against_learning_curve_of_rx_java_2_java_8_stream_8.jpg" alt=""></p><p>把水转换成水流后，我们做了很多事情。我先用一个过滤器去掉了大石子，然后用另一个过滤器去掉了&gt;小石子， 最后用一个转换器（map）把水的颜色从蓝色变成黑色。</p><p>这个过程就是 Java8 当中对流的操作的一个具体的体现。</p></blockquote><p>好了，现在可以回到 Rxjava 当中了。</p><p>RxJava 当中的 operate 过程也类似于上面的过滤过程，在 Observable 发出事件之后，可以利用「操作符」对事件进行一系列的操作，包括但不仅仅局限于 “过滤”、“合并”、“线程切换”等等，得到我们最终想要的“过滤”后的事件。</p><p>恩，这就是 RxJava 当中最基础的东西了，先对 RxJava 有一个宏观上的认识，后面才好继续学习。</p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cCjinS0.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;摘要：一开始学习 RxJava ，觉得这东西特抽象，不好把握，但是在阅读了一些文章之后，也逐渐对 RxJaba 在宏观上有一个大概的认识，这一篇就记录一下我对 RxJava 最基础的理解。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://zengfanyu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>只因为在众多框架中多看了你一眼 RxJava （一）</title>
    <link href="http://zengfanyu.top/2018/01/04/Rxjava1/"/>
    <id>http://zengfanyu.top/2018/01/04/Rxjava1/</id>
    <published>2018-01-04T13:27:15.000Z</published>
    <updated>2018-01-06T08:47:39.021Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/cCjinS0.png" alt=""></p><font face="黑体"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>年关将近,部门里任务也多了起来,最近一个月多都在忙着部门项目,因为突然接手了三个项目,虽然已经开发了一个版本,但是我还是花了很多时间去消化现有的版本,然后接着迭代开发,昨天上线了,现在有了空余的时间,准备接着写博客了。</p><p>之前在写 <a href="http://zengfanyu.top/2017/10/20/MVP1/">MVP 系列第一篇文章</a>的时候就立了一个 <code>Flag</code>， 要学习 <code>MVP</code>、<code>okHttp</code>、<code>Rxjava</code>、<code>Retrofit2</code>、<code>Dagger2</code>，然后用这些流行开源框架撸一个 <code>APP</code>。现在 <code>MVP</code> 系列算是有了基础的了解了，并在学 MVP 的时候，把 <code>OkHttp</code> 也封装着在 <code>Model</code> 层使用，<code>Retrofit2</code> 也零零散散看过一些 <code>Demo</code> ，<code>Dagger2</code> 之前也总结了一篇文章 <a href="http://zengfanyu.top/2017/11/04/Dagger/">Dagger2基础内容归纳</a>。剩下比较难啃的就是 <code>RxJava了</code>。这个任务已经被我添加到我 <code>2018</code> 年的计划当中了。</p><p>在两年前刚开始接触到 <code>RxJava</code> 的时候，是被它的链式调用所吸引，子线程操作、主线程操作、线程切换、事件变换在链式调用里一气呵成，再也看不到 <code>AsyncTask</code> 中繁琐的各种方法，同时也被它的各种高级特性所迷惑，各种操作符，各种闭包特性。之前在学校里的时候就看过「扔物线」大神的经典入门文章<a href="https://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a> ，但是当时忙于找工作、实习，之后忙着毕业论文、毕业疯，一直没有好好实践，现在准备好好学习一下时发现，已经到了 <code>RxJava2</code> 的时代了，之前「扔物线」大神的那篇是基于 <code>Rxjava1</code> 写的，是先学学 <code>RxJava1</code> 再去学习 <code>2</code> 好呢，还是直接去学习 <code>2</code> ，思来想去感觉这个问题就像： 学习 <code>java</code> 之前要先学习 <code>C</code> 吗？ 抛开别的不说，「扔物线」的那篇入门文章是质量是相当高的，深入浅出，对于我这样的初学者来说，学习的价值是十分大的，然后在看完这篇 <a href="https://www.jianshu.com/p/850af4f09b61" target="_blank" rel="external">RxJava2 vs RxJava1</a> 对比的文章之后，<strong>我觉得还是很有必要去了解一下 <code>Rxjava1</code> 的，这样才能知道 <code>2</code> 改进在哪里，为什么这么改进， 是因为 <code>1</code> 中使用有什么问题。</strong></p><p>并且后来在学习了 <code>java8</code> 当中的 <code>Lambda</code> 以及 <code>Streams</code> 之后发现，<code>RxJava</code> 当中很多实现都和其十分相似，比如说「闭包」特性的体现，和 <code>Stream</code> 当中对元素的挨个处理再返回，以及函数式编程的思想。</p><h1 id="刚接触RxJava的情景还原"><a href="#刚接触RxJava的情景还原" class="headerlink" title="刚接触RxJava的情景还原"></a>刚接触RxJava的情景还原</h1><p>说说最开始接触到 <code>RxJava</code> 的代码吧，应该是 <code>2016</code> 年的某一天。</p><p>一开始看到的是下面这两段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//被观察者</span></div><div class="line">Observable&lt;String&gt; myObservable = Observable.create(</div><div class="line">    <span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; sub)</span> </span>&#123;</div><div class="line">            sub.onNext(<span class="string">"Hello, world!"</span>);</div><div class="line">            sub.onCompleted();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"><span class="comment">//观察者</span></div><div class="line">Subscriber&lt;String&gt; mySubscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123; System.out.println(s); &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//订阅</span></div><div class="line">myObservable.subscribe(mySubsciber);</div></pre></td></tr></table></figure><p>好了，一个简单的使用 <code>RxJava</code> 的代码就完成了，最初我看到这段代码，心中就是</p><p><img src="https://i.imgur.com/sp3uNa4.jpg" alt=""></p><p>打印一个字符串搞这个复杂？？ 这是靠代码量算工资吗？？？</p><p>后来人家说，上面那样写太复杂了，正确姿势：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="string">"Hello, world!"</span>)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">              System.out.println(s);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><p>人家说这样跟上面那一梭代码功能是一样的。 后来又有人说，这还是太复杂，要简化一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="string">"Hello, world!"</span>)</div><div class="line">    .subscribe(s -&gt; System.out.println(s));</div></pre></td></tr></table></figure><p>我的内心：</p><p><img src="https://i.imgur.com/r1DOkxd.jpg" alt=""></p><p>之后我知道，原来这段单代码使用了 <code>Java8 Lambda</code> 表达式，利用函数式编程的优势，简化了程序中余的代码，所以在学习 <code>RxJava</code> 之前我应该先去学习一下 <code>Java8 lambda</code> 。总结文章：<a href="http://zengfanyu.top/2017/11/13/Java8---Lambda%20Expressions/">新姿势学习之Java8—Lambda Expressions</a>。</p><p>我以为这就行了，但是接下来看到的代码更是让我更加坚定。。。</p><p>要想在 <code>Subscriber</code> 当中打印出 <code>Observable</code> 发送出来的每一个字符串后面加上 <code>&quot;-ZFY&quot;</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="string">"Hello, world!"</span>)</div><div class="line">    .map(<span class="keyword">new</span> Func1&lt;String, String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> s + <span class="string">" -ZFY"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(s -&gt; System.out.println(s));</div></pre></td></tr></table></figure><p>同样的用 Lambda 简化；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="string">"Hello, world!"</span>)</div><div class="line">    .map(s -&gt; s + <span class="string">" -ZFY"</span>)</div><div class="line">    .subscribe(s -&gt; System.out.println(s));</div></pre></td></tr></table></figure><p>然后我突然又想输出 接受的字符串拼接上”-ZFY” 的HashCode 的字符串， 那么可以这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Observable.just(<span class="string">"Hello, world!"</span>)</div><div class="line">    .map(s -&gt; s.hashCode())</div><div class="line">    .map(i -&gt; Integer.toString(i))</div><div class="line">    .subscribe(s -&gt; System.out.println(s));</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/RxHG48a.jpg" alt=""></p><p>到这里还没有涉及到线程切换的问题，还没有涉及到和 <code>Retrofit</code> 配合使用，虽然那时候我都不知道 这个 <code>map</code> 是干嘛的，总之觉得这个操作很 NB ，但是单单就上面那些特性，就足以对我产生强大的吸引力。</p><p>就在这一刻，我决定，<code>Lambda</code> 、<code>Stream</code>、函数式编程、<code>RxJava</code> 我也要学，我也要写出上面那样简洁高效的代码。</p><p>这就是我刚看到 <code>RxJava</code> 的情景。</p><p></p><p>到现在 <code>Java8 Lambda Stream</code> 函数式编程这些相关的， 我已经学习了一阵子了，该开始 <code>RxJava</code> 了。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cCjinS0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;font face=&quot;黑体&quot;&gt;


&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://zengfanyu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>一口一口啃完Java中的24种设计模式---桥接模式</title>
    <link href="http://zengfanyu.top/2018/01/04/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zengfanyu.top/2018/01/04/桥接模式/</id>
    <published>2018-01-04T08:27:16.000Z</published>
    <updated>2018-01-06T09:23:45.290Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NSZhu74.png" alt=""><br><a id="more"></a></p><font face="黑体"><h2 id="问题引入-蜡笔与毛笔"><a href="#问题引入-蜡笔与毛笔" class="headerlink" title="问题引入:蜡笔与毛笔"></a>问题引入:蜡笔与毛笔</h2><p>在正式介绍桥接模式之前，先谈谈两种常见文具的区别，它们是毛笔和蜡笔。假如我们需要大中小 3 种型号的画笔，能够绘制 12 种不同的颜色，如果使用蜡笔，需要准备 3×12 = 36 支，但如果使用毛笔的话，只需要提供 3 种型号的毛笔，外加 12 个颜料盒即可，涉及到的对象个数仅为 3 + 12 = 15，远小于36，却能实现与 36 支蜡笔同样的功能。如果增加一种新型号的画笔，并且也需要具有 12 种颜色，对应的蜡笔需增加 12 支，而毛笔只需增加一支。为什么会这样呢？通过分析我们可以得知：<strong>在蜡笔中，颜色和型号两个不同的变化维度（即两个不同的变化原因）融合在一起，无论是对颜色进行扩展还是对型号进行扩展都势必会影响另一个维度；但在毛笔中，颜色和型号实现了分离，增加新的颜色或者型号对另一方都没有任何影响</strong>。如果使用软件工程中的术语，我们可以认为在<strong>蜡笔中颜色和型号之间存在较强的耦合性，而毛笔很好地将二者解耦，使用起来非常灵活，扩展也更为方便</strong>。在软件开发中，我们也提供了一种设计模式来处理与画笔类似的具有多变化维度的情况.</p><h2 id="跨平台图像浏览系统"><a href="#跨平台图像浏览系统" class="headerlink" title="跨平台图像浏览系统"></a>跨平台图像浏览系统</h2><p>开发一个跨平台图像浏览系统，要求该系统能够显示 BMP、JPG、GIF、PNG 等多种格式的文件，并且能够在 Windows、Linux、Unix 等多个操作系统上运行。系统首先将各种格式的文件解析为像素矩阵（Matrix），然后将像素矩阵显示在屏幕上，在不同的操作系统中可以调用不同的绘制函数来绘制像素矩阵。系统需具有较好的扩展性以支持新的文件格式和操作系统。</p><p>某公司的开发人员针对上述要求，提出了一个初始设计方案，其基本结构如图所示：</p><p><img src="https://i.imgur.com/TOvaVPp.png" alt=""></p><p>在图的初始设计方案中，使用了一种多层继承结构，Image 是抽象父类，而每一种类型的图像类，如 BMPImage、JPGImage 等作为其直接子类，不同的图像文件格式具有不同的解析方法，可以得到不同的像素矩阵；由于每一种图像又需要在不同的操作系统中显示，不同的操作系统在屏幕上显示像素矩阵有所差异，因此需要为不同的图像类再提供一组在不同操作系统显示的子类，如为 BMPImage 提供三个子类 BMPWindowsImp、BMPLinuxImp 和 BMPUnixImp，分别用于在 Windows、Linux 和 Unix 三个不同的操作系统下显示图像。</p><p>我们现在对该设计方案进行分析，发现存在如下两个主要问题：</p><p>(1)由于采用了多层继承结构，导致系统中类的个数急剧增加，图中，在各种图像的操作系统实现层提供了12个具体类，加上各级抽象层的类，系统中类的总个数达到了 17 个，在该设计方案中，具体层的类的个数 = 所支持的图像文件格式数×所支持的操作系统数。</p><p>(2)系统扩展麻烦，由于每一个具体类既包含图像文件格式信息，又包含操作系统信息，因此无论是增加新的图像文件格式还是增加新的操作系统，都需要增加大量的具体类，例如在图中增加一种新的图像文件格式 TIF，则需要增加 3 个具体类来实现该格式图像在3种不同操作系统的显示；如果增加一个新的操作系统 Mac OS，为了在该操作系统下能够显示各种类型的图像，需要增加 4 个具体类。这将导致系统变得非常庞大，增加运行和维护开销。</p><p>如何解决这两个问题？我们通过分析可得知，该系统存在两个独立变化的维度：图像文件格式和操作系统，如图所示：</p><p><img src="http://wiki.jikexueyuan.com/project/design-pattern-structurized/images/1334505407_4083.gif" alt="enter image description here"></p><p>在图中，如何将各种不同类型的图像文件解析为像素矩阵与图像文件格式本身相关，而如何在屏幕上显示像素矩阵则仅与操作系统相关。正因为图所示结构将这两种职责集中在一个类中，导致系统扩展麻烦，从类的设计角度分析，具体类 BMPWindowsImp、BMPLinuxImp 和 BMPUnixImp 等违反了“单一职责原则”，因为不止一个引起它们变化的原因，它们将图像文件解析和像素矩阵显示这两种完全不同的职责融合在一起，任意一个职责发生改变都需要修改它们，系统扩展困难。</p><p>如何改进？我们的方案是将图像文件格式（对应图像格式的解析）与操作系统（对应像素矩阵的显示）两个维度分离，使得它们可以独立变化，增加新的图像文件格式或者操作系统时都对另一个维度不造成任何影响。看到这里，大家可能会问，到底如何在软件中实现将两个维度分离呢？这里就可以使用 桥接模式.</p><h2 id="处理多维度变化——桥接模式"><a href="#处理多维度变化——桥接模式" class="headerlink" title="处理多维度变化——桥接模式"></a>处理多维度变化——桥接模式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>桥接模式是一种很实用的结构型设计模式，如果软件系统中某个类存在两个独立变化的维度，通过该模式可以将这两个维度分离出来，使两者可以独立扩展，让系统更加符合“单一职责原则”。与多层继承方案不同，它将两个独立变化的维度设计为两个独立的继承等级结构，并且在抽象层建立一个抽象关联，该关联关系类似一条连接两个独立继承结构的桥，故名桥接模式。</p><p>桥接模式用一种巧妙的方式处理多层继承存在的问题，用抽象关联取代了传统的多层继承，将类之间的静态继承关系转换为动态的对象组合关系，使得系统更加灵活，并易于扩展，同时有效控制了系统中类的个数。桥接定义如下：</p><p>桥接模式（Bridge Pattern）：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体（Handle and Body）模式或接口（Interface）模式。</p><h3 id="角色关系"><a href="#角色关系" class="headerlink" title="角色关系"></a>角色关系</h3><p>桥接模式的结构与其名称一样，存在一条连接两个继承等级结构的桥，桥接模式结构如图所示：</p><p><img src="https://i.imgur.com/mgpQyl4.png" alt=""></p><p>在桥接模式结构图中包含如下几个角色：</p><ul><li><p>Abstraction（抽象类）：用于定义抽象类的接口，它一般是抽象类而不是接口，其中定义了一个 Implementor（实现类接口）类型的对象并可以维护该对象，它与 Implementor 之间具有关联关系，它既可以包含抽象业务方法，也可以包含具体业务方法。</p></li><li><p>RefinedAbstraction（扩充抽象类）：扩充由 Abstraction 定义的接口，通常情况下它不再是抽象类而是具体类，它实现了在 Abstraction 中声明的抽象业务方法，在 RefinedAbstraction 中可以调用在 Implementor 中定义的业务方法。</p></li><li><p>Implementor（实现类接口）：定义实现类的接口，这个接口不一定要与 Abstraction 的接口完全一致，事实上这两个接口可以完全不同，一般而言，Implementor 接口仅提供基本操作，而 Abstraction 定义的接口可能会做更多更复杂的操作。Implementor 接口对这些基本操作进行了声明，而具体实现交给其子类。通过关联关系，在 Abstraction 中不仅拥有自己的方法，还可以调用到 Implementor 中定义的方法，使用关联关系来替代继承关系。</p></li><li><p>ConcreteImplementor（具体实现类）：具体实现 Implementor 接口，在不同的 ConcreteImplementor 中提供基本操作的不同实现，在程序运行时，ConcreteImplementor 对象将替换其父类对象，提供给抽象类具体的业务操作方法。<br>桥接模式是一个非常有用的模式，在桥接模式中体现了很多面向对象设计原则的思想，包括“单一职责原则”、“开闭原则”、“合成复用原则”、“里氏代换原则”、“依赖倒转原则”等。熟悉桥接模式有助于我们深入理解这些设计原则，也有助于我们形成正确的设计思想和培养良好的设计风格。</p></li></ul><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><p>在使用桥接模式时，我们首先应该识别出一个类所具有的两个独立变化的维度，将它们设计为两个独立的继承等级结构，为两个维度都提供抽象层，并建立抽象耦合。通常情况下，我们将具有两个独立变化维度的类的一些普通业务方法和与之关系最密切的维度设计为“抽象类”层次结构（抽象部分），而将另一个维度设计为“实现类”层次结构（实现部分）。例如：对于毛笔而言，由于型号是其固有的维度，因此可以设计一个抽象的毛笔类，在该类中声明并部分实现毛笔的业务方法，而将各种型号的毛笔作为其子类；颜色是毛笔的另一个维度，由于它与毛笔之间存在一种“设置”的关系，因此我们可以提供一个抽象的颜色接口，而将具体的颜色作为实现该接口的子类。在此，型号可认为是毛笔的抽象部分，而颜色是毛笔的实现部分，结构示意图如图所示：</p><p><img src="http://wiki.jikexueyuan.com/project/design-pattern-structurized/images/1334505925_6719.gif" alt="enter image description here"></p><p>在图中，如果需要增加一种新型号的毛笔，只需扩展左侧的“抽象部分”，增加一个新的扩充抽象类；如果需要增加一种新的颜色，只需扩展右侧的“实现部分”，增加一个新的具体实现类。扩展非常方便，无须修改已有代码，且不会导致类的数目增长过快。</p><p>在具体编码实现时，由于在桥接模式中存在两个独立变化的维度，为了使两者之间耦合度降低，首先需要针对两个不同的维度提取抽象类和实现类接口，并建立一个抽象关联关系。对于“实现部分”维度，典型的实现类接口代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Implementor</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationImpl</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在实现 Implementor 接口的子类中实现了在该接口中声明的方法，用于定义与该维度相对应的一些具体方法。<br>对于另一“抽象部分”维度而言，其典型的抽象类代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;  </div><div class="line">    <span class="keyword">protected</span> Implementor impl; <span class="comment">//定义实现类接口对象  </span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImpl</span><span class="params">(Implementor impl)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.impl=impl;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;  <span class="comment">//声明抽象业务方法  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在抽象类 Abstraction 中定义了一个实现类接口类型的成员对象 impl，再通过注入的方式给该对象赋值，一般将该对象的可见性定义为 protected，以便在其子类中访问 Implementor 的方法，其子类一般称为扩充抽象类或细化抽象类（RefinedAbstraction），典型的 RefinedAbstraction 类代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="comment">//业务代码  </span></div><div class="line">        impl.operationImpl();  <span class="comment">//调用实现类的方法  </span></div><div class="line">        <span class="comment">//业务代码  </span></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于客户端而言，可以针对两个维度的抽象层编程，在程序运行时再动态确定两个维度的子类，动态组合对象，将两个独立变化的维度完全解耦，以便能够灵活地扩充任一维度而对另一维度不造成任何影响。</p><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><ol><li>一个类存在两个或者以上的维度独立变化,并且这两个维度都需要扩展.</li><li>不希望使用继承或者因为多层次继承而导致整个系统类个数急剧增加的系统.</li><li>如果一个系统需要在构建的抽象画角色和具体化角色之间增加更多的灵活性,避免在两个层次之间建立静态的继承联系,可以通过桥接模式使它们在抽象层建立一个关联关系.</li><li>任何多维度之间的耦合都可以用桥接模式来解耦.</li></ol><h2 id="桥接模式在跨平台图片浏览系统中的应用"><a href="#桥接模式在跨平台图片浏览系统中的应用" class="headerlink" title="桥接模式在跨平台图片浏览系统中的应用"></a>桥接模式在跨平台图片浏览系统中的应用</h2><p>为了减少所需生成的子类数目，实现将操作系统和图像文件格式两个维度分离，使它们可以独立改变，Sunny 公司开发人员使用桥接模式来重构跨平台图像浏览系统的设计，其基本结构如图所示：</p><p><img src="https://i.imgur.com/8JTkilY.png" alt=""></p><p>代码实现:</p><h3 id="像素矩阵类"><a href="#像素矩阵类" class="headerlink" title="像素矩阵类"></a>像素矩阵类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//像素矩阵类：辅助类，各种格式的文件最终都被转化为像素矩阵，不同的操作系统提供不同的方式显示像素矩阵</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> </span>&#123;</div><div class="line">    <span class="comment">//此处代码省略</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="抽象图像类-其中一个变化维度"><a href="#抽象图像类-其中一个变化维度" class="headerlink" title="抽象图像类(其中一个变化维度)"></a>抽象图像类(其中一个变化维度)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 抽象图像类</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/1/4 14:46</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Image</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> IOperatorSystem os;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOS</span><span class="params">(IOperatorSystem os)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.os = os;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">praseFileIntoImage</span><span class="params">(String filePath)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="扩充图像类"><a href="#扩充图像类" class="headerlink" title="扩充图像类"></a>扩充图像类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * BMP格式图像扩充类</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/1/4 14:57</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMPImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"==BMPImage=="</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">praseFileIntoImage</span><span class="params">(String filePath)</span> </span>&#123;</div><div class="line">        <span class="comment">//模拟创建图像矩阵</span></div><div class="line">        Matrix m = <span class="keyword">new</span> Matrix(filePath);</div><div class="line">        <span class="comment">//调用不同操作系统的展示图像方法去显示图片</span></div><div class="line">        os.showImage(m);</div><div class="line">        System.out.println(<span class="string">"[praseFileIntoImage] "</span> + filePath + <span class="string">",格式为:BMP"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * GIF格式图像扩充类</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/1/4 14:58</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GIFImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"==GIFImage=="</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">praseFileIntoImage</span><span class="params">(String filePath)</span> </span>&#123;</div><div class="line">        <span class="comment">//模拟创建图像矩阵</span></div><div class="line">        Matrix m = <span class="keyword">new</span> Matrix(filePath);</div><div class="line">        <span class="comment">//调用不同操作系统的展示图像方法去显示图片</span></div><div class="line">        os.showImage(m);</div><div class="line">        System.out.println(<span class="string">"[praseFileIntoImage] "</span> + filePath + <span class="string">",格式为:GIF"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * JPG格式图像扩充类</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/1/4 14:56</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPGImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"==JPGImage=="</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">praseFileIntoImage</span><span class="params">(String filePath)</span> </span>&#123;</div><div class="line">        <span class="comment">//模拟创建图像矩阵</span></div><div class="line">        Matrix m = <span class="keyword">new</span> Matrix(filePath);</div><div class="line">        <span class="comment">//调用不同操作系统的展示图像方法去显示图片</span></div><div class="line">        os.showImage(m);</div><div class="line">        System.out.println(<span class="string">"[praseFileIntoImage] "</span> + filePath + <span class="string">"格式为:JPG"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * PNG格式图像扩充类</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/1/4 14:51</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PNGImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"==PNGImage=="</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">praseFileIntoImage</span><span class="params">(String filePath)</span> </span>&#123;</div><div class="line">        <span class="comment">//模拟创建图像矩阵</span></div><div class="line">        Matrix m = <span class="keyword">new</span> Matrix(filePath);</div><div class="line">        <span class="comment">//调用不同操作系统的展示图像方法去显示图片</span></div><div class="line">        os.showImage(m);</div><div class="line">        System.out.println(<span class="string">"[praseFileIntoImage] "</span> + filePath + <span class="string">",格式为:PNG"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="抽象操作系统接口-另外一个变化维度"><a href="#抽象操作系统接口-另外一个变化维度" class="headerlink" title="抽象操作系统接口(另外一个变化维度)"></a>抽象操作系统接口(另外一个变化维度)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/1/4 14:48</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOperatorSystem</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 各个操作系统自带的将像素矩阵显示到屏幕上的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> m 像素矩阵</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showImage</span><span class="params">(Matrix m)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="具体操作系统实现类"><a href="#具体操作系统实现类" class="headerlink" title="具体操作系统实现类"></a>具体操作系统实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Linux 操作系统</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/1/4 15:02</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinuxOS</span> <span class="keyword">implements</span> <span class="title">IOperatorSystem</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"==LinuxOS=="</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showImage</span><span class="params">(Matrix m)</span> </span>&#123;</div><div class="line">        System.out.print(<span class="string">"[showImage] "</span> + <span class="string">"在Linux操作系统中显示像素矩阵 "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Unix 操作系统</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/1/4 15:02</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnixOS</span> <span class="keyword">implements</span> <span class="title">IOperatorSystem</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"==UnixOS=="</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showImage</span><span class="params">(Matrix m)</span> </span>&#123;</div><div class="line">        System.out.print(<span class="string">"[showImage] "</span> + <span class="string">"在Unix操作系统中显示像素矩阵 "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Window操作系统</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: fanyuzeng on 2018/1/4 15:01</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsOS</span> <span class="keyword">implements</span> <span class="title">IOperatorSystem</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"==WindowsOS=="</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showImage</span><span class="params">(Matrix m)</span> </span>&#123;</div><div class="line">        System.out.print(<span class="string">"[showImage] "</span> + <span class="string">"在Windows操作系统中显示像素矩阵 "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        Image image1=<span class="keyword">new</span> JPGImage();</div><div class="line">        image1.setOS(<span class="keyword">new</span> WindowsOS());</div><div class="line">        image1.praseFileIntoImage(<span class="string">"e:/pic/image1"</span>);</div><div class="line">        System.out.println(<span class="string">"==============================="</span>);</div><div class="line"></div><div class="line">        Image image2=<span class="keyword">new</span> GIFImage();</div><div class="line">        image2.setOS(<span class="keyword">new</span> WindowsOS());</div><div class="line">        image2.praseFileIntoImage(<span class="string">"e:/pic/image2"</span>);</div><div class="line">        System.out.println(<span class="string">"==============================="</span>);</div><div class="line"></div><div class="line">        Image image3=<span class="keyword">new</span> BMPImage();</div><div class="line">        image3.setOS(<span class="keyword">new</span> LinuxOS());</div><div class="line">        image3.praseFileIntoImage(<span class="string">"e:/pic/image3"</span>);</div><div class="line">        System.out.println(<span class="string">"==============================="</span>);</div><div class="line"></div><div class="line">        Image image4=<span class="keyword">new</span> PNGImage();</div><div class="line">        image4.setOS(<span class="keyword">new</span> UnixOS());</div><div class="line">        image4.praseFileIntoImage(<span class="string">"e:/pic/image4"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[showImage] 在Windows操作系统中显示像素矩阵 [praseFileIntoImage] e:/pic/image1格式为:JPG</div><div class="line">===============================</div><div class="line">[showImage] 在Windows操作系统中显示像素矩阵 [praseFileIntoImage] e:/pic/image2,格式为:GIF</div><div class="line">===============================</div><div class="line">[showImage] 在Linux操作系统中显示像素矩阵 [praseFileIntoImage] e:/pic/image3,格式为:BMP</div><div class="line">===============================</div><div class="line">[showImage] 在Unix操作系统中显示像素矩阵 [praseFileIntoImage] e:/pic/image4,格式为:PNG</div></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>假设此时又需要支持一个 tiff 格式的图片,并且还要支持 MacOS,在这种模式下只需要继续在 Image 和 IOperatorSystem 下继续扩展和实现即可,大大提升了系统的可扩展性,降低了耦合性</p><h2 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h2><p><a href="https://github.com/zengfanyu/23DesignPatterns" target="_blank" rel="external">https://github.com/zengfanyu/23DesignPatterns</a></p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NSZhu74.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Design Patterns" scheme="http://zengfanyu.top/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://zengfanyu.top/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Android中的Window、WindowManager以及悬浮框视频播放的实现</title>
    <link href="http://zengfanyu.top/2018/01/02/FloatWindow/"/>
    <id>http://zengfanyu.top/2018/01/02/FloatWindow/</id>
    <published>2018-01-02T13:27:15.000Z</published>
    <updated>2018-01-06T04:15:32.416Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/LmSCVR5.jpg" alt=""></p><p><em>摘要:近日看公司直播项目,其中有一个功能就是退出某房间之后,直播界面会以悬浮窗的形式出现,并且可以拖动悬浮窗到界面中任意位置,点击悬浮框之后,又可以回到房间中继续观看直播。现在这个功能在主流的直播或者视频类软件中都可以看到，比如：某鱼、某猫、某珠、某牙、某tube。当然了，某tobe当中的悬浮窗效果更佳炫酷，可以炫酷地从悬浮框中将视频主界面慢慢拖动出来，具体效果下载某tube就能看到。这篇文章就记录一下传统悬浮窗播放视频的原理，以及悬浮框涉及到的 Window 和  WindowManager 的相关知识。</em></p><a id="more"></a><font face="黑体"><h2 id="Window-和-WindowManager-概述"><a href="#Window-和-WindowManager-概述" class="headerlink" title="Window 和 WindowManager 概述"></a>Window 和 WindowManager 概述</h2><p><code>Window</code> 表示一个窗口的概念，在日常开发中直接接触到 <code>Window</code> 的机会并不多，但是在某些特殊的时候，我们需要在桌面上显示一个类似悬浮框的东西（360的小火箭、360手机助手最新版当中桌面上显示的枫叶），那么这种效果就需要用 <code>Window</code> 来实现。<code>Window</code> 是一个抽象类，它的具体实现类是 <code>PhoneWindow</code>，创建一个 <code>Window</code> 跟简单，只需通过 <code>WindowManager</code> 即可完成。<br><code>WindowManager</code> 是完结访问 <code>Window</code> 的入口，<code>Window</code> 的具体实现位于 <code>WindowManagerService</code> 中<code>，</code>WindowManager 和 <code>Window</code> 打交道是一个 <code>IPC</code> 过程。<br><code>Android</code> 中的<strong>所有</strong>视图都是通过 <code>Window</code> 来呈现的，不管是 <code>Activity</code> 、 <code>Dialog</code> 还是 <code>Toast</code>，他们的实际视图都是附加在 <code>Window</code> 上的，因此，<strong>Window 实际是 View 的直接管理者</strong>。比如说，在事件分发的过程中，点击事件首先是由 <code>Window</code> 传递给 <code>DecorView</code>，然后再由 <code>DecorView</code> 往子 <code>View</code> 分发，最终分发到能够消耗这个点击事件的 <code>View</code> 当中；并且 <code>Activity</code> 生命周期方法 <code>onCreate</code> 中经常调用的 <code>setContentView</code> 方法底层也是通过 <code>Window</code> 来完成的。</p><h2 id="创建一个-Window"><a href="#创建一个-Window" class="headerlink" title="创建一个 Window"></a>创建一个 Window</h2><p>上面概述中提到，要想创建一个 <code>Window</code> ，只需通过 <code>WindowManager</code> 即可实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWindow</span><span class="params">()</span></span>&#123;</div><div class="line">        Button button = <span class="keyword">new</span> Button(getApplicationContext());</div><div class="line">        button.setText(<span class="string">"动态添加"</span>);</div><div class="line">        WindowManager.LayoutParams layoutParams = <span class="keyword">new</span> WindowManager.LayoutParams(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT, <span class="number">0</span>, <span class="number">0</span>, PixelFormat.TRANSPARENT);</div><div class="line">        layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL</div><div class="line">                | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</div><div class="line">                | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;</div><div class="line">        layoutParams.gravity = Gravity.LEFT | Gravity.TOP;</div><div class="line">        layoutParams.x= <span class="number">600</span>;</div><div class="line">        layoutParams.y= <span class="number">600</span>;</div><div class="line">        getWindowManager().addView(button, layoutParams);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>上面的代码就将一个 <code>Button</code> 添加到屏幕上 <code>（600,600）</code> 的位置，对 <code>WindowMnager.Layoutparams</code> 常用参数做说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LayoutParams</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> xpos, <span class="keyword">int</span> ypos, <span class="keyword">int</span> _type,<span class="keyword">int</span> _flags, <span class="keyword">int</span> _format)</span> </span>&#123;</div></pre></td></tr></table></figure><ul><li><p><code>w ,h</code> 表示 <code>Window</code> 的宽高，可以通过构造方法传入，也可以在创建好 <code>WindowManager.Layoutparams</code> 之后，直接给其 <code>width</code> ，<code>height</code> 成员变量赋值。</p><p></p></li><li><p><code>xpos，ypos</code> 表示 <code>Window</code> 在手机屏幕上的绝对位置，与 <code>w，h</code> 一样，这两个值也可以在实例化 <code>WindowManager.Layoutparams</code> 之后给 <code>x，y</code> 成员变量属性赋值，要向更改悬浮窗的位置，就是改变的这两个参数</p><p></p></li><li><p><code>_type</code> 表示的是 <code>Window</code> 的类型，<code>Window</code> 有三种类型：</p><p></p><ol><li>应用 <code>Window</code> ，这个 <code>Window</code> 对应着一个 <code>Activity</code>，层级范围（1~99）</li><li>子 <code>Window</code> ， 不能单独存在，它需要附属在一个特定的父 <code>Window</code> 中，比如说 <code>Dialog</code> ，层级范围（1000~1999）</li><li>系统 <code>Window</code> ，这是需要申明权限才能够创建的 <code>Window</code>， 比如说常用的 Toast ,层级范围（2000~2999）。</li></ol></li></ul><p><code>TYPE_SYSTEM_OVERLAY（2006），TYPE_TOAST（2005），TYPE_PHONE（2002）</code></p><p></p><ul><li><p><code>Flags</code> 参数表示 <code>Window</code> 的属性，它可以有很多选项，通过这些选项可以控制 <code>Window</code> 的显示特性，比较常用的有：</p><p><br>  <strong>1. FLAG_NOT_FOCUSABLE</strong><br>  表示 <code>Window</code> 不需要获取焦点，也不需要接收各种输入事件，此标记会同时启用 <code>FLAG_NOT_TOUCH_MODE</code>，事件会直接传递给下层的具有焦点的 <code>Window</code>。</p><p>  <strong>2. FLAG_NOT_TOUCH_MODE</strong><br>  此模式下,系统会将当前 <code>Window</code> 区域以外的点击事件传递给底层的 <code>Window</code> ，当前 <code>Window</code> 区域以内的会自己处理，一般来说这个标记都需要开启，不然其他的 <code>Window</code> 接收不到单击事件。</p><p>  <strong>3. FLAG_SHOW_WHEN_LOCKED</strong><br>  让 <code>Window</code> 显示在锁屏界面上。</p></li></ul><p><code>WindowManager</code> 常用的方法就三个：添加 <code>View</code>，删除 <code>View</code>，更新 <code>View</code> 。这三个方法定义在 <code>ViewManager</code> 中，<code>WindowManager</code> 继承了 <code>ViewManager</code>。想做悬浮窗播放视频，就需要用到这三个方法，其中悬浮框随手指拖拽而移动就是在 <code>onTouchEvent</code> 回调中调用 <code>updateView</code> 的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewManager</span></span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span></span>;</div><div class="line"> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateViewLayout</span><span class="params">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span></span>;</div><div class="line"> </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeView</span><span class="params">(View view)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="悬浮框实现要点"><a href="#悬浮框实现要点" class="headerlink" title="悬浮框实现要点"></a>悬浮框实现要点</h2><ol><li><code>WindowManager</code> 和 <code>Window</code> 相关，用于展示悬浮框。</li><li>要实现悬浮框，那么就会涉及到权限问题，从 <code>Andtoid 6.0</code> 开始，需要在运行时去获取悬浮窗的权限。</li><li>启动悬浮窗的组件（<code>Activity</code> 或者 <code>Fragment or else</code>）在启动了悬浮窗之后，自己本身肯定是要关闭的，所以这里悬浮框就很适合在 <code>Service</code> 中管理。</li><li>悬浮窗一般是可以与用户交互的，那么这里就会涉及到触摸反馈。</li></ol><h3 id="后续代码前提"><a href="#后续代码前提" class="headerlink" title="后续代码前提"></a>后续代码前提</h3><ul><li>播放器播放需要一个 <code>m3u8</code> url,公司自研播放器代码不贴出。</li><li>当前 <code>WatchVideoActivity</code> 正在全屏播放，此时点击了“悬浮窗播放”按钮。 </li><li>这里的悬浮窗播放指的是点播,非直播情况</li></ul><h3 id="清单文件中的权限"><a href="#清单文件中的权限" class="headerlink" title="清单文件中的权限"></a>清单文件中的权限</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SYSTEM_ALERT_WINDOW"</span> /&gt;</span></div></pre></td></tr></table></figure><h3 id="检查权限并启动Service"><a href="#检查权限并启动Service" class="headerlink" title="检查权限并启动Service"></a>检查权限并启动Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//悬浮窗播放按钮</span></div><div class="line">      <span class="keyword">final</span> Button button_litter_player = (Button) findViewById(R.id.button_litter_player);</div><div class="line">      button_litter_player.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"><span class="comment">//此处为检查用户是否已经授权我们的应用悬浮窗权限</span></div><div class="line">              <span class="keyword">boolean</span> check = ConstInfo.hasPermissionFloatWin(getApplicationContext());</div><div class="line">              <span class="keyword">if</span> (!check) &#123;</div><div class="line">                  Toast.makeText(getApplication(), <span class="string">"悬浮窗权限未打开，请去打开应用悬浮窗权限"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="comment">//FloatWindowService 就是用于管理悬浮窗的 Service</span></div><div class="line">                  Intent intent = <span class="keyword">new</span> Intent(WatchVideoActivity.<span class="keyword">this</span>, FloatWindowService.class);</div><div class="line">                  Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">                  <span class="comment">//当前播放视频的m3u8地址</span></div><div class="line">                  bundle.putString(<span class="string">"m3u8Url"</span>, getCurrentUrl());                              </div><div class="line">                 <span class="comment">//主要是记录当前播放的位置,这样在悬浮窗出现后,可以接着之前全屏播放的点继续播放</span></div><div class="line">                  bundle.putInt(EXTRA_VIDEO_CURRENT_POSITION, mVideoView.getCurrentPosition());</div><div class="line">                  finish();</div><div class="line">              &#125;</div><div class="line"></div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure><p>其中检查权限的方法是发射调用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 判断是否开启浮窗权限,api未公开，使用反射调用</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasPermissionFloatWin</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line"></div><div class="line">    Log.d(ConstInfo.TAG, <span class="string">"hasAuthorFloatWin android.os.Build.VERSION.SDK_INT="</span>+android.os.Build.VERSION.SDK_INT);</div><div class="line">    <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &lt; <span class="number">19</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        AppOpsManager appOps = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);</div><div class="line">        Class c = appOps.getClass();</div><div class="line">        Class[] cArg = <span class="keyword">new</span> Class[<span class="number">3</span>];</div><div class="line">        cArg[<span class="number">0</span>] = <span class="keyword">int</span>.class;</div><div class="line">        cArg[<span class="number">1</span>] = <span class="keyword">int</span>.class;</div><div class="line">        cArg[<span class="number">2</span>] = String.class;</div><div class="line">        Method lMethod = c.getDeclaredMethod(<span class="string">"checkOp"</span>, cArg);</div><div class="line">        <span class="comment">//24是浮窗权限的标记</span></div><div class="line">        <span class="keyword">return</span> (AppOpsManager.MODE_ALLOWED == (Integer) lMethod.invoke(appOps, <span class="number">24</span>, Binder.getCallingUid(), context.getPackageName()));</div><div class="line"></div><div class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="FloatWindowService"><a href="#FloatWindowService" class="headerlink" title="FloatWindowService"></a>FloatWindowService</h3><blockquote><p>Service 详情戳 <a href="https://developer.android.com/guide/components/services.html?hl=zh-cn" target="_blank" rel="external">Android Developer # Service Guide</a></p></blockquote><ol><li><code>Service</code> 的 <code>onCreate</code> 方法只会在 <code>Service</code> 首次创建的时候调用一次,所以在这个方法中创建悬浮框的实例比较适合,因为只支持一个悬浮窗</li><li><code>onStartCommond</code> 方法在每次调用 <code>startService</code> 方法时都会调用,所以在这个方法中适合检查悬浮窗的状态,比如:是否需要退出悬浮窗,还是直接开始在悬浮窗中继续播放等等.</li><li><code>onDestroy</code> 方法中就直接销毁悬浮窗实例即可.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatWindowService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"==FloatWindowService=="</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_PLAY = <span class="string">"com.xxxx.testxxxsdk.FloatWindowService.ACTION_PLAY"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_EXIT = <span class="string">"com.xxxx.testxxxsdk.FloatWindowService.ACTION_EXIT"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PLAY_TYPE = <span class="string">"com.xxxx.testxxxsdk.FloatWindowService.PLAY_TYPE"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_VIDEO_LIST = <span class="string">"list"</span>;</div><div class="line"><span class="comment">//用于标记当前悬浮窗时候已经显示</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> mIsFloatWindowShown = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">//悬浮窗实例</span></div><div class="line">    <span class="keyword">private</span> FloatWindow mFloatWindow;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        LogUtil.d(TAG,<span class="string">"[onCreate] "</span> + <span class="string">"FloatWindowService onCreate"</span>);</div><div class="line">        <span class="comment">//这里将Service本身传入悬浮窗,是为了实现点击悬浮窗重新进入WatchVideoActivity 全屏播放,且提供 Context,</span></div><div class="line">        mFloatWindow = <span class="keyword">new</span> FloatWindow(<span class="keyword">this</span>);</div><div class="line">        mFloatWindow.createFloatView();</div><div class="line">        mIsFloatWindowShown = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        LogUtil.d(TAG, <span class="string">"[onStartCommand] "</span> + <span class="string">"FloatWindowService onStart"</span>);</div><div class="line">        <span class="comment">//此处为特殊逻辑处理,和项目需求相关,不做解释</span></div><div class="line">        <span class="keyword">if</span> (intent.hasExtra(ACTION_EXIT)) &#123;</div><div class="line">            stopSelf();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//在这里就拿到之前点击悬浮窗按钮时传递过来的数据,包括播放m3u8地址和当前播放位置等</span></div><div class="line">            Bundle bundle = intent.getBundleExtra(ACTION_PLAY);</div><div class="line">            <span class="keyword">if</span> (bundle != <span class="keyword">null</span> &amp;&amp; mFloatWindow != <span class="keyword">null</span>) &#123;</div><div class="line">                LogUtil.d(TAG,<span class="string">"[onStartCommand] "</span> + <span class="string">"FloatWindowService onStart play bundle"</span>);</div><div class="line">                <span class="comment">//将bundle数据交给悬浮窗控件本身去处理</span></div><div class="line">                mFloatWindow.play(bundle);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> START_STICKY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        LogUtil.d(TAG,<span class="string">"[onDestroy] "</span> +<span class="string">"FloatWindowService onDestroy"</span> );</div><div class="line">        <span class="keyword">if</span> (mFloatWindow != <span class="keyword">null</span>) &#123;</div><div class="line">            mFloatWindow.destroy();</div><div class="line">        &#125;</div><div class="line">        mIsFloatWindowShown = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述代码可以看到,<strong>Service 在这里就是管理了悬浮窗的生命周期,以及传递数据的作用</strong>.</p><h3 id="FloatWindow"><a href="#FloatWindow" class="headerlink" title="FloatWindow"></a>FloatWindow</h3><p>这是<strong>悬浮窗的实现类</strong>,之前的代码在”悬浮播放”这一功能来说,都是铺垫. 参照文章前面对 <code>WindowManager</code> 的描述,这里肯定也会涉及到悬浮窗参数和悬浮窗布局,以及悬浮窗的交互.</p><p>首先是布局,这列悬浮窗比较简单 <code>top_window_player</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">android:id</span>=<span class="string">"@+id/root_view"</span></span></div><div class="line"><span class="tag">                <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"@drawable/top_window_player_bg"</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">"10dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/logo"</span></span></div><div class="line"><span class="tag">        /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/progressbar_loading"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:indeterminateDrawable</span>=<span class="string">"@anim/loading_anim"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">"gone"</span></span></div><div class="line"><span class="tag">        /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.xxxxxx.xxxsdk.XXXVideoView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/live_player_videoview"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">"gone"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageButton</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/lsq_closeButton"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"20dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"20dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/close_small"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:paddingRight</span>=<span class="string">"5dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:paddingTop</span>=<span class="string">"5dp"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure><p> <code>ImageView</code> 是用于展示默认状态图,<code>ImageButton</code> 为右上角叉叉,<code>XXXVideoView</code> 为自研的播放器,这里就不贴出代码了.</p><p>构造方法</p><ul><li>这里将 <code>Service</code> 本身传入悬浮窗,是为了实现点击悬浮窗重新进入 <code>WatchVideoActivity</code>  全屏播放,</li><li>提供 <code>Context</code></li><li>绑定两者生命周期,即悬浮窗销毁时,服务就要停止</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FloatWindow</span><span class="params">(Service hostService)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    mHostService = hostService;</div><div class="line">    mAppContext = mHostService.getApplication();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> <code>createFloatView()</code> 真正创建 <code>Window</code> 的方法</p><p>这个方法中做 3 件事 : </p><ul><li>使用 <code>WindowManager</code> 创建 <code>Window</code> </li><li>布局控件初始化</li><li>触摸反馈</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createFloatView</span><span class="params">()</span> </span>&#123;</div><div class="line">      wmParams = <span class="keyword">new</span> WindowManager.LayoutParams();</div><div class="line">      mWindowManager = (WindowManager) mAppContext.getSystemService(mAppContext.WINDOW_SERVICE);</div><div class="line">      <span class="comment">//即使应用退出,悬浮窗也可以可以再桌面当中显示</span></div><div class="line">      wmParams.type = WindowManager.LayoutParams.TYPE_PHONE;</div><div class="line">      wmParams.format = PixelFormat.RGBA_8888;</div><div class="line">      <span class="comment">//悬浮窗需要自己处理点击事件</span></div><div class="line">      wmParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;</div><div class="line">      <span class="comment">//初始位置在屏幕左边的中间</span></div><div class="line">      wmParams.gravity = Gravity.LEFT | Gravity.CENTER_VERTICAL;</div><div class="line"><span class="comment">// 悬浮窗的宽为手机屏幕宽度的三分之一, 4:3 高宽比</span></div><div class="line">      wmParams.width = TestApplication.SCREEN_WIDTH / <span class="number">3</span>;</div><div class="line">      wmParams.height = (wmParams.width / <span class="number">3</span>) * <span class="number">4</span>;    </div><div class="line"><span class="comment">//Service中的Context</span></div><div class="line">      LayoutInflater inflater = LayoutInflater.from(mAppContext);</div><div class="line">      mFloatLayout = (RelativeLayout) inflater.inflate(R.layout.top_window_player, <span class="keyword">null</span>);</div><div class="line">      mWindowManager.addView(mFloatLayout, wmParams);</div><div class="line">      </div><div class="line">      progressbar_loading = (ProgressBar) mFloatLayout.findViewById(R.id.progressbar_loading);</div><div class="line">      ImageButton closebutton = (ImageButton) mFloatLayout.findViewById(R.id.lsq_closeButton);</div><div class="line">      closebutton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">              mHostService.stopSelf();</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">// 设置悬浮窗的Touch监听</span></div><div class="line">      mFloatLayout.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</div><div class="line">          <span class="keyword">int</span> lastX, lastY;</div><div class="line">          <span class="keyword">int</span> paramX, paramY;</div><div class="line">          </div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">              <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                <span class="comment">//手指按下的位置</span></div><div class="line">                      lastX = (<span class="keyword">int</span>) event.getRawX();</div><div class="line">                      lastY = (<span class="keyword">int</span>) event.getRawY();</div><div class="line">                      <span class="comment">//记录手指按下时,悬浮窗的位置</span></div><div class="line">                      paramX = wmParams.x;</div><div class="line">                      paramY = wmParams.y;</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                      <span class="keyword">int</span> dx = (<span class="keyword">int</span>) event.getRawX() - lastX;</div><div class="line">                      <span class="keyword">int</span> dy = (<span class="keyword">int</span>) event.getRawY() - lastY;</div><div class="line">                      wmParams.x = paramX + dx;</div><div class="line">                      wmParams.y = paramY + dy;</div><div class="line">                      <span class="comment">// 更新悬浮窗位置</span></div><div class="line">                      mWindowManager.updateViewLayout(mFloatLayout, wmParams);</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                  <span class="comment">//当手指按下的位置和手指抬起来的位置距离小于5像素时,将此次触摸归结为点击事件,</span></div><div class="line">                      <span class="keyword">if</span> (Math.abs(event.getRawX() - lastX) &lt; <span class="number">5</span> &amp;&amp; Math.abs(event.getRawY() - lastY) &lt; <span class="number">5</span>)</div><div class="line">                          mFloatLayout.callOnClick();</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line">      </div><div class="line"><span class="comment">//设置悬浮窗的点击监听</span></div><div class="line">      mFloatLayout.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;                </div><div class="line"><span class="comment">//点击悬浮窗重新跳转回 WatchVideoActivity 全屏播放</span></div><div class="line">                  Intent intent = <span class="keyword">new</span> Intent(mHostService.getApplicationContext(), WatchVideoActivity.class);</div><div class="line"><span class="comment">//同理播放器在WatchVideoActivity 中全屏播放也是需要播放地址和 悬浮窗已经播放到的无照顾</span></div><div class="line">                  intent.putExtra(<span class="string">"m3u8Url"</span>, mUrl);                 </div><div class="line">                  intent.putExtra(EXTRA_VIDEO_CURRENT_POSITION, mVideoView.getCurrentPosition());</div><div class="line">                <span class="comment">//Service 中启动 Activity</span></div><div class="line">                  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">                  mHostService.startActivity(intent);</div><div class="line">                  <span class="comment">//销毁服务</span></div><div class="line">                  mHostService.stopSelf();</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      mVideoView = (XXXVideoView) mFloatLayout.findViewById(R.id.live_player_videoview);</div><div class="line">      <span class="comment">//初始化播放器</span></div><div class="line">      mVideoView.initialize();</div><div class="line">      <span class="comment">//监听播放器 播放器相关不贴出代码</span></div><div class="line">      mVideoView.setListener(mVideoListener);</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>开始播放的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(Bundle param)</span> </span>&#123;</div><div class="line">    mBundleParam = param;</div><div class="line">    <span class="keyword">if</span> (mBundleParam == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">        </div><div class="line">    <span class="comment">//拿到从 WatchVideoActivity 中传递过来的 播放地址</span></div><div class="line">    mUrl = mBundleParam.getString(<span class="string">"m3u8Url"</span>);</div><div class="line">    <span class="comment">//拿到从 WatchVideoActivity 中传递过来的当前播放位置,以便继续播放</span></div><div class="line">    mCurrPositionFromWatchVod = mBundleParam.getInt(WatchVideoActivity.EXTRA_VIDEO_CURRENT_POSITION, -<span class="number">1</span>);</div><div class="line">    <span class="comment">//播放器相关,省略部分代码</span></div><div class="line">    stop_play();</div><div class="line">    start_play();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://i.imgur.com/dVuUslE.gif" alt=""></p><h2 id="相关知识点学习资料"><a href="#相关知识点学习资料" class="headerlink" title="相关知识点学习资料"></a>相关知识点学习资料</h2><ol><li><a href="https://www.liaohuqiu.net/cn/posts/android-windows-manager/" target="_blank" rel="external">Android 悬浮窗参数权限的小结</a>,这篇文章写得时间较早,其中有点内容在我测试机 红米Note 4X 当中并没有办法验证,索性,还是需要向用户申请悬浮窗权限.</li><li><a href="https://developer.android.com/guide/components/services.html?hl=zh-cn" target="_blank" rel="external">Service 官方文档</a> </li><li><a href="https://developer.android.com/training/permissions/requesting.html?hl=zh-cn" target="_blank" rel="external">运行时权限官方文档</a> ,  <a href="http://blog.csdn.net/lmj623565791/article/details/50709663" target="_blank" rel="external">鸿洋大神—— Android 6.0 运行时权限处理完全解析</a></li><li><a href="http://blog.csdn.net/yhaolpz/article/details/68936932" target="_blank" rel="external"> Android 带你彻底理解 Window 和 WindowManager</a> ,  <a href="http://szysky.com/2016/08/15/%E3%80%8AAndroid-%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B-08-%E7%90%86%E8%A7%A3Window%E5%92%8CWindowManager/" target="_blank" rel="external">《Android 开发艺术探索》 08-理解Window和WindowManager<br>抄书系列</a></li></ol></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LmSCVR5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要:近日看公司直播项目,其中有一个功能就是退出某房间之后,直播界面会以悬浮窗的形式出现,并且可以拖动悬浮窗到界面中任意位置,点击悬浮框之后,又可以回到房间中继续观看直播。现在这个功能在主流的直播或者视频类软件中都可以看到，比如：某鱼、某猫、某珠、某牙、某tube。当然了，某tobe当中的悬浮窗效果更佳炫酷，可以炫酷地从悬浮框中将视频主界面慢慢拖动出来，具体效果下载某tube就能看到。这篇文章就记录一下传统悬浮窗播放视频的原理，以及悬浮框涉及到的 Window 和  WindowManager 的相关知识。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android---View的工作流程</title>
    <link href="http://zengfanyu.top/2017/11/25/View%20work%20process/"/>
    <id>http://zengfanyu.top/2017/11/25/View work process/</id>
    <published>2017-11-24T16:37:15.000Z</published>
    <updated>2017-11-25T05:35:12.790Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1511596823582&amp;di=8f750b93754500efca5af505cb251355&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.hack50.com%2Farticle%2FUploadPic%2F2015-10%2F2015101020525216441.jpg" alt=""></p><p><em>摘要：一直关注 Hencoder 的教程，前阵子刚好出了一期 View 的工作流程系列，然后结合《Android开发艺术探索》相关章节，做一下笔记。</em><br><a id="more"></a></p><font face="黑体"><h1 id="MeasureSpec"><a href="#MeasureSpec" class="headerlink" title="MeasureSpec"></a>MeasureSpec</h1><p>在很大程度上，MeasureSpec 决定了一个 View 的尺寸，作所以说“很大程度上”，是因为这个过程还会受到父容器的影响，因为父容器会硬性 View 的 MeasureSpec 的创建过程。在测量过程中，系统会将 View 的 LayoutParams 根据父容器施加的规则转换成 MeasureSpec，然后再根据这个 MeasureSpec 来测量出 View 的宽高。</p><p>MeasureSpec 是一个 32 位的 int 值，高 2 位代表SpecMode，低30位代表SpecSize。</p><ul><li>SpecMode：测量模式</li><li>SpecSize：在某一测量模式下的规格大小<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MeasureSpec</span> </span>&#123;</div><div class="line">  ...</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeMeasureSpec</span><span class="params">(<span class="keyword">int</span> size,<span class="keyword">int</span> mode)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sUseBrokenMakeMeasureSpec) &#123;</div><div class="line">        <span class="keyword">return</span> size + mode;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">          <span class="comment">//noinspection ResourceType</span></div><div class="line">          <span class="keyword">return</span> (measureSpec &amp; MODE_MASK);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> (measureSpec &amp; ~MODE_MASK);</div><div class="line">      &#125;</div><div class="line"> &#125;</div><div class="line"> ...</div></pre></td></tr></table></figure></li></ul><p>MeasureSpec 通过将 SpecMode 和 SpecSize 打包成一个 int 值来避免过多的对象内存，为了方便操作，其提供了打包和解包的方法。</p><p>SpecMode有三类，</p><p><strong>UNSPECIFIED</strong></p><p>父容器不对 View 有任何显示，要多大给多大，这种模式一般是用于系统内部绘制。</p><p><strong>EXACTLY</strong></p><p>对应于 LayoutParams 的 match_content 和具体数值两种情况。表示父容器已经检测出 View 所需要的精确大小，这个大小由 SpecSize 给出。</p><p><strong>AT_MOST</strong></p><p>对用于 LayoutParams 中的 wrap_content 模式。表示父容器制定了一个可用大小，即 SpecSize，View的大小不能大于这个值，具体是多少要看不同View的具体实现。</p><h1 id="MeasureSpec-和-LayoutParams-的对应关系"><a href="#MeasureSpec-和-LayoutParams-的对应关系" class="headerlink" title="MeasureSpec 和 LayoutParams 的对应关系"></a>MeasureSpec 和 LayoutParams 的对应关系</h1><p>在View 测量的时候，系统会将 View 的 LayoutParams 参数在父容器的约束之下转换成MeasureSpec，然后根据这个 MeasureSpec 来决定 View 测量后的宽高。什么叫做父容器的约束呢？也就父容器的 MeasureSpec，所以对于普通 View 来说，其 MeasureSpec 就是由父容器的MeasureSpec 和其自身的 LayoutParams 共同决定的。</p><p>上面说的是一个总结，这个总结，体现在ViewGroup的getChildMeasureSpec()方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> spec The requirements for this view</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> padding The padding of this view for the current dimension and</span></div><div class="line"><span class="comment">   *        margins, if applicable</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> childDimension How big the child wants to be in the current</span></div><div class="line"><span class="comment">   *        dimension</span></div><div class="line"><span class="comment">   * <span class="doctag">@return</span> a MeasureSpec integer for the child</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> padding, <span class="keyword">int</span> childDimension)</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);</div><div class="line">      <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</div><div class="line"></div><div class="line">      <span class="keyword">int</span> size = Math.max(<span class="number">0</span>, specSize - padding);</div><div class="line"></div><div class="line">      <span class="keyword">int</span> resultSize = <span class="number">0</span>;</div><div class="line">      <span class="keyword">int</span> resultMode = <span class="number">0</span>;</div><div class="line"></div><div class="line">      <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">      <span class="comment">// Parent has imposed an exact size on us</span></div><div class="line">      <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">          <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</div><div class="line">              resultSize = childDimension;</div><div class="line">              resultMode = MeasureSpec.EXACTLY;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">              <span class="comment">// Child wants to be our size. So be it.</span></div><div class="line">              resultSize = size;</div><div class="line">              resultMode = MeasureSpec.EXACTLY;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class="line">              <span class="comment">// Child wants to determine its own size. It can't be</span></div><div class="line">              <span class="comment">// bigger than us.</span></div><div class="line">              resultSize = size;</div><div class="line">              resultMode = MeasureSpec.AT_MOST;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line">      <span class="comment">// Parent has imposed a maximum size on us</span></div><div class="line">      <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">          <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</div><div class="line">              <span class="comment">// Child wants a specific size... so be it</span></div><div class="line">              resultSize = childDimension;</div><div class="line">              resultMode = MeasureSpec.EXACTLY;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">              <span class="comment">// Child wants to be our size, but our size is not fixed.</span></div><div class="line">              <span class="comment">// Constrain child to not be bigger than us.</span></div><div class="line">              resultSize = size;</div><div class="line">              resultMode = MeasureSpec.AT_MOST;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class="line">              <span class="comment">// Child wants to determine its own size. It can't be</span></div><div class="line">              <span class="comment">// bigger than us.</span></div><div class="line">              resultSize = size;</div><div class="line">              resultMode = MeasureSpec.AT_MOST;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line">      <span class="comment">// Parent asked to see how big we want to be</span></div><div class="line">      <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">          <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</div><div class="line">              <span class="comment">// Child wants a specific size... let him have it</span></div><div class="line">              resultSize = childDimension;</div><div class="line">              resultMode = MeasureSpec.EXACTLY;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">              <span class="comment">// Child wants to be our size... find out how big it should</span></div><div class="line">              <span class="comment">// be</span></div><div class="line">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</div><div class="line">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class="line">              <span class="comment">// Child wants to determine its own size.... find out how</span></div><div class="line">              <span class="comment">// big it should be</span></div><div class="line">              resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</div><div class="line">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//noinspection ResourceType</span></div><div class="line">      <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>这个方法看上去这么长，其实总结起来就是上面那句话：View 的 LayoutParams 参数在父容器的约束之下转换成 MeasureSpec。</p><p>这个方法是在 measureChildWithMargins() 方法中会调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildWithMargins</span><span class="params">(View child,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> parentWidthMeasureSpec, <span class="keyword">int</span> widthUsed,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> parentHeightMeasureSpec, <span class="keyword">int</span> heightUsed)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class="line">            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</div><div class="line">                    + widthUsed, lp.width);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class="line">            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</div><div class="line">                    + heightUsed, lp.height);</div><div class="line"></div><div class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在第 7 行可以看到，调用了 getChildMeasureSpec 方法，这个方法传入的第一个参数是parentWidthMeasureSpec，第三个参数是lp.width，这就充分说明上面的总结：一个 View 的MeasureSpec和其本身的LayoutParams和父容器的 MeasureSpec 相关。</li><li>最后一行，是拿到 View 的 MeasureSpecHeight 和 MeasureSpecWidth 值，去调用View的measure 方法，View 的 measure 方法放在下一节。</li></ul><p>这么说起来，还是有点模糊，总结如下（也就是 getChildMeasureSpec 方法的表格呈现形式）：</p><p>其中 parentSize 指的是父容器中当前可用的大小</p><p><img src="https://i.imgur.com/wxbnh5r.png" alt="image"></p><p>按子View的LayoutParams总结如下：</p><ul><li><strong>当View采用固定宽高的时候</strong>，无论父容器的SpecMode是什么，View的SpecMode都是EXACTLY，SpecSize遵循LayoutParams中的大小。</li><li><strong>当View采用match_parent时</strong>，如果父容器的SpecMode是EXACTLY，那么View的SpecMode也是EXACTLY，SpecSize是父容器的剩余空间；如果父容器的SpecMode是AT_MOST，那么View的SpecMode也是AT_MOST，并且SpecMode不会超过父容器的剩余空间。</li><li><strong>当View采用wrap_content时</strong>，无论父容器的SpecMode是什么，View的SpecMode都是AT_MOST，SpecSize不得超过父容器的剩余空间。</li></ul><h1 id="View的工作流程"><a href="#View的工作流程" class="headerlink" title="View的工作流程"></a>View的工作流程</h1><p>View的工作流程主要包括measure、layout、draw三个，即测量布局和绘制，其中measure确定View的测量宽高，layout确定View的最终宽高和四个顶点的位置，而draw将View绘制到屏幕上。    </p><h2 id="measure过程"><a href="#measure过程" class="headerlink" title="measure过程"></a>measure过程</h2><p>measure() 方法被父 View 调用，在 measure() 中做一些准备和优化工作后，调用  onMeasure() 来进行实际的自我测量。 onMeasure() 做的事，View 和 ViewGroup 不一样：</p><ul><li>View：View 在 onMeasure() 中会计算出自己的尺寸然后保存；</li><li>ViewGroup：ViewGroup 在 onMeasure() 中会调用所有子 View 的 measure() 让它们进行自我测量，并根据子 View 计算出的期望尺寸来计算出它们的实际尺寸和位置（实际上 99.99% 的父 View 都会使用子 View 给出的期望尺寸来作为实际尺寸）然后保存。同时，它也会根据子 View 的尺寸和位置来计算出自己的尺寸然后保存；</li></ul><p>那么久针对 View 和 ViewGroup 这两种情况分析了。</p><h3 id="View-的-measure-过程"><a href="#View-的-measure-过程" class="headerlink" title="View 的 measure 过程"></a>View 的 measure 过程</h3><p>View 的 measure 过程是由其 measure 方法完成的，在这个方法中又会去调用 onMeasure 方法，onMeasure实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class="line">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>就是调用了一个 setMeasureDimension 方法，将 View 的宽高传递进去，这个方法在自定义 View 的时候经常用到，就是在确定了自定义 View 的宽高值之后，在 onMeasure 方法中最后调用的，用于确定自定义 View 的测量宽高。</p><p>这里对宽高传入的都是 getDefaultSize() 函数的返回值，那么久看看这个函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> result = size;</div><div class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">        result = size;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">        result = specSize;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>就是根据 specMode 的不同值，返回不同的大小，当 AT_MOST 和 EXACTLY 模式下，就是返回 specSize 的值，也就是 View 测量后的大小。</li><li>在 UNSPECIFIED 模式下，View 的大小就是 getDefaultSize 方法的第一个参数 size ，即宽高分别为 getSuggestedMinimumWidth() 和 getSuggestedMinimumHeight() 这两个函数的返回值。在看下这两个函数(只贴出width的代码)：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>若 View 没有指定背景，那么 View 的宽度为 mMinWidth ，这个值是由 View 的 android:minWidth 属性指定的，若没有指定这个属性，那么这个 mMinWidth 为 0。</li><li>若 View 指定了背景，那么 View 的宽度就是 mMinWidth 和 mBackground.getMinimumWidth() 两者中较大的一个。前者上面已经说了是什么，那么后者又是什么东西呢？mBackground 是一个 Drawable，那么点进 Drawable 里面去看就知道了：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimumWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> intrinsicWidth = getIntrinsicWidth();</div><div class="line">    <span class="keyword">return</span> intrinsicWidth &gt; <span class="number">0</span> ? intrinsicWidth : <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>getMinimumWidth 返回的就是 Drawable 的原始高度，前提是这个 Drawable 有原始高度，不然就返回0；</p><h3 id="ViewGroup-的-measure-过程"><a href="#ViewGroup-的-measure-过程" class="headerlink" title="ViewGroup 的 measure 过程"></a>ViewGroup 的 measure 过程</h3><p>ViewGroup 是一个抽象类，因此他没有重写 View 的 onMeasure 方法，它提供了一个 measureChildren 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildren</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = mChildrenCount;</div><div class="line">    <span class="keyword">final</span> View[] children = mChildren;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</div><div class="line">        <span class="keyword">final</span> View child = children[i];</div><div class="line">        <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</div><div class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个方法就是调用 ViewGroup 的所有子 View 的 measureChild 方法，这个 measureChild方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child, <span class="keyword">int</span> parentWidthMeasureSpec,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> parentHeightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> LayoutParams lp = child.getLayoutParams();</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class="line">            mPaddingLeft + mPaddingRight, lp.width);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class="line">            mPaddingTop + mPaddingBottom, lp.height);</div><div class="line"></div><div class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>就是拿到子 View 的 LayoutParams ，然后通过 getChildMeasureSpec 方法生成子 View 的 MeasureSpec，接着就将生成的 MeasureSpec 直接传递给子 View 的 measure 方法进行测量。 getChildMeasureSpec  的逻辑上述已经说明。</p><p>可以发现 ViewGroup 并没有定义其本身具体的测量过程，因为 ViewGroup 是一个抽象类， onMeasure 需要各个具体的子类去实现，不想 View 一样，对 onMeasure 方法做具体实现，是因为不同的 ViewGroup 的实现类，有不同的布局特性，这导致他们的测量细节各不相同，比如 LinearLayout 和 RelativeLayout 两者的布局特性显然不同。</p><h2 id="layout-过程"><a href="#layout-过程" class="headerlink" title="layout 过程"></a>layout 过程</h2><ul><li>layout 方法确定 View 本身的位置</li><li>onLayout 方法确定子 View 的位置</li></ul><p>layout 的作用是 ViewGroup 用于确定子 View 的位置，当 ViewGroup 的位置确定了之后，它会在 onLayout 中遍历所有子 View ，并且调用其 layout 方法，而在子 View 的 layout 方法中，onLayout 方法又会被调用，先看 View 的layout 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class="number">0</span>) &#123;</div><div class="line">        onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class="line">        mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> oldL = mLeft;</div><div class="line">    <span class="keyword">int</span> oldT = mTop;</div><div class="line">    <span class="keyword">int</span> oldB = mBottom;</div><div class="line">    <span class="keyword">int</span> oldR = mRight;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class="line">            setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class="line">        onLayout(changed, l, t, r, b);</div><div class="line">        ...</div><div class="line">        ListenerInfo li = mListenerInfo;</div><div class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class="keyword">null</span>) &#123;</div><div class="line">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</div><div class="line">                    (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</div><div class="line">            <span class="keyword">int</span> numListeners = listenersCopy.size();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</div><div class="line">                listenersCopy.get(i).onLayoutChange(<span class="keyword">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>14 行调用了 setFrame 方法，这个方法就是用于确定 View 的四个顶点的位置，一旦四个顶点确定了，那么 View 在 ViewGroup 中的位置也就确定了。贴出 setFrame 中的一段代码，稍后用于说明问题。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">setFrame</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        mLeft = left;</div><div class="line">        mTop = top;</div><div class="line">        mRight = right;</div><div class="line">        mBottom = bottom;</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>17 行，会调用 onLayout 方法，这个方法的用途是父容器确定子 View 的位置，和 onMeasure 方法类似，onLayout 的实现和具体的布局相关，所以 View 和 ViewGroup 都没有实现这个方法。看看 LinearLayout 中的 onLayout 方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</div><div class="line">        layoutVertical(l, t, r, b);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        layoutHorizontal(l, t, r, b);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>这里分为竖直方向上的 layout 和水平方向上的 layout，这里看看 竖直方向上的： </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">layoutVertical</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = getVirtualChildCount();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">final</span> View child = getVirtualChildAt(i);</div><div class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">            childTop += measureNullChild(i);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childWidth = child.getMeasuredWidth();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight();</div><div class="line">            </div><div class="line">            <span class="keyword">final</span> LinearLayout.LayoutParams lp =</div><div class="line">                    (LinearLayout.LayoutParams) child.getLayoutParams();</div><div class="line">            </div><div class="line">           ...</div><div class="line">           </div><div class="line">            <span class="keyword">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class="line">                childTop += mDividerHeight;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            childTop += lp.topMargin;</div><div class="line">            setChildFrame(child, childLeft, childTop + getLocationOffset(child),</div><div class="line">                    childWidth, childHeight);</div><div class="line">            childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</div><div class="line"></div><div class="line">            i += getChildrenSkipCount(child, i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>首先遍历竖直方向上的所有子 View ，并且调用 setChildFrame 方法来为子 View 确定位置</li><li>注意 childTop 值会逐渐增加，这个增量包括分割线宽度、margin 值、childHeight，这样一来，在竖直方向上就符合 LinearLayout 的特性了。</li></ul><p>接下来看看 setChildFrame 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setChildFrame</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;        </div><div class="line">    child.layout(left, top, left + width, top + height);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>就是直接调用子 View 的 layout 方法，这样 LinearLayout 是父容器，父容器在 layout 中完成自己的定位之后，就通过 onLayout 去调用子 View 的 layout 方法，让子 View 完成其对自身的 layout 过程，然后在子 View 的 layout 方法中，又会通过 onLayout 方法去调用下一级子 View 的 layout 方法… 这样一层一层的传递下去之后，就会遍历完整个 View 树。</li></ul><h3 id="测量宽高和最终宽高的区别"><a href="#测量宽高和最终宽高的区别" class="headerlink" title="测量宽高和最终宽高的区别"></a>测量宽高和最终宽高的区别</h3><p>这个问题可以具体为：getMeasureWidth/height 和 getWidth/height 有什么区别。</p><p>前者很明显，就是 measure 过程中得到的宽高，那么重点在后者，先看看 View 中的 getWidth 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mRight - mLeft;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在就是要搞清楚 mRight 和 mLeft 两个变量是在什么时候赋值的。</p><ul><li>还是看看 LinearLayout 的竖直方向的 layout 过程，也就是上面的 layoutVertical 方法，在第 9、10 行可以看到：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> childWidth = child.getMeasuredWidth();</div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight();</div></pre></td></tr></table></figure><ul><li>然后在 22 行的 setChildFrame 方法，将 childWidth 和 childHeight 作为参数传入，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">setChildFrame(child, childLeft, childTop + getLocationOffset(child),</div><div class="line">        childWidth, childHeight);</div></pre></td></tr></table></figure><ul><li>然后在 setChildFrame 中会去调用子 View 的 layout 方法，继续讲参数传递</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">child.layout(left, top, left + width, top + height);</div></pre></td></tr></table></figure><ul><li>在 View 的 layout 方法中会调用 setFrame(l, t, r, b)，这里的 l、t、r、b 和上面的参数对应，在 setFrame 中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">setFrame</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        mLeft = left;</div><div class="line">        mTop = top;</div><div class="line">        mRight = right;</div><div class="line">        mBottom = bottom;</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码之前提到过，在这里，就将 mLeft mTop mRight mBottom 给赋值了，这个值就是在 LinearLayout 中通过 getMeasureWidth 和 getMeasureHeight 方法得到的。</p><ul><li><p>现在可以知道区别了<strong>在 View 的默认实现中，View 的测量宽高和最终宽高是相等的，只是两者的赋值时机不同，测量宽高形成于View 的 measure 过程，而最终宽高形成于View 的 layout 过程，在日常开发中，就可以认为 View 的测量宽高就等于 View 的最终宽高。</strong></p></li><li><p>一个好习惯就是：<strong>在 onLayout 方法中去拿 View 的测量宽高或者是最终宽高</strong>，因为在某些极端的情况下，系统需要经过多次的 measure 才能确定最终的宽高，这种情况下，在 onMeasure 方法中拿到的测量宽高可能是不准确的。</p></li></ul><h2 id="draw-过程"><a href="#draw-过程" class="headerlink" title="draw 过程"></a>draw 过程</h2><p>一个完整的绘制过程会依次绘制以下几个内容：</p><ol><li>背景</li><li>主体（onDraw()）</li><li>子 View（dispatchDraw()）</li><li>滑动边缘渐变和滑动条</li><li>前景</li></ol><p><strong>一般来说，一个 View（或 ViewGroup）的绘制不会这几项全都包含，但必然逃不出这几项，并且一定会严格遵守这个顺序</strong>。例如通常一个 LinearLayout 只有背景和子 View，那么它会先绘制背景再绘制子 View；一个 ImageView 有主体，有可能会再加上一层半透明的前景作为遮罩，那么它的前景也会在主体之后进行绘制。需要注意，前景的支持是在 Android 6.0（也就是 API 23）才加入的；之前其实也有，不过只支持  FrameLayout，而直到 6.0 才把这个支持放进了 View 类里。</p><h3 id="绘制背景"><a href="#绘制背景" class="headerlink" title="绘制背景"></a>绘制背景</h3><p>它的绘制发生在一个叫 drawBackground() 的方法里，但这个方法是 private 的，不能重写，你如果要设置背景，只能用自带的 API 去设置（xml 布局文件的 android:background 属性以及 Java 代码的 View.setBackgroundXxx() 方法），而不能自定义绘制</p><h3 id="绘制主体"><a href="#绘制主体" class="headerlink" title="绘制主体"></a>绘制主体</h3><p>这个过程是在 onDraw 方法中执行的，但是在 View 中，这个方法是没有实现的，因为具体的 View 需要如何绘制，需要 View 的子类去具体的定制。所以当我们自定义 View 的绘制的时候，就就可以直接重写 onDraw 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        ... <span class="comment">// 自定义绘制代码</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里注意，是将自定义绘制的代码写在 super 的下面，不过这里写在 super 的上面和下面其实都是一样的， 因为上面提到，View 的这个方法是一个空实现，所以。</p><p>下面来讨论自定义 View 的绘制方法时，自定义的代码写在 super 上下的区别。</p><h4 id="写在-super-onDraw-的下面"><a href="#写在-super-onDraw-的下面" class="headerlink" title="写在 super.onDraw() 的下面"></a>写在 super.onDraw() 的下面</h4><p>把绘制代码写在 super.onDraw() 的下面，由于绘制代码会在原有内容绘制结束之后才执行，<strong>所以绘制内容就会盖住控件原来的内容</strong>。这是最为常见的情况：为控件增加点缀性内容。比如，在 Debug 模式下绘制出 ImageView 的图像尺寸信息：<br><img src="https://ws3.sinaimg.cn/large/52eb2279ly1fih2ihfxpxj207306q40e.jpg" alt="image"></p><h4 id="写在-super-onDraw-的上面"><a href="#写在-super-onDraw-的上面" class="headerlink" title="写在 super.onDraw() 的上面"></a>写在 super.onDraw() 的上面</h4><p>如果把绘制代码写在 super.onDraw() 的上面，由于绘制代码会执行在原有内容的绘制之前，<strong>所以绘制的内容会被控件的原内容盖住</strong>。 这种方式可以实现马克笔的效果：</p><p><img src="https://ws3.sinaimg.cn/large/52eb2279ly1fih2i89d63j20fk0abmyy.jpg" alt="image"></p><h3 id="绘制子-View"><a href="#绘制子-View" class="headerlink" title="绘制子 View"></a>绘制子 View</h3><p>有部分的遮盖关系是无法通过 onDraw 方法来实现的，例如，你继承了一个 LinearLayout，重写了它的 onDraw() 方法，在 super.onDraw() 中插入了你自己的绘制代码，使它能够在内部绘制一些斑点作为点缀：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpottedLinearLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">       ... <span class="comment">// 绘制斑点</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/52eb2279ly1fih3a2izowj205e06cmx3.jpg" alt="image"></p><p>没毛病。</p><p>但是当添加了子 View 之后，</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;SpottedLinearLayout  </div><div class="line">    android:orientation=<span class="string">"vertical"</span></div><div class="line">    ... &gt;</div><div class="line"></div><div class="line">    &lt;ImageView ... /&gt;</div><div class="line"></div><div class="line">    &lt;TextView ... /&gt;</div><div class="line"></div><div class="line">&lt;/SpottedLinearLayout&gt;</div></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/52eb2279ly1fih3qaplxjj20d508cn0c.jpg" alt="image"></p><p>造成这种情况的原因是 Android 的绘制顺序：在绘制过程中，<strong>每一个 ViewGroup 会先调用自己的 onDraw() 来绘制完自己的主体之后再去绘制它的子 View</strong>。对于上面这个例子来说，就是你的 LinearLayout 会在绘制完斑点后再去绘制它的子 View。那么在子 View 绘制完成之后，先前绘制的斑点就被子 View 盖住了。</p><p>具体来讲，这里说的「绘制子 View」是通过另一个绘制方法的调用来发生的，这个绘制方法叫做：dispatchDraw()。也就是说，<strong>在绘制过程中，每个 View 和 ViewGroup 都会先调用 onDraw() 方法来绘制主体，再调用 dispatchDraw() 方法来绘制子 View</strong>。</p><blockquote><p>注：虽然 View 和 ViewGroup 都有 dispatchDraw() 方法，不过由于 View 是没有子 View 的，所以一般来说 dispatchDraw() 这个方法只对 ViewGroup（以及它的子类）有意义。</p></blockquote><p>回到刚才的问题：怎样才能让 LinearLayout 的绘制内容盖住子 View 呢？只要让它的绘制代码在子 View 的绘制之后再执行就好了。</p><h4 id="写在-super-dispatchDraw-的下面"><a href="#写在-super-dispatchDraw-的下面" class="headerlink" title="写在 super.dispatchDraw() 的下面"></a>写在 super.dispatchDraw() 的下面</h4><p>只要重写 dispatchDraw()，并在 super.dispatchDraw() 的下面写上你的绘制代码，这段绘制代码就会发生在子 View 的绘制之后，从而让绘制内容盖住子 View 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpottedLinearLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// 把 onDraw() 换成了 dispatchDraw()</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.dispatchDraw(canvas);</div><div class="line"></div><div class="line">       ... <span class="comment">// 绘制斑点</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fihvsxhkblj305l072glu.jpg" alt="image"></p><h4 id="写在-super-dispatchDraw-的上面"><a href="#写在-super-dispatchDraw-的上面" class="headerlink" title="写在 super.dispatchDraw() 的上面"></a>写在 super.dispatchDraw() 的上面</h4><p>同理，<strong>把绘制代码写在 super.dispatchDraw() 的上面，这段绘制就会在 onDraw() 之后、  super.dispatchDraw() 之前发生</strong>，也就是绘制内容会出现在主体内容和子 View 之间。而这个……</p><p>其实和前面讲的，重写 onDraw() 并把绘制代码写在 super.onDraw() 之后的做法，效果是一样的。</p><h3 id="onDrawForeground"><a href="#onDrawForeground" class="headerlink" title="onDrawForeground()"></a>onDrawForeground()</h3><p>滑动边缘渐变和滑动条以及前景，这两部分被合在一起放在了 onDrawForeground() 方法里，这个方法是可以重写的。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fiiwb2nr63j30ga0bddgg.jpg" alt="enter image description here"></p><p>滑动边缘渐变和滑动条可以通过 xml 的 android:scrollbarXXX 系列属性或 Java 代码的  View.setXXXScrollbarXXX() 系列方法来设置；前景可以通过 xml 的 android:foreground 属性或 Java 代码的  View.setForeground() 方法来设置。而重写 onDrawForeground() 方法，并在它的 super.onDrawForeground() 方法的上面或下面插入绘制代码，则可以控制绘制内容和滑动边缘渐变、滑动条以及前景的遮盖关系。</p><h4 id="写在-super-onDrawForeground-的下面"><a href="#写在-super-onDrawForeground-的下面" class="headerlink" title="写在 super.onDrawForeground() 的下面"></a>写在 super.onDrawForeground() 的下面</h4><p>如果你把绘制代码写在了 super.onDrawForeground() 的下面，绘制代码会在滑动边缘渐变、滑动条和前景之后被执行，那么绘制内容将会盖住滑动边缘渐变、滑动条和前景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawForeground</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onDrawForeground(canvas);</div><div class="line"></div><div class="line">       ... <span class="comment">// 绘制「New」标签</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;!-- 使用半透明的黑色作为前景，这是一种很常见的处理 --&gt;  </div><div class="line">&lt;AppImageView  </div><div class="line">    ...</div><div class="line">    android:foreground=<span class="string">"#88000000"</span> /&gt;</div></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fihyhundspj30g008ggma.jpg" alt="enter image description here"></p><blockquote><p>左上角的标签没有被前景遮盖住，而是保持了它本身的颜色</p></blockquote><h4 id="写在-super-onDrawForeground-的上面"><a href="#写在-super-onDrawForeground-的上面" class="headerlink" title="写在 super.onDrawForeground() 的上面"></a>写在 super.onDrawForeground() 的上面</h4><p>如果你把绘制代码写在了 super.onDrawForeground() 的上面，绘制内容就会在 dispatchDraw() 和  super.onDrawForeground() 之间执行，那么绘制内容会盖住子 View，但被滑动边缘渐变、滑动条以及前景盖住：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawForeground</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       ... <span class="comment">// 绘制「New」标签</span></div><div class="line"></div><div class="line">       <span class="keyword">super</span>.onDrawForeground(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fihyqsu2x3j30fn084js1.jpg" alt="enter image description here"></p><blockquote><p>由于被黑色的前景给遮住了，这里看到的标签也是这种半透明的黑色</p></blockquote><h3 id="想在滑动边缘渐变、滑动条和前景之间插入绘制代码？"><a href="#想在滑动边缘渐变、滑动条和前景之间插入绘制代码？" class="headerlink" title="想在滑动边缘渐变、滑动条和前景之间插入绘制代码？"></a>想在滑动边缘渐变、滑动条和前景之间插入绘制代码？</h3><p>很简单：不行。</p><p>虽然这三部分是依次绘制的，但它们被一起写进了 onDrawForeground() 方法里，所以你要么把绘制内容插在它们之前，要么把绘制内容插在它们之后。而想往它们之间插入绘制，是做不到的。</p><h3 id="draw-总调度的方法"><a href="#draw-总调度的方法" class="headerlink" title="draw() 总调度的方法"></a>draw() 总调度的方法</h3><p>除了 onDraw() dispatchDraw() 和 onDrawForeground() 之外，还有一个可以用来实现自定义绘制的方法：  draw()。</p><p>draw() 是绘制过程的总调度方法。一个 View 的整个绘制过程都发生在 draw() 方法里。前面讲到的背景、主体、子 View 、滑动相关以及前景的绘制，它们其实都是在 draw() 方法里的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// View.java 的 draw() 方法的简化版大致结构（是大致结构，不是源码哦）：</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    drawBackground(Canvas); <span class="comment">// 绘制背景（不能重写）</span></div><div class="line">    onDraw(Canvas); <span class="comment">// 绘制主体</span></div><div class="line">    dispatchDraw(Canvas); <span class="comment">// 绘制子 View</span></div><div class="line">    onDrawForeground(Canvas); <span class="comment">// 绘制滑动相关和前景</span></div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从上面的代码可以看出，onDraw() dispatchDraw() onDrawForeground() 这三个方法在 draw() 中被依次调用，因此它们的遮盖关系也就像前面所说的——dispatchDraw() 绘制的内容盖住 onDraw() 绘制的内容；onDrawForeground() 绘制的内容盖住 dispatchDraw() 绘制的内容。而在它们的外部，则是由 draw() 这个方法作为总的调度。所以，你也可以重写 draw() 方法来做自定义的绘制。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fiix28rb6mj30ru0c8jsb.jpg" alt="enter image description here"></p><h4 id="写在-super-draw-的下面"><a href="#写在-super-draw-的下面" class="headerlink" title="写在 super.draw() 的下面"></a>写在 super.draw() 的下面</h4><p>由于 draw() 是总调度方法，所以如果把绘制代码写在 super.draw() 的下面，那么这段代码会在其他所有绘制完成之后再执行，也就是说，它的绘制内容会盖住其他的所有绘制内容。</p><p>它的效果和重写 onDrawForeground()，并把绘制代码写在 super.onDrawForeground() 下面时的效果是一样的：都会盖住其他的所有内容。</p><blockquote><p>当然了，虽说它们效果一样，但如果你既重写 draw() 又重写 onDrawForeground() ，那么 draw() 里的内容还是会盖住 onDrawForeground() 里的内容的。所以严格来讲，它们的效果还是有一点点不一样的。</p><p>但这属于抬杠……</p></blockquote><h4 id="写在-super-draw-的上面"><a href="#写在-super-draw-的上面" class="headerlink" title="写在 super.draw() 的上面"></a>写在 super.draw() 的上面</h4><p>同理，由于 draw() 是总调度方法，所以如果把绘制代码写在 super.draw() 的上面，那么这段代码会在其他所有绘制之前被执行，所以这部分绘制内容会被其他所有的内容盖住，包括背景。是的，背景也会盖住它。</p><p>是不是觉得没用？觉得怎么可能会有谁想要在背景的下面绘制内容？别这么想，有的时候它还真的有用。</p><p>例如我有一个 EditText：</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fii503vailj30dz03ajrd.jpg" alt="enter image description here"></p><p>它下面的那条横线，是 EditText 的背景。所以如果我想给这个 EditText 加一个绿色的底，我不能使用给它设置绿色背景色的方式，因为这就相当于是把它的背景替换掉，从而会导致下面的那条横线消失：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;EditText  </div><div class="line">    ...</div><div class="line">    android:background=<span class="string">"#66BB6A"</span> /&gt;</div></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fii56ecfwqj30a602kq2x.jpg" alt="enter image description here"></p><p>在这种时候，你就可以重写它的 draw() 方法，然后在 super.draw() 的上方插入代码，以此来在所有内容的底部涂上一片绿色：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> AppEditText extends EditText &#123;  </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        canvas.drawColor(Color.parseColor(<span class="string">"#66BB6A"</span>)); <span class="comment">// 涂上绿色</span></div><div class="line"></div><div class="line">        <span class="keyword">super</span>.draw(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fii53vch7mj30ag02l3yk.jpg" alt="enter image description here"></p><p>###draw 过程注意</p><p>关于绘制方法，有两点需要注意一下：</p><ol><li>出于效率的考虑，ViewGroup 默认会绕过 draw() 方法，换而直接执行 dispatchDraw()，以此来简化绘制流程。所以如果你自定义了某个 ViewGroup 的子类（比如 LinearLayout）并且需要在它的除  dispatchDraw() 以外的任何一个绘制方法内绘制内容，你可能会需要调用 View.setWillNotDraw(false) 这行代码来切换到完整的绘制流程（是「可能」而不是「必须」的原因是，有些 ViewGroup 是已经调用过 setWillNotDraw(false) 了的，例如 ScrollView）。<p></p></li><li>有的时候，一段绘制代码写在不同的绘制方法中效果是一样的，这时你可以选一个自己喜欢或者习惯的绘制方法来重写。但有一个例外：如果绘制代码既可以写在 onDraw() 里，也可以写在其他绘制方法里，那么优先写在 onDraw() ，因为 Android 有相关的优化，可以在不需要重绘的时候自动跳过  onDraw() 的重复执行，以提升开发效率。享受这种优化的只有 onDraw() 一个方法。</li></ol><p>###draw 过程总结</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fii5jk7l19j30q70e0di5.jpg" alt="enter image description here"></p><p>另外别忘了上面提到的那两个注意事项：</p><ol><li>在 ViewGroup 的子类中重写除 dispatchDraw() 以外的绘制方法时，可能需要调用  setWillNotDraw(false)；</li><li>在重写的方法有多个选择时，优先选择 onDraw()。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对 View 的绘制过程都清楚了之后，就可以进行各种自定义 View 了，Hencoder 说过，自定义 View 无非就是三个：<strong>绘制、布局、触摸反馈</strong>。 </p><p>其中绘制和布局这里总结了，在这两个操作过程中会大量使用到 Paint Canvas 和 Property Animation，这些后面再做总结。</p><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><p>[1] 《Android 开发艺术探索》</p><p>[2] <a href="http://hencoder.com/ui-1-5/" target="_blank" rel="external">HenCoder Android 开发进阶：自定义 View 1-5 绘制顺序</a></p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>自定义流式布局，刚好是对上面总结内容的一个很好的实践。</p><p><a href="https://github.com/zengfanyu/FlowView" target="_blank" rel="external">View 工作流程的相关实践项目</a></p></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1511596823582&amp;amp;di=8f750b93754500efca5af505cb251355&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fwww.hack50.com%2Farticle%2FUploadPic%2F2015-10%2F2015101020525216441.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要：一直关注 Hencoder 的教程，前阵子刚好出了一期 View 的工作流程系列，然后结合《Android开发艺术探索》相关章节，做一下笔记。&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://zengfanyu.top/categories/Android/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
  </entry>
  
</feed>
