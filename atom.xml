<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CODE FRAMER BIGZ</title>
  
  <subtitle>Every little makes a mickel</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zengfanyu.top/"/>
  <updated>2017-11-04T09:34:14.983Z</updated>
  <id>http://zengfanyu.top/</id>
  
  <author>
    <name>BIGZ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dagger2基础内容归纳</title>
    <link href="http://zengfanyu.top/2017/11/04/Dagger/"/>
    <id>http://zengfanyu.top/2017/11/04/Dagger/</id>
    <published>2017-11-04T06:37:15.000Z</published>
    <updated>2017-11-04T09:34:14.983Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/eJQyHTv.png" alt=""></p><p><em>摘要：最近看了很多讲 <code>Dagger2</code> 的文章，发现Dagger中很多基础的概念问题真的挺缥缈，很难理解透彻，其中有几篇确实写得不错，这里将他们总结一下，底部给上参考文章链接。</em><br><a id="more"></a></p><font face="黑体"><br>&gt;<br>## @Inject ##<br><code>@Inject</code> 注解只是 <code>JSR-330</code> 中定义的注解,这个注解本身是没有意义的,它需要依赖于注入框架才有意义,用于标记需要被注入框架注入的方法,属性,构造方法,也就是说呗 <code>@Inject</code> 标记的就是用于提供依赖的.<br><br>### @Inject 定义 ###<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inject &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>###  @Inject 的使用 ###<br><br>1. 构造方法注入<br><br><code>@inject</code> 注解在在构造器注入上又有两层意思<br><br>- 告诉 <code>Dragger2</code> 可以使用这个构造方法构建对象用于提供依赖<br><br>- 注入构造方法所需要的参数的依赖<br><br><br><br>2. 属性注入<br><br>用于标注在属性上,<font color="#ff8000">被标注的属性不能用 private 修饰</font>,否则无法注入<br><br>3. 方法注入<br><br>标注在 <code>public</code> 方法上,<code>Dagger2</code> 会在构造方法执行结束之后,立刻调用被 <code>@inject</code> 标注的方法.<br><br>&gt;方法注入和属性注入没有本质的区别，那么什么时候用该使用方法注入，什么时候应该使用属性注入呢，比如依赖需要使用 <code>this</code> 对象的时候，就适合使用方法注入，因为方法注入是在构造方法执行结束之后就调用的，所以它可以提供安全的 <code>this</code> 对象。<br><br>### Inject 的弊端 ###<br><br>1. 假设我们现在依赖了第三方的框架,这个第三方的框架我们是不能修改的,所以我们无法注入.<br><br>2. 如果某个用于提供依赖的类具有多个构造方法,我们只能标注一个,无法标注多个<br><br>3. 当我们使用依赖倒置原则的时候，因为需要注入的对象是抽象的，因此也如法注入<br><br><br><br>## @Component  ##<br><br>Component 负责将 被依赖对象 给注入到 需要依赖对象 当中,类似于一个中间层.<br><br>### Component 定义 ###<br><br><br><code>Dagger2</code> 是使用 <code>@Component</code> 来完成依赖注入的, 定义如下:<br><br>    public @interface Component {<br>        Class&lt;?&gt;[] modules() default {};<br>        Class&lt;?&gt;[] dependencies() default {};<br>    }<br><br>需要注意几点:<br><br>1. <code>Component</code> 需要用接口来定义,<br>2. 接口命名方式推荐为: <code>*TargetClassName*Component</code><br>3. 在编译之后,<code>Dagger2</code> 会生成 <code>Dagger*TargetClassName*Component</code> ,这是 <code>*TargetClassName*Component</code> 接口的实现<br>4. 在 <code>TargetClass</code> 中使用 <code>DaggerTargetClassNameComponent</code> 就可以实现依赖注入<br><br>###@Component 中定义方法的方式 ###<br><br><strong>1. <code>void inject(TargetClassName calss)</code></strong><br><br><code>Dagger2</code> 会从 <code>TargetClass</code> 开始查找 <code>@Inject</code> 注解,自动生成依赖注入的代码,调用 <code>inject</code> 即可完成依赖的注入<br><br><br><strong>2. <code>TargetClass getTargetClass()</code></strong><br><br><code>Dagger2</code> 会到 <code>TargetClass</code> 中寻找被<code>@Inject</code> 注解的构造方法,自动生成提供 <code>TargetClass</code> 依赖的代码,这种方式一般用于为其他的 <code>Component</code> 提供依赖,即一个 <code>Component</code> 作为另外一个 <code>Component</code> 的依赖<br><br><strong>3. 使用 @SubComponent 的方式</strong><br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AComponpent</span> </span>&#123;</div><div class="line">    <span class="function">XxxComponent <span class="title">plus</span><span class="params">(Module... modules)</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function">@<span class="title">Subcomponent</span><span class="params">(modules = xxxxx)</span></span></div><div class="line"><span class="function">interface XxxComponent </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>- <code>xxxComponent</code> 是该 <code>AComponpent</code> 的依赖，被 <code>@Subcomponent</code> 标注。<br>- <code>modules</code> 参数则是 <code>xxxComponent</code> 指定的 <code>Module</code>。<br>- 在重新编译后，<code>Dagger2</code> 生成的代码中，<code>Subcomponent</code> 标记的类是 <code>Componpent</code> 的内部类。<br><br><br>总结一下 <font color="#ff0000"><strong>目前为止(后面还有Module注解)</strong></font> Component 的作用:<br><br><code>Dagger2</code> 以 <code>Component</code> 中定义的方法作为入口,到 <code>TargetClass</code> 中去寻找被 <code>@Inject</code> 标注的属性,查找到这个属性之后,就会去接着查找该属性对应的 用 <code>@Inject</code> 标注的构造函数,剩下的工作就是初始化该属性的实例,并且将实例赋值给属性.这是通过生成一系列提供依赖的 <code>Factory</code> 类和注入依赖的 <code>Injector</code> 类,来实现的.<br><br><br>## Component 和 Inject 的关系小结 ##<br><br><img src="https://i.imgur.com/1i9579w.png" alt="Component"><br><br>1. 用 <code>@Inject</code> 标注目标类中的其他类<br>2. 用 <code>@Inject</code> 标注其他类中的构造方法<br>3. 若其他类中还依赖于别的类，那么重复上述两个步骤<br>4. 调用 <code>Component</code> 的 <code>injectXXX</code> 方法，<code>Component</code> 会把目标类依赖的实例给注入到目标类当中，用于初始化目标类当中的依赖。<br><br>## @Module ##<br><br>### Module 定义 ###<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Module &#123;</div><div class="line">    Class&lt;?&gt;[] includes() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>### @Module 引入原因 ###<br><br>如果我们项目当中使用了第三方的框架，那么可能某个 <code>TargetClass</code> 就持有对框架中某个类 <code>C</code> 实例的引用，那么按照上面两个注解的方式，我们就需要到框架当中 <code>C</code> 类的构造方法上面去标注一个 <code>@Inject</code>，况且不说构造方法多样性的问题（比如 <code>Universal-Image-Loader</code> 的 <code>ImageLoader</code> 类构造方法二三十个），框架当中的源码我们是不可以修改的啊。这个时候 <code>@Inject</code> 就失效了，我们就需要一个新的工具去注解，这时就引入了 <code>@Module</code> 了。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleClass</span></span>&#123;</div><div class="line">      <span class="comment">//A是第三方类库中的一个类</span></div><div class="line">      <span class="function">A <span class="title">provideA</span><span class="params">()</span></span>&#123;</div><div class="line">           <span class="keyword">return</span> A();</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br><code>Module</code> 是一个简单工厂模式，<code>Module</code> 里面的方法基本上都是创建类实例的方法，那么此时如何让 <code>Component</code> 和 <code>Module</code> 产生联系呢？<br><br>### Component 的新职责 ###<br><br><code>Component</code> 是注入器，它一端连接 <code>TargetClass</code>，另一端连接 <code>TargetClass</code> 依赖的实例，它把 <code>TargetClass</code> 依赖<strong>实例注入到 <code>TargetClass</code> 中</strong>。上文中的 <code>Module</code> 是一个<strong>提供类实例的类</strong>，所以 <strong>Module 应该是属于 Component 的实例端的</strong>（连接各种目标类依赖实例的端），<code>Component</code> 的<strong>新职责就是管理好 <code>Module</code></strong>，<code>Component</code> 中的 <code>modules</code> 属性可以把 <code>Module</code> 加入 <code>Component</code>，<code>modules</code> 可以加入多个 <code>Module</code>。<br><br><img src="https://i.imgur.com/Gx1Kq5v.png" alt=""><br><br>那么接下来的问题就是，如何将 Module 中各种提供实例的方法同 <code>TargetClass</code> 中 <code>Inject</code> 标注的类属性给链接起来，这个时候 <code>Provides</code> 就可以出来了。<br><br>## @Provides ##<br><br>### Provides 定义 ###<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Provides &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>Module 中创建实例的方法是用 <code>Provides</code> 标注的，之前说过，<code>Component</code> 搜索到 <code>TargetClass</code> 中用 <code>@Inject</code> 标注的属性之后，他就会去这个属性的类中寻找标注了 <code>@Inject</code> 的构造方法 ，<font color="#ff0000"><strong>其实在这个步骤之前，它优先去 @Module 标注的类中查找 @Provides 标注的用于创建实例的方法，如果没有找到，那么才会去查找标注了 @Inject 的构造方法。</strong></font><p>这么一来，第三方类库的依赖注入问题就解决了。</p><h2 id="上述注解小结"><a href="#上述注解小结" class="headerlink" title="上述注解小结"></a>上述注解小结</h2><p>1.<code>Inject</code> 是用于标注 <code>TargetClass</code> 中的依赖和依赖类中的构造函数的。</p><p>2.<code>Component</code> 是一个注入器（<code>Injector</code>） ，同时也起着桥梁的作用， 一端是<font color="#ff0000"><strong>类创建实例端</strong></font>(即负责创建生产类的实例),另外一端是<font color="#ff0000"> <strong><code>TargetClass</code> 端</strong></font>（即需要进行依赖初始化的类），同时也负责管理 <code>Module</code>。</p><p><img src="https://i.imgur.com/ZljyOnL.png" alt=""></p><p>3.<code>Module</code> 和 <code>Provides</code> 是为觉得第三方库注入问题而引出的，<code>Module</code> 是一个简单工厂模式，<code>Module</code> 包含创建实例的方法，这个方法用 <code>Provides</code> 来标注。</p><p>4.创建依赖类有两个途径：通过 <code>@Inject</code> 标注的构造方法来创建； 通过 <code>@Provides</code> 标注的创建实例的方法来创建； 但是后者的优先级要大于前者，也就是说，<code>Component</code> 如果找到了后者，他就不会再接着去找前者。</p><p>5.<code>@Module</code> 要和 <code>@Provides</code> 配套使用，并且 <code>@Component</code> 也指定了该 <code>Module</code> 的时候，才能正常使用，<code>@Module</code> 告诉 <code>@Component</code> ，你可以从我这儿标注了 <code>@Privides</code> 的方法中获取实例。</p><p>6.<code>Component</code> 和 <code>Module</code> 是匹配关系 ， <code>Component</code> 依赖哪一个 <code>Module</code> 就需要在注解中用 <code>muduls</code> 属性标明。</p><hr><font color="#ff0000"><strong>@Inject @Component @Module @Provides 就是 Dagger2 框架中最核心的部分，奠定了整个框架的基础，下面的标签就是针对细节问题的处理。</strong></font><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><h3 id="问题的引出"><a href="#问题的引出" class="headerlink" title="问题的引出"></a>问题的引出</h3><p>现在有种情况，用上述注解无法解决：</p><p>根据依赖倒置原则，我们应该面向接口编程，或者是面向抽象编程，在 <code>Java</code> 中多态的性质很好的支持了这一原则，所以我们经常会在类中申明的是某一属性的接口，或者是抽象类，这样操作在程序编译的时刻，是不能确定这个属性的具体实例是哪一个子类，只能在运行时才能确定下来，那么这个时候 <code>Component</code> 怎么知道应该将哪一个子类给注入到 <code>TargetClass</code> 的属性当中 ？</p><p><strong>基于上面两个问题，就提出了 <code>@Qualifier</code> 注解，它就是用于解决上述问题的。</strong></p><p><img src="https://i.imgur.com/aODbhRv.png" alt=""></p><p>这个时候就需要给各个 抽象类或者接口 的子类的构造方法标注 <code>@Qualifier</code>，类似于给他们一个 <code>ID</code> ，通过这个 <code>ID</code> 就可以区分不同的子类。</p><h3 id="Qualifier-的定义"><a href="#Qualifier-的定义" class="headerlink" title="Qualifier 的定义"></a>Qualifier 的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Qualifier &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>这个注解跟 <code>@Inject</code> 一样，不是 <code>Dagger</code> 定义的， 而是 <code>JSR-330</code> 中定义的。</p></blockquote><ul><li><code>Qualifier</code> 是用于<strong>定义注解</strong>的。</li></ul><h3 id="Qualifier-使用方法"><a href="#Qualifier-使用方法" class="headerlink" title="Qualifier 使用方法"></a>Qualifier 使用方法</h3><ol><li>使用 <code>@Qualifier</code> 根据子类的不同，分别定义新的注解，注解要有含义</li><li>分别使用新的注解去标注生成不同子类实例的地方，然后要使用哪一个子类的实例，是到抽象属性上标注子类对应的新的注解。</li></ol><h2 id="Scope-和-Single"><a href="#Scope-和-Single" class="headerlink" title="@Scope 和 @Single"></a>@Scope 和 @Single</h2><h3 id="Scole-的定义"><a href="#Scole-的定义" class="headerlink" title="Scole 的定义"></a>Scole 的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scope &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>也是 <code>JSR-330</code> 定义的，不是 <code>Dagger</code> 中定义的</li><li>用于自定义注解</li><li><code>@Single</code> 是 <code>@Scope</code> 的默认实现，如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Singleton &#123;&#125;</div></pre></td></tr></table></figure><h3 id="Scope-的作用"><a href="#Scope-的作用" class="headerlink" title="Scope 的作用"></a>Scope 的作用</h3><ul><li><p>它的作用只是保证依赖在 <code>@Component</code> 中是唯一的，可以理解为“局部单例”。</p></li><li><p><code>@Scope</code> 是需要成对存在的，在 <code>Module</code> 的 <code>Provide</code> 方法中使用了 <code>@Scope</code>，那么对应的 <code>Component</code> 中也必须使用 <code>@Scope</code> 注解，当两边的 <code>@Scope</code> 名字一样时（比如同为 <code>@Singleton</code>）, 那么该 <code>Provide</code> 方法提供的依赖将会在 <code>Component</code> 中保持“局部单例”。</p></li><li>而在 <code>Component</code> 中标注 <code>@Scope</code>，<code>provide</code> 方法没有标注，那么这个 <code>Scope</code> 就不会起作用，而 <code>Component</code> 上的 <code>Scope</code> 的作用也只是为了能顺利通过编译。</li></ul><p>这么说 <code>@Single</code> 是没有创建单例的能力，因为他只是保证在 <code>Component</code> 中的唯一的，那怎么实现真正的单例呢？</p><h3 id="单例的实现"><a href="#单例的实现" class="headerlink" title="单例的实现"></a>单例的实现</h3><ol><li>依赖在 <code>Component</code> 中是单例的（供该依赖的 <code>provide</code> 方法和对应的 <code>Component</code> 类使用同一个 <code>Scope</code> 注解。）</li><li>对应的 <code>Component</code> 在 <code>App</code> 中只初始化一次，每次注入依赖都使用这个 <code>Component</code> 对象。（在 <code>Application</code> 中创建该 <code>Component</code>）</li></ol><h2 id="Lazy"><a href="#Lazy" class="headerlink" title="Lazy"></a>Lazy</h2><p>这个比较简单，延迟加载模式，用 <code>Lazy&lt;T&gt;</code> 装饰需要被 <code>@Inject</code> 标注的属性 <code>T</code> ，这样，在 <code>Inject</code> 的时候并不会初始化它，而是在使用 <code>T</code> 的时候，通过 <code>T.gey()</code> 来得到他的实例，然后再使用。</p><h2 id="Component-组织方式"><a href="#Component-组织方式" class="headerlink" title="Component 组织方式"></a>Component 组织方式</h2><p>这是重中之重，前面的概念都是做铺垫，这里从一个 <code>APP</code> 的角度将他们融合起来。</p><h3 id="一个app中应该根据什么来划分Component"><a href="#一个app中应该根据什么来划分Component" class="headerlink" title="一个app中应该根据什么来划分Component"></a>一个app中应该根据什么来划分Component</h3><p>假如一个 <code>app</code> （<code>app</code> 指的是 <code>Android app</code>）中只有一个 <code>Component</code>，那这个 <code>Component</code> 是很难维护、并且变化率是很高，很庞大的，就是因为 <code>Component</code> 的职责太多了导致的。所以就有必要把这个庞大的 <code>Component</code> 进行划分，划分为粒度小的 <code>Component</code>。那划分的规则这样的：</p><ol><li><p>要有一个全局的 <code>Component</code> (可以叫 <code>ApplicationComponent</code> ),负责管理整个 <code>app</code> 的全局类实例（全局类实例整个 <code>app</code> 都要用到的类的实例，这些类基本都是单例的）</p></li><li><p>每个<strong>页面</strong>对应一个 <code>Component</code>，比如一个 <code>Activity</code> 页面定义一个 <code>Component</code>，一个 <code>Fragment</code> 定义一个 <code>Component</code>。当然这不是必须的，有些页面之间的依赖的类是一样的，可以公用一个 <code>Component</code>。</p></li></ol><p>第一个规则应该很好理解，具体说下第二个规则，为什么以<strong>页面</strong>为粒度来划分 <code>Component</code>？</p><ol><li>一个 <code>app</code> 是由很多个页面组成的，从组成 <code>app</code> 的角度来看一个页面就是一个完整的最小粒度了。</li></ol><ol><li>一个页面的实现其实是要依赖各种类的，可以理解成一个页面把各种依赖的类组织起来共同实现一个大的功能，每个页面都组织着自己的需要依赖的类，一个页面就是一堆类的组织者。</li></ol><ol><li>划分粒度不能太小了。假如使用 <code>mvp</code> 架构搭建 <code>app</code>，划分粒度是基于每个页面的<code>m 、v 、p</code> 各自定义 <code>Component</code> 的，那 <code>Component</code> 的粒度就太小了，定义这么多的 <code>Component</code>，管理、维护就很非常困难。</li></ol><p>所以以页面划分 <code>Component</code> 在管理、维护上面相对来说更合理。</p><h2 id="组织Component"><a href="#组织Component" class="headerlink" title="组织Component"></a>组织Component</h2><p>我们已经把一个 <code>app</code> 按照上面的规则划分为不同的 <code>Component</code> 了，全局类实例也创建了单例模式。问题来了：其他的 <code>Component</code> 想要把全局的类实例注入到目标类中该怎么办呢？<br>这就涉及到<strong>类实例共享</strong>的问题了，因为 <code>Component</code> 有管理创建类实例的能力。因此只要能很好的组织 <code>Component</code> 之间的关系，问题就好办了。具体的组织方式分为以下2种：</p><ol><li><p><strong>依赖方式</strong><br>一个 <code>Component</code> 是依赖于一个或多个 <code>Component</code>，<code>Component</code> 中的 <code>dependencies</code> 属性就是依赖方式的具体实现</p></li><li><p><strong>包含方式</strong><br>一个 <code>Component</code> 是包含一个或多个 <code>Component</code> 的，被包含的 <code>Component</code> 还可以继续包含其他的 <code>Component</code>。这种方式特别像 <code>Activity</code> 与 <code>Fragment</code> 的关系。<code>SubComponent</code> 就是包含方式的具体实现。</p></li></ol><h2 id="Dagger-注入一次的流程"><a href="#Dagger-注入一次的流程" class="headerlink" title="Dagger 注入一次的流程"></a>Dagger 注入一次的流程</h2><p>步骤1：查找 <code>Module</code> 中是否存在创建该类的方法。</p><p>步骤2：若存在创建类方法，查看该方法是否存在参数</p><pre><code>步骤2.1：若存在参数，则按从**步骤1**开始依次初始化每个参数步骤2.2：若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</code></pre><p>步骤3：若不存在创建类方法，则查找 <code>Inject</code> 注解的构造函数，看构造函数是否存在参数</p><pre><code>步骤3.1：若存在参数，则从**步骤1**开始依次初始化每个参数步骤3.2：若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</code></pre><h2 id="总结对象"><a href="#总结对象" class="headerlink" title="总结对象"></a>总结对象</h2><blockquote><ol><li><a href="http://www.jianshu.com/p/cd2c1c9f68d4" target="_blank" rel="external">Android：dagger2让你爱不释手-基础依赖注入框架篇</a></li><li><a href="http://www.jianshu.com/p/1d42d2e6f4a5" target="_blank" rel="external">Android：dagger2让你爱不释手-重点概念讲解、融合篇</a></li><li><a href="http://www.jianshu.com/p/65737ac39c44" target="_blank" rel="external">Android：dagger2让你爱不释手-终结篇</a></li></ol></blockquote></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/eJQyHTv.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要：最近看了很多讲 &lt;code&gt;Dagger2&lt;/code&gt; 的文章，发现Dagger中很多基础的概念问题真的挺缥缈，很难理解透彻，其中有几篇确实写得不错，这里将他们总结一下，底部给上参考文章链接。&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Dagger" scheme="http://zengfanyu.top/categories/Dagger/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="Dagger" scheme="http://zengfanyu.top/tags/Dagger/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（六）View 层 Activity 的基类--- BaseMvpActivity 的封装</title>
    <link href="http://zengfanyu.top/2017/11/03/MVP6/"/>
    <id>http://zengfanyu.top/2017/11/03/MVP6/</id>
    <published>2017-11-03T12:37:15.000Z</published>
    <updated>2017-11-04T09:19:03.404Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/AzE3pww.png" alt=""></p><p><em>摘要：使用封装之后的 <code>MVP</code> 模式实现一个新的界面，也就是 <code>View</code> 层，那么就需要去实现 <code>IBaseView</code> 接口，可能还需要针对当前要实现的界面情况，在 <code>IBaseView</code> 的基础之上派生出一个新的接口 <code>IXxxView</code>,之前的 <code>SohuAlbumInfoActivity</code> 用于展示搜狐电视剧主要信息的 <code>View</code> 就是这种情况,由 <code>IBaseView</code> 派生了一个 <code>ISohuSerials</code> ,再由 <code>SohuAlbumInfoActivity</code> 去实现,那么随着需要展示的界面越来越多,它们坐着大量重复的工作,我们就要像个方法来简化这个过程了。</em></p><a id="more"></a><h2 id="回顾前几篇中-View-层的写法"><a href="#回顾前几篇中-View-层的写法" class="headerlink" title="回顾前几篇中 View 层的写法"></a>回顾前几篇中 View 层的写法</h2><p>根据<a href="http://zengfanyu.top/2017/10/22/MVP2/">MVP系列第二篇</a>当中的分析， <code>View</code> 层的职责如下：</p><ol><li>Loading 状态的展示隐藏</li><li>接收 Presenter 层处理后的数据</li><li>接收 Presenter 层处理后的错误信息</li><li>接收 Presenter 层处理后的服务器拒绝信息</li></ol><p>所以当就将着一些职责抽象成方法，放在 <code>IBaseView</code> 接口中，看看之前的的 <code>IBaseView</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by fanyuzeng on 2017/10/20.</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> : ZengFanyu</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 进行耗时操作时的用户友好交互接口，比如显示ProgressBar</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> isShow</span></div><div class="line"><span class="comment">     * <span class="doctag">@author</span> zfy</span></div><div class="line"><span class="comment">     * <span class="doctag">@created</span> at 2017/10/21/021 14:12</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showProgress</span><span class="params">(<span class="keyword">boolean</span> isShow)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 显示网络请求错的的接口</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> errorDesc</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> errorUrl</span></div><div class="line"><span class="comment">     * <span class="doctag">@author</span> zfy</span></div><div class="line"><span class="comment">     * <span class="doctag">@created</span> at 2017/10/21/021 14:14</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showOkHttpError</span><span class="params">(<span class="keyword">int</span> errorCode, String errorDesc, String errorUrl)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 现实服务器端请求错误的接口</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> errorDesc</span></div><div class="line"><span class="comment">     * <span class="doctag">@author</span> zfy</span></div><div class="line"><span class="comment">     * <span class="doctag">@created</span> at 2017/10/21/021 14:14</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showServerError</span><span class="params">(<span class="keyword">int</span> errorCode, String errorDesc)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 请求成功或者失败之后，对应UI做出改变的接口</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> isSuccess</span></div><div class="line"><span class="comment">     * <span class="doctag">@author</span> zfy</span></div><div class="line"><span class="comment">     * <span class="doctag">@created</span> at 2017/10/21/021 14:15</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showSuccess</span><span class="params">(<span class="keyword">boolean</span> isSuccess)</span></span>;</div></pre></td></tr></table></figure><p><code>View</code> 层每需要添加一个类， <code>View</code> 层的对象都需要在它的基础上去实现，比如说，在 <a href="http://zengfanyu.top/2017/10/25/MVP3/">MVP系列第三篇</a>中，需要对搜狐视频电视剧频道的主要信息做分页展示，当时是在 <code>IBaseView</code> 的基础上派生出了一个 <code>ISohuSerials</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示搜狐电视剧频道具体信息的接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISohuSerials</span> <span class="keyword">extends</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 展示搜狐视频API电视剧主要信息的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> videoList 处理好的VideoInfo集合</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAlbumMainInfo</span><span class="params">(List&lt;VideoInfo&gt; videoList)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后再使用 <code>SohuAlbumInfoActivity</code> 去实现这个接口，对 <code>IBaseView</code> 和 <code>ISohuSerials</code> 中的方法<strong>又做了一遍实现</strong>，但是这次的实现过程，跟<a href="http://zengfanyu.top/2017/10/22/MVP2/">MVP系列第二篇</a>中的 <code>LatestNewsTitleActivity</code> 实现的<strong>功能几乎一致</strong>，并且这个时候，我就意识到 <code>IBaseView</code> 接口<strong>设计的缺陷</strong>，我们在 <code>IBaseView</code> 的基础上派生出 <code>ISohuSerials</code> 接口 <code>ILatestNewsView</code> 接口，无非就是要展示不同类型的数据，那这个功能完全可以整合进 <code>IBaseView</code> 接口中，至于不同页面的数据类型不同，我们完全可以使用泛型来解决。</p><p>下面就来解决这两个问题：</p><ol><li>将展示 <code>Presenter</code> 层实例好的数据的方法，由派生接口整合至基类接口中，使用泛型解决数据类型不同的问题。</li><li>封装 <code>BaseMvpActivity</code>，实现共有逻辑，子类不重复处理 <code>View</code> 层基类接口（<code>IBaseView</code>）中的方法。</li></ol><h2 id="IBaseView-的重构"><a href="#IBaseView-的重构" class="headerlink" title="IBaseView 的重构"></a>IBaseView 的重构</h2><p>再回顾一下，之前要展示知乎日报的最新消息的标题内容，我写了一个 <code>ILatestNewsView</code> 接口，它长这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> inerface ILatestNewsView extends IBaseView &#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showLatestNewsTitle</span><span class="params">(List&lt;String&gt; titles)</span></span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure><p>后来又需要展示搜狐电视剧主要信息，于是写了一个 <code>ISohuSerials</code> ，：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISohuSerials</span> <span class="keyword">extends</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAlbumMainInfo</span><span class="params">(List&lt;VideoInfo&gt; videoList)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>当时怎么想的，要整个这接口出来 - - ！</p></blockquote><p>现在把他们都整合进 <code>IBaseView</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaseView</span>&lt;<span class="title">Data</span>&gt; </span>&#123;</div><div class="line">  </div><div class="line"><span class="comment">//省略代码</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * 显示presenter层处理好之后的数据</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> data data</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">showDataFromPresenter</span><span class="params">(Data data)</span></span>;</div></pre></td></tr></table></figure><p>此处添加了一个泛型 <code>Data</code> ，它就可以用于指代上面两个接口中的 <code>List&lt;String&gt; titles</code> 和 <code>List&lt;VideoInfo&gt; videoList</code> ，或者是其他的数据了类型，然后在实现接口的类中去指明参数的类型就可以动态的更改它的类型了。</p><h2 id="BaseMvpActivity-的封装"><a href="#BaseMvpActivity-的封装" class="headerlink" title="BaseMvpActivity 的封装"></a>BaseMvpActivity 的封装</h2><p>上述是对之前遗留问题的一个解决，从这儿开始才正式对基类 <code>BaseMvpActivity</code> 进行封装。</p><h3 id="ToolBar-的统一处理"><a href="#ToolBar-的统一处理" class="headerlink" title="ToolBar 的统一处理"></a>ToolBar 的统一处理</h3><p>首先， <code>Demo</code> 是在 <code>API 25</code> ，所以对 <code>ToolBar</code> 也要有良好的支持，所以首先是对 <code>ToolBar</code> 的封装，将 <code>ToolBar</code> 写到一个单独的 <code>Layout</code> 文件之中，方便其他文件引用。<code>top_action_bar</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;android.support.design.widget.AppBarLayout</div><div class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"?attr/actionBarSize"</span></div><div class="line">    android:theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</div><div class="line">&lt;!-- android:popupTheme 用于自定义弹出的菜单的样式--&gt;</div><div class="line">    &lt;android.support.v7.widget.Toolbar</div><div class="line">        android:id=<span class="string">"@+id/id_tool_bar"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        android:background=<span class="string">"?attr/colorPrimary"</span></div><div class="line">        android:popupTheme=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></div><div class="line">        app:titleTextColor=<span class="string">"#ffffff"</span></div><div class="line">        &gt;</div><div class="line">    &lt;/android.support.v7.widget.Toolbar&gt;</div><div class="line"></div><div class="line">&lt;/android.support.design.widget.AppBarLayout&gt;</div></pre></td></tr></table></figure><p>在 <code>BaseMvpActivity</code> 中的统一处理如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setSupportActionBar</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mToolbar != <span class="keyword">null</span>) &#123;</div><div class="line">        setSupportActionBar(mToolbar);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setActionBarIcon</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mToolbar != <span class="keyword">null</span>) &#123;</div><div class="line">        mToolbar.setNavigationIcon(resId);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setSupportArrowActionBar</span><span class="params">(<span class="keyword">boolean</span> isSupport)</span> </span>&#123;</div><div class="line">    getSupportActionBar().setDisplayHomeAsUpEnabled(isSupport);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样处理了之后，在子类当中，就可以直接调用上述方法，就可以使用 <code>ToolBar</code>了， 当然，对 <code>ToolBar</code> 的自定义需要另外去处理。</p><h3 id="BaseMvpActivity-的布局文件的处理"><a href="#BaseMvpActivity-的布局文件的处理" class="headerlink" title="BaseMvpActivity 的布局文件的处理"></a>BaseMvpActivity 的布局文件的处理</h3><p>由于 <code>BaseMvpActivity</code> 是要作为 <code>MVP</code> 模式下，所有 <code>View</code> 层的基类，所以它自己需要有布局文件，将 <code>IBaseView</code> 中的接口实现，<br>  <code>activity_base_mvp</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">              android:layout_width=<span class="string">"match_parent"</span></div><div class="line">              android:layout_height=<span class="string">"match_parent"</span></div><div class="line">              android:orientation=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    &lt;include</div><div class="line">        layout=<span class="string">"@layout/top_action_bar"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=<span class="string">"@+id/id_tip_content"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:gravity=<span class="string">"center_horizontal"</span></div><div class="line">        android:textSize=<span class="string">"16sp"</span></div><div class="line">        android:text=<span class="string">"tip"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;RelativeLayout</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">        &lt;FrameLayout</div><div class="line">            android:id=<span class="string">"@+id/id_content_container"</span></div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"match_parent"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;ProgressBar</div><div class="line">            android:id=<span class="string">"@+id/id_progress_bar"</span></div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_centerInParent=<span class="string">"true"</span></div><div class="line">            android:visibility=<span class="string">"gone"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure><ul><li>第 <code>7</code> 行的 <code>include</code> 文件，就是对上面 <code>top_action_bar</code> 的引用。</li><li>第 <code>10</code> 行的 <code>TextView</code> 这里用来实现 <code>IBaseView</code> 中 <code>showOkHttpError</code> 和 <code>showServerError</code>接口的。</li><li><p><font color="#ff0000">第 <code>22</code> 行的 <code>FrameLayout</code> <strong>很重要</strong>，看 <code>id</code> 就知道了，它是用于展示子类页面的方法的，<strong>直接将子类的布局文件给 <code>add</code> 进来</strong>。类似于：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">View contentView = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.activity_album_view, <span class="keyword">null</span>);</div><div class="line">FrameLayout.LayoutParams lp = <span class="keyword">new</span> FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);</div><div class="line">mContentContainer.addView(contentView, lp);</div></pre></td></tr></table></figure></li><li><p>第 <code>27</code> 行的 <code>ProgressBar</code> 就是用于实现 <code>IBaseView</code> 中 <code>showProgress</code> 的。</p></li></ul><h3 id="BaseMvpActivity-对-IBaseView-的实现"><a href="#BaseMvpActivity-对-IBaseView-的实现" class="headerlink" title="BaseMvpActivity 对 IBaseView 的实现"></a>BaseMvpActivity 对 IBaseView 的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/30 13:50</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseMvpActivity</span>&lt;<span class="title">Data</span>&gt; <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">IBaseView</span>&lt;<span class="title">Data</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BaseMvpActivity"</span>;</div><div class="line">    <span class="keyword">protected</span> Toolbar mToolbar;</div><div class="line">    <span class="keyword">protected</span> ProgressBar mProgressBar;</div><div class="line">    <span class="keyword">protected</span> TextView mTipView;</div><div class="line">    <span class="keyword">protected</span> FrameLayout mContentContainer;</div><div class="line">    <span class="keyword">protected</span> Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line">    <span class="keyword">protected</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_base_mvp);</div><div class="line">        mContext = <span class="keyword">this</span>;</div><div class="line">        mToolbar = bindViewId(R.id.id_tool_bar);</div><div class="line">        mProgressBar = bindViewId(R.id.id_progress_bar);</div><div class="line">        mTipView = bindViewId(R.id.id_tip_content);</div><div class="line">        mContentContainer = bindViewId(R.id.id_content_container);</div><div class="line">        beforeInitViews();</div><div class="line">        initViews();</div><div class="line">        afterInitViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">protected</span> &lt;T extends View&gt; <span class="function">T <span class="title">bindViewId</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (T) findViewById(resId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//统一处理ToolBar</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isShow)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (isShow) &#123;</div><div class="line">                    mProgressBar.setVisibility(View.VISIBLE);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mProgressBar.setVisibility(View.GONE);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showOkHttpError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc, <span class="keyword">final</span> String errorUrl)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mTipView.setText(<span class="string">"errorCode:"</span> + errorCode + <span class="string">",errorDesc:"</span> + errorDesc + <span class="string">",errorUrl:"</span> + errorUrl);    </div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showServerError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mTipView.setText(<span class="string">"errorCode:"</span> + errorCode + <span class="string">",errorDesc:"</span> + errorDesc);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSuccess</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isSuccess)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (isSuccess) &#123;</div><div class="line">                    mContentContainer.setBackgroundResource(android.R.color.white);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mContentContainer.setBackgroundResource(R.color.colorAccent);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">            <span class="keyword">case</span> android.R.id.home:</div><div class="line">                finish();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类实现,用于初始化控件</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类实现 在初始化控件之后进行的操作</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">afterInitViews</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类实现, 在初始化控件之前的操作</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">beforeInitViews</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>做了几点事情</p><ol><li>实现了 <code>IBaseView</code> 中的接口</li><li>对 <code>ToolBar</code> 做统一处理</li><li><code>findViewById</code>方法处理</li><li><code>Menu Item</code> 中返回按键的处理</li></ol><p>还有一个问题，似乎少了一个方法？就是在上一小节中，整合进 <code>IBaseView</code> 接口中的 <code>void showDataFromPresenter(Data data)</code> ,还没有实现。</p><p><br>由于这里的 <code>BaseMvpView</code> 是 <code>abstract</code> 的，所以它可以不实现，也实现不了，因为实现这方法需要知道泛型参数 <code>Data</code> 的具体类型，所以这个函数是留给子类去实现的。</p><p>上面三个抽象方法也很好理解，就是用于子类初始化操作的，并且都在基类初始化之后才执行，这一点很重要，因为子类中是需要将布局文件给 <code>add</code> 到基类布局当中的，所以基类的组件也必须提前初始化好。</p><p>下面就看看子类中是如何处理的。</p><h2 id="SohuAlbumInfoActivity-的重构"><a href="#SohuAlbumInfoActivity-的重构" class="headerlink" title="SohuAlbumInfoActivity 的重构"></a>SohuAlbumInfoActivity 的重构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu </span></div><div class="line"><span class="comment"> * Function:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SohuAlbumInfoActivity</span> <span class="keyword">extends</span> <span class="title">BaseMvpActivity</span>&lt;<span class="title">List</span>&lt;<span class="title">VideoInfo</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SohuAlbumInfoActivity"</span>;</div><div class="line">    <span class="keyword">private</span> PullLoadRecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> AlbumPresenter mAlbumPresenter;</div><div class="line">    <span class="keyword">private</span> BasePaginationParam mParam = <span class="keyword">new</span> BasePaginationParam(<span class="number">1</span>, <span class="number">10</span>);</div><div class="line">    <span class="keyword">private</span> VideoInfoAdapter mAdapter;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsFromRefresh = <span class="keyword">false</span>;</div><div class="line"><span class="comment">//    private View mContentView;</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeInitViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        mRecyclerView = <span class="keyword">new</span> PullLoadRecyclerView(<span class="keyword">this</span>);</div><div class="line">        FrameLayout.LayoutParams lp = <span class="keyword">new</span> FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);</div><div class="line">        mContentContainer.addView(mRecyclerView, lp); </div><div class="line"></div><div class="line"><span class="comment">//        View contentView = LayoutInflater.from(this).inflate(R.layout.activity_album_view, null);</span></div><div class="line"><span class="comment">//        FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);</span></div><div class="line"><span class="comment">//        mContentContainer.addView(contentView, lp);</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        setSupportActionBar(); <span class="comment">//表示当前页面支持ActionBar</span></div><div class="line">        setTitle(TAG);</div><div class="line">        setSupportArrowActionBar(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        mAlbumPresenter = <span class="keyword">new</span> AlbumPresenter(<span class="keyword">this</span>, Album.class);</div><div class="line"></div><div class="line">        mTipView.setText(TAG);</div><div class="line"></div><div class="line"><span class="comment">//        mRecyclerView = (PullLoadRecyclerView)mContentView.findViewById(R.id.id_recycler_view);</span></div><div class="line">        mRecyclerView.setLinearLayout();</div><div class="line">        mAdapter = <span class="keyword">new</span> VideoInfoAdapter(mContext);</div><div class="line">        mAlbumPresenter.requestServer(mParam);</div><div class="line"></div><div class="line">        mRecyclerView.setAdapter(mAdapter);</div><div class="line">        mRecyclerView.setOnPullLoadMoreListener(<span class="keyword">new</span> PullLoadRecyclerView.OnPullLoadMoreListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">                mIsFromRefresh = <span class="keyword">true</span>;</div><div class="line">                mParam.setPageIndex(<span class="number">1</span>);</div><div class="line">                mAlbumPresenter.refresh(mParam);</div><div class="line">                mRecyclerView.setRefreshCompleted();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadMore</span><span class="params">()</span> </span>&#123;</div><div class="line">                mAlbumPresenter.loadingNext();</div><div class="line">                mRecyclerView.setLoadMoreCompleted();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterInitViews</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDataFromPresenter</span><span class="params">(List&lt;VideoInfo&gt; albumList)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mIsFromRefresh) &#123;</div><div class="line">            mAdapter.cleanData();</div><div class="line">            mIsFromRefresh = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (albumList != <span class="keyword">null</span> &amp;&amp; albumList.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (VideoInfo videoInfo : albumList) &#123;</div><div class="line">                mAdapter.addData(videoInfo);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mAdapter.notifyDataSetChanged();</div><div class="line">                    mTipView.setText(TAG);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>15</code> 行的 <code>beforeInitViews</code> 方法，就是用于初始化子类的布局的，由于这个子类布局比较简单， 就是一个 <code>RecyclerView</code> ，所以可以直接用代码实现，然后给 <code>add</code> 进父类的 <code>mContentContainer</code>，或者用下面注释掉的，常规尝试来实现。</li><li>第 <code>5</code> 行，泛型参数为 <code>List&lt;VideoInfo&gt;</code> ,这个参数就是用于上面提到的，未实现的方法当中的，指定了泛型参数的类型。</li><li>第 <code>26</code> 行的 <code>initViews</code> 方法就用户初始化子类的 <code>View</code></li><li><code>showDataFromPresenter</code> 的写法和未封装之前是一样的。</li></ul><h2 id="LatestNewsTitleActivity-的重构"><a href="#LatestNewsTitleActivity-的重构" class="headerlink" title="LatestNewsTitleActivity 的重构"></a>LatestNewsTitleActivity 的重构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> ZengFanyu</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LatestNewsTitleActivity</span> <span class="keyword">extends</span> <span class="title">BaseMvpActivity</span>&lt;<span class="title">List</span>&lt;<span class="title">String</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> ListView mListView;</div><div class="line">    <span class="keyword">private</span> LatestNewsPresenter mBasePresenter;</div><div class="line">    LatestNewsAdapter mAdapter;</div><div class="line">    <span class="keyword">private</span> View mContentView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeInitViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        mContentView = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.activity_latest_news, <span class="keyword">null</span>);</div><div class="line">        FrameLayout.LayoutParams lp = <span class="keyword">new</span> FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);</div><div class="line">        mContentContainer.addView(mContentView, lp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        mBasePresenter = <span class="keyword">new</span> LatestNewsPresenter(<span class="keyword">this</span>, LatestNews.class);</div><div class="line">        mTipView.setText(LatestNews.class.getSimpleName());</div><div class="line">        mListView = (ListView) mContentView.findViewById(R.id.id_list_view);</div><div class="line">        Button btnLatestNews = (Button) mContentView.findViewById(R.id.id_btn_latest_news);</div><div class="line">        btnLatestNews.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                mBasePresenter.requestServer(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterInitViews</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDataFromPresenter</span><span class="params">(List&lt;String&gt; titles)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</div><div class="line">            mAdapter.clear();</div><div class="line">            mAdapter = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mAdapter = <span class="keyword">new</span> LatestNewsAdapter(titles, mContext);</div><div class="line">        mListView.setAdapter(mAdapter);</div><div class="line">        mAdapter.notifyDataSetChanged();</div><div class="line">        mTipView.setText(LatestNews.class.getSimpleName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>写法和上面一样，但是比起之前的代码量来说，已经少了很多了，并且对比这两个子类，都没有重复的实现方法，只专注于自己需要实现的逻辑。</p><p>还有其他的 <code>View</code> 层类和上述的实现过程类似，此处不再赘述。</p><blockquote><p>下一篇这个系列的最后一篇准备些关于 <code>MVP</code> 模式在开发中使用，随着项目的复杂程度的提高， <code>Presenter</code> 会越来越臃肿的问题的解决思路。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/AzE3pww.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要：使用封装之后的 &lt;code&gt;MVP&lt;/code&gt; 模式实现一个新的界面，也就是 &lt;code&gt;View&lt;/code&gt; 层，那么就需要去实现 &lt;code&gt;IBaseView&lt;/code&gt; 接口，可能还需要针对当前要实现的界面情况，在 &lt;code&gt;IBaseView&lt;/code&gt; 的基础之上派生出一个新的接口 &lt;code&gt;IXxxView&lt;/code&gt;,之前的 &lt;code&gt;SohuAlbumInfoActivity&lt;/code&gt; 用于展示搜狐电视剧主要信息的 &lt;code&gt;View&lt;/code&gt; 就是这种情况,由 &lt;code&gt;IBaseView&lt;/code&gt; 派生了一个 &lt;code&gt;ISohuSerials&lt;/code&gt; ,再由 &lt;code&gt;SohuAlbumInfoActivity&lt;/code&gt; 去实现,那么随着需要展示的界面越来越多,它们坐着大量重复的工作,我们就要像个方法来简化这个过程了。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
      <category term="okHttp" scheme="http://zengfanyu.top/tags/okHttp/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（五）封装之后的OkHttp工具在Model层的使用</title>
    <link href="http://zengfanyu.top/2017/11/02/MVP5/"/>
    <id>http://zengfanyu.top/2017/11/02/MVP5/</id>
    <published>2017-11-02T12:37:15.000Z</published>
    <updated>2017-11-04T09:09:06.424Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/Fadz300.png" alt=""></p><p><em>摘要:在<a href="http://zengfanyu.top/2017/10/27/MVP4/">上一篇</a>中对 <code>OkHttp</code> 进行了简单的封装,但是没有使用到这个系列当中的 <code>Demo</code> 里面,这一章就使用上一篇封装的 <code>OkHttp</code> 工具,替换掉之前 <code>Demo</code> 里面的 <code>Model</code> 层的网络请求.并且之前的部分接口方法都没有使用,比如说 <code>IBasePresenter</code> 接口中的 <code>HashMap&lt;String, String&gt; getParams()</code> 方法, <code>IBasePaginationPresenter</code> 中的 <code>boolean hasMoreData()</code> 方法，算是对上一篇的补充。</em></p><a id="more"></a><h2 id="Model-层原来的写法"><a href="#Model-层原来的写法" class="headerlink" title="Model 层原来的写法"></a>Model 层原来的写法</h2><p>拿分页数据获取的 <code>Model</code> 层举例,当时在 <code>SohuAlbumModel</code> 中是这样获取数据的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRequestToServer</span><span class="params">(Param param)</span> </span>&#123;</div><div class="line">    String validUrl = <span class="keyword">null</span>;</div><div class="line">    Log.d(TAG, <span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"has more data ?"</span> + mPaginationPresenter.hasMoreData());</div><div class="line">    <span class="keyword">if</span> (param != <span class="keyword">null</span> &amp;&amp; !TextUtils.isEmpty(url) &amp;&amp; mPaginationPresenter.hasMoreData()) &#123;</div><div class="line">        validUrl = getValidUrl(url, param);</div><div class="line">        Log.d(TAG, <span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"ValidUrl:"</span> + validUrl);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(validUrl)) &#123;</div><div class="line">        HttpUtils.executeByGet(validUrl, <span class="keyword">new</span> Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"&gt;&gt; onFailure &gt;&gt; "</span>);</div><div class="line">                e.printStackTrace();</div><div class="line">                mPaginationPresenter.okHttpError(Constants.URL_ERROR, e.getMessage(), url);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!response.isSuccessful()) &#123;</div><div class="line">                    Log.d(TAG, <span class="string">"&gt;&gt; onResponse &gt;&gt; "</span> + <span class="string">"Not successful"</span>);</div><div class="line">                    mPaginationPresenter.okHttpError(Constants.SERVER_ERROR, response.message(), url);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                String responseJson = response.body().string();</div><div class="line">                Log.d(TAG, <span class="string">"&gt;&gt; onResponse &gt;&gt; "</span> + <span class="string">"responseJson:"</span> + responseJson);</div><div class="line">                mPaginationPresenter.accessSuccess(responseJson);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Log.d(TAG, <span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"Valid Url is empty"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getValidUrl</span><span class="params">(String url, Param param)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> String.format(url, param.getPageIndex(), param.getPageSize());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>url</code> 当中的参数是直接在 <code>sendRequestToServer</code> 方法中传递进来的,这么一来会让 <code>Model</code> 层的职责变得不那么单一,因为 <code>Model</code> 层只应该负责数据相关的工作,此处的 <code>params</code> 传递进来,还需要进行一个 <code>url</code> 的拼接工作,所以在这里是可以优化的地方。</p><p>在看看<a href="http://zengfanyu.top/2017/10/27/MVP4/">上一篇</a>中的 <code>OkHttpManager</code> 类中请求服务器数据的核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 使用&#123;<span class="doctag">@link</span> OkHttpClient&#125;想服务器端请求数据的方法</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> method &#123;<span class="doctag">@link</span> Constants#HTTP_GET_METHOD&#125; Get方式,&#123;<span class="doctag">@link</span> Constants#HTTP_POST_METHOD&#125; Post方式</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> baseUrl baseUrl</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> paramsMap 请求url的参数,以键值对的形式存放</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> handler</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestServerData</span><span class="params">(<span class="keyword">int</span> method, String baseUrl, HashMap&lt;String, String&gt; paramsMap, DisposeDataHandler handler)</span> </span>&#123;</div><div class="line">    RequestParams requestParams = <span class="keyword">new</span> RequestParams(paramsMap);</div><div class="line">    Request request = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (method == Constants.HTTP_GET_METHOD) &#123;</div><div class="line">        request = CommonRequest.createGetRequest(baseUrl, requestParams);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method == Constants.HTTP_POST_METHOD) &#123;</div><div class="line">        request = CommonRequest.createPostRequest(baseUrl, requestParams);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</div><div class="line">        mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> CommonJsonCallback(handler));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用 <code>OkHttpManager</code> 来请求服务器获得数据，第二个参数 <code>HashMap&lt;String, String&gt; paramsMap</code> 就是已经在 <code>Presenter</code> 层中处理好的键值对参数，然后在 <code>CommonRequest.createGetRequest(baseUrl, requestParams);</code> 或者是 <code>CommonRequest.createPostRequest(baseUrl, requestParams)</code> 中就已经把完整的 <code>url</code> 拼接出来了。具体如何拼接，如何构造 <code>Request</code> 对象，<code>Model</code> 层完全不用关心，它只需要在请求成功或者是请求失败的回调接口中将数据回调到 <code>Presenter</code> 层去即可。</p><p>那么现在就开始重构 <code>Model</code> 层的方法。</p><h2 id="Model-层现在的写法"><a href="#Model-层现在的写法" class="headerlink" title="Model 层现在的写法"></a>Model 层现在的写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRequestToServer</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mPaginationPresenter.hasMoreData()) &#123;</div><div class="line">        OkHttpManager.getInstance().requestServerData(method, baseUrl, mPaginationPresenter.getParams(), <span class="keyword">new</span> DisposeDataHandler(<span class="keyword">new</span> DisposeDataListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object responseObj)</span> </span>&#123;</div><div class="line">                String responseJson = (String) responseObj;</div><div class="line">                Log.d(TAG, <span class="string">"&gt;&gt; onSuccess &gt;&gt; "</span> + responseJson);</div><div class="line">                mPaginationPresenter.accessSuccess(responseJson);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(OkHttpException exception)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"&gt;&gt; onFailure &gt;&gt; "</span> + exception.getErrorCode());</div><div class="line">                mPaginationPresenter.okHttpError(exception.getErrorCode(), exception.getErrorMsg(), url);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">null</span>));</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        Log.d(TAG,<span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"No more data!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>是不是简单了很多！和之前的方法相比较，有三处不同的地方：</p><ul><li>第 <code>2</code> 行的 <code>sendRequestToServer()</code> 方法中已经没有了 <code>param</code> 参数了。（那么参数从哪儿来呢？）</li><li>第 <code>3</code> 行多了一个 <code>hasMoreData()</code> 的方法，用于判断服务器端还有没有更多的数据。若没有，那就没有必要去请求了。它是在哪儿初始化的？</li><li>第 <code>4</code> 行的多了 <code>mPaginationPresenter.getParams()</code> ，它是在什么地方初始化的?</li><li>第 <code>4</code> 行的 <code>baseurl</code> 不是之前 <code>Model</code> 层的 <code>url</code></li></ul><p>下面就解释为什么可以这么操作。</p><h3 id="BasePaginationPresenter-的修改"><a href="#BasePaginationPresenter-的修改" class="headerlink" title="BasePaginationPresenter 的修改"></a>BasePaginationPresenter 的修改</h3><p>观察之前 <code>Model</code> 层的写法就知道，这个地方的参数，主要是从其中取出 <code>pageIndex</code> 和 <code>pageSize</code> ，用于拼接新的 <code>url</code> ，然后再请求数据，这儿不需要这个参数了， 那肯定就是有地方已经提供了这个参数了咯。 对，就是 <code>mPaginationPresenter.getParams()</code> 这个之前没有用过的方法，先回顾一下这个方法在哪儿定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBasePresenter</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line"><span class="comment">//省略部分代码</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 在Model层中调用，此方法用于获取Presenter层处理好的参数</span></div><div class="line"><span class="comment">     * <span class="doctag">@author</span> zfy</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 请求参数</span></div><div class="line"><span class="comment">     * <span class="doctag">@Created</span> at 2017/10/21/021 15:05</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">HashMap&lt;String, String&gt; <span class="title">getParams</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在<a href="http://zengfanyu.top/2017/10/22/MVP2/">第二篇</a>中，针对每一层封装的时候，这个接口就已经定义好了，只是一直没有使用上，在这儿就用上了。而 <code>BasePaginationPresenter</code> 类是实现这个街口的，并且这个 <code>Presenter</code> 是分页请求数据中 <code>Presenter</code> 层的基类，在<a href="http://zengfanyu.top/2017/10/25/MVP3/">第三篇</a>也提到过。下面看看 <code>BasePaginationPresenter</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>：2017/10/20</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePaginationPresenter</span>&lt;<span class="title">Param</span> <span class="keyword">extends</span> <span class="title">BasePaginationParam</span>, <span class="title">Data</span>&gt; <span class="keyword">implements</span> <span class="title">IBasePaginationPresenter</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line">  </div><div class="line"><span class="comment">//省略部分代码</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类实现，用于确认服务器端是否还有数据</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> true-还有数据 false-没有数据</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">serverHaveMoreData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类实现,用于返回请求服务器的url当中的参数</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> HashMap&lt;String,String&gt; url 中的 kay value 对</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> HashMap&lt;String, String&gt; <span class="title">getHttpRequestParams</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//省略部分代码</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, String&gt; <span class="title">getParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getHttpRequestParams();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> serverHaveMoreData();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>只贴出和之前不同的部分，</p><ul><li>多了一个 <code>serverHaveMoreData()</code> 抽象方法，子类去实现的，用于判断服务器还有没有更多的数据。</li><li>多了以个 <code>getHttpRequestParams()</code> 抽象方法，子类去实现，用于将参数填充到 <code>HashMap</code> 中，供 <code>Model</code> 层使用。</li></ul><p>接下里看看子类 <code>AlbumPresenter</code> 的实现：</p><h3 id="AlbumPresenter-的修改"><a href="#AlbumPresenter-的修改" class="headerlink" title="AlbumPresenter 的修改"></a>AlbumPresenter 的修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> * Function:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlbumPresenter</span> <span class="keyword">extends</span> <span class="title">BasePaginationPresenter</span>&lt;<span class="title">BasePaginationParam</span>, <span class="title">Album</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTotalCount=-<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AlbumPresenter</span><span class="params">(BaseMvpActivity baseListView, Class&lt;Album&gt; aClass)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(baseListView, aClass);</div><div class="line">        <span class="keyword">this</span>.mBaseListView = baseListView;</div><div class="line">        getModel().setRequestMethod(Constants.HTTP_GET_METHOD);</div><div class="line">        getModel().setRequestUrl(Constants.SOHU_SERIALS_URL_BASE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//省略代码</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serverResponse</span><span class="params">(Album album)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//省略代码</span></div><div class="line"></div><div class="line">        mTotalCount = album.getData().getCount();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">serverHaveMoreData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//此处pageIndex是从1开始的， 实际适用需要注意pageIndex的起始值</span></div><div class="line">        <span class="keyword">int</span> pageSize = mParam.getPageSize();</div><div class="line">        <span class="keyword">int</span> pageIndex = mParam.getPageIndex();</div><div class="line">        <span class="comment">//第一次需要返回true 才能进到 serverResponse 方法中去初始化 mTotalCount 值</span></div><div class="line">        <span class="keyword">return</span> mTotalCount == -<span class="number">1</span> || (pageIndex * pageSize) &lt;= mTotalCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, String&gt; <span class="title">getHttpRequestParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        HashMap&lt;String, String&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        paramsMap.put(<span class="string">"cid"</span>, <span class="string">"2"</span>);</div><div class="line">        paramsMap.put(<span class="string">"o"</span>, <span class="string">"1"</span>);</div><div class="line">        paramsMap.put(<span class="string">"plat"</span>, <span class="string">"6"</span>);</div><div class="line">        paramsMap.put(<span class="string">"poid"</span>, <span class="string">"1"</span>);</div><div class="line">        paramsMap.put(<span class="string">"api_key"</span>, <span class="string">"9854b2afa779e1a6bff1962447a09dbd"</span>);</div><div class="line">        paramsMap.put(<span class="string">"sver"</span>, <span class="string">"6.2.0"</span>);</div><div class="line">        paramsMap.put(<span class="string">"sysver"</span>, <span class="string">"4.4.2"</span>);</div><div class="line">        paramsMap.put(<span class="string">"partner"</span>, <span class="string">"47"</span>);</div><div class="line">        paramsMap.put(<span class="string">"page"</span>, String.valueOf(mParam.getPageIndex()));</div><div class="line">        paramsMap.put(<span class="string">"page_size"</span>, String.valueOf(mParam.getPageSize()));</div><div class="line">        <span class="keyword">return</span> paramsMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>与之前实现不同地方在于：</p><ul><li>构造方法当中设置的 <code>url</code> ，现在是 <code>baseUrl</code> ，后面的参数由 <code>getHttpRequestParams</code>方法生成，在<code>CommonRequest</code> 中生成完整 <code>url</code>。</li><li><code>serverResponse()</code> 方法中，对 <code>mTotalCount</code> 进行了初始化， 这个值就是记录服务器端一共有多少条数据的。</li><li><code>serverHaveMoreData()</code>拿当前已经加载的数据条数和 <code>mTotalCount</code> 进行对比，判断是否还有数据。</li><li><code>getHttpRequestParams()</code> 构造参数的 <code>HashMap</code> 。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>从这一章的从重构部分代码，很明显可以看到，各层之间的依赖关系：</p><ul><li>主要是替换网络请求的工具，那么就是只涉及到 <code>Model</code> 层的改动。</li><li>这里 <code>Presenter</code> 层改动了，其实是不需要改动的， 这里改动了的原因是，我把之前没有实现的功能补上了，并且将<code>sendRequestToServer()</code> 的参数去掉了导致的。</li><li>可以发现， <code>View</code> 层代码没有进行一点修改，也就是 <code>Activity</code> 并没有动。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Fadz300.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要:在&lt;a href=&quot;http://zengfanyu.top/2017/10/27/MVP4/&quot;&gt;上一篇&lt;/a&gt;中对 &lt;code&gt;OkHttp&lt;/code&gt; 进行了简单的封装,但是没有使用到这个系列当中的 &lt;code&gt;Demo&lt;/code&gt; 里面,这一章就使用上一篇封装的 &lt;code&gt;OkHttp&lt;/code&gt; 工具,替换掉之前 &lt;code&gt;Demo&lt;/code&gt; 里面的 &lt;code&gt;Model&lt;/code&gt; 层的网络请求.并且之前的部分接口方法都没有使用,比如说 &lt;code&gt;IBasePresenter&lt;/code&gt; 接口中的 &lt;code&gt;HashMap&amp;lt;String, String&amp;gt; getParams()&lt;/code&gt; 方法, &lt;code&gt;IBasePaginationPresenter&lt;/code&gt; 中的 &lt;code&gt;boolean hasMoreData()&lt;/code&gt; 方法，算是对上一篇的补充。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
      <category term="okHttp" scheme="http://zengfanyu.top/tags/okHttp/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（四）插曲-封装OkHttp</title>
    <link href="http://zengfanyu.top/2017/10/27/MVP4/"/>
    <id>http://zengfanyu.top/2017/10/27/MVP4/</id>
    <published>2017-10-27T14:37:15.000Z</published>
    <updated>2017-10-29T12:38:18.194Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/CdNDgLr.png" alt=""></p><p><em>摘要</em>：<em>前两篇中使用的网络请求工具是 <code>OkHttp</code> ，并没有经过封装，都是简单的使用 <code>get</code> 请求，并且将错误全部都抛到上层去解决了， 这无形之中增加了上层的编码复杂度，即使要抛向上层，起码也要给一个 <code>errorCode</code> 或者是 <code>errorMsg</code> 吧，并且可用性也不高，所以这边文章就针对 <code>OkHttp</code> 进行封装，然后将封装之后的工具使用到上一小结的 <code>Demo</code> 之中。</em><br><a id="more"></a></p><h2 id="官方给的例子"><a href="#官方给的例子" class="headerlink" title="官方给的例子"></a>官方给的例子</h2><ul><li><p>同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function">String <span class="title">run</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(url)</div><div class="line">      .build();</div><div class="line"></div><div class="line">  Response response = client.newCall(request).execute();</div><div class="line">  <span class="keyword">return</span> response.body().string();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>异步方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(url)</div><div class="line">        .build();</div><div class="line"></div><div class="line"> client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="封装思路"><a href="#封装思路" class="headerlink" title="封装思路"></a>封装思路</h2><p>结合上面异步方法，稍作分析，涉及到如下几个对象<font color="#FF8000"> <strong><code>OkHttpClient</code></strong> , <strong><code>Request</code></strong> , <strong><code>Call</code></strong>,<strong><code>Response</code></strong> </font>,其他的都一些方法的调用，而 <strong><code>Response</code></strong> 是返回结果的对象，所以我们的封装应该重点针对剩余三个对象来进行。</p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p><code>Request</code> 在 <code>Okhttp</code> 当中是抽象出来的一个请求对象，它封装了请求报文信息：请求的 <code>Url</code> 地址，请求的方法（<code>Get Post</code>等），各种请求头（<code>Content-Type Cookie</code>）以及可以选择的请求体，一般通过内部的 <code>Builder</code> 类来构建对象，建筑者设计模式。</p><p>那么我们这里就针对 <code>Post Get</code> 两种请求方式做封装，但是这里又涉及到一个问题，就是我们还需要参数，用于拼接请求 <code>Url</code> 的参数，举个栗子：</p><p>这是搜狐电视剧频道的 <code>API</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">http:<span class="comment">//api.tv.sohu.com/v4/search/channel.json%22%20+%20%22?cid=2&amp;o=1&amp;plat=6&amp;poid=1&amp;api_key=9854b2afa779e1a6bff1962447a09dbd&amp;%22%20+%20%22sver=6.2.0&amp;sysver=4.4.2&amp;partner=47&amp;page=1&amp;page_size=10</span></div></pre></td></tr></table></figure><p>这么看可能特别的麻烦，我们把它拆分一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String baseUrl=http:<span class="comment">//api.tv.sohu.com/v4/search/channel.json%22%20+%20%22</span></div></pre></td></tr></table></figure><p>然后剩下的都是参数了，以键值对的形式存在：</p><p><img src="https://i.imgur.com/YGahFXU.png" alt=""></p><p>这些参数拼接在 <code>baseUrl</code> 后面的顺序是没有要求的，<strong>不一定要按照上面的顺序来，只要每个参数都按照固定的格式出现就可以</strong>。</p><p>看上面的完整 <code>Url</code> 可以发现规律，在 <code>baseUrl</code> 后面有一个 <code>？</code>， 然后就就是 <code>key1=value1&amp;key2=value2&amp;key3=value3</code> 这种形式的</p><p>其实遵循 <code>RESTful API</code> 设计的接口，都会是这种形式，所以这里也利于我们进行封装了。而 <code>key-value</code> 这种形式，就特别适合使用 <code>Map</code> 结构来封装。</p><p>说这么多，上代码，首先是对参数进行封装：</p><font color="#FF8000"><strong>RequestParam</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 13:55</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>: 封装url中的参数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParams</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用&#123;<span class="doctag">@link</span> ConcurrentHashMap&#125;是为了保证线程安全</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;String, String&gt; urlParams = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestParams</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestParams</span><span class="params">(Map&lt;String, String&gt; source)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : source.entrySet()) &#123;</div><div class="line">            put(entry.getKey(), entry.getValue());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestParams</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">        put(key, value);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(key) &amp;&amp; !TextUtils.isEmpty(value)) &#123;</div><div class="line">            urlParams.put(key, value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ConcurrentHashMap&lt;String, String&gt; <span class="title">getUrlParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> urlParams;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这地方使用 <code>ConcurrentHashMap</code> 就是为了保证线程安全的，这个类使用的是<font color="#FF8000">锁分段技术</font>，不同于一般的同步方法或者是同步代码块，它只会锁住其中一个 <code>segment</code>，其他的 <code>segment</code> 仍然是可以访问的，所以他的效率会比 <code>synchronized</code> 高。</p><p>有了 <code>RequestParam</code> 之后，就可以使用它来拼接 <code>url</code>，有了 <code>url</code> 之后，就可以使用它来构建 <code>Request</code>对象了。</p><font color="#FF8000"><strong>CommonRequest</strong> </font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 2  * <span class="doctag">@author</span>: fanyuzeng</span></div><div class="line"><span class="comment"> 3  * <span class="doctag">@date</span>: 2017/10/27 14:08</span></div><div class="line"><span class="comment"> 4  * <span class="doctag">@desc</span>: response for build various kind of &#123;<span class="doctag">@link</span> okhttp3.Request&#125; include Get Post upload etc.</span></div><div class="line"><span class="comment"> 5  */</span></div><div class="line"> <span class="number">6</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonRequest</span> </span>&#123;</div><div class="line"> <span class="number">7</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"CommonRequest"</span>;</div><div class="line"> <span class="number">8</span>     <span class="comment">/**</span></div><div class="line"><span class="comment"> 9      * create a Get request</span></div><div class="line"><span class="comment">10      *</span></div><div class="line"><span class="comment">11      * <span class="doctag">@param</span> baseUrl base url</span></div><div class="line"><span class="comment">12      * <span class="doctag">@param</span> params see &#123;<span class="doctag">@link</span> RequestParams&#125;</span></div><div class="line"><span class="comment">13      * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Request&#125;</span></div><div class="line"><span class="comment">14      * <span class="doctag">@created</span> at 2017/10/27 14:39</span></div><div class="line"><span class="comment">15      */</span></div><div class="line"><span class="number">16</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Request <span class="title">createGetRequest</span><span class="params">(@NonNull String baseUrl, @Nullable RequestParams params)</span> </span>&#123;</div><div class="line"><span class="number">17</span>         StringBuilder urlBuilder = <span class="keyword">new</span> StringBuilder(baseUrl).append(<span class="string">"?"</span>);</div><div class="line"><span class="number">18</span>         <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">19</span>             <span class="comment">//将请求参数合并进url中</span></div><div class="line"><span class="number">20</span>             <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.getUrlParams().entrySet()) &#123;</div><div class="line"><span class="number">21</span>                 urlBuilder.append(entry.getKey()).append(<span class="string">"="</span>).append(entry.getValue()).append(<span class="string">"&amp;"</span>);</div><div class="line"><span class="number">22</span>             &#125;</div><div class="line"><span class="number">23</span> </div><div class="line"><span class="number">24</span>             Log.d(TAG,<span class="string">"&gt;&gt; createGetRequest &gt;&gt; "</span> + urlBuilder.toString());</div><div class="line"><span class="number">25</span>         &#125;</div><div class="line"><span class="number">26</span>         <span class="keyword">return</span> <span class="keyword">new</span> Request.Builder().get().url(urlBuilder.substring(<span class="number">0</span>, urlBuilder.length() - <span class="number">1</span>)).build();</div><div class="line"><span class="number">27</span>     &#125;</div><div class="line"><span class="number">28</span> </div><div class="line"><span class="number">29</span>     <span class="comment">/**</span></div><div class="line"><span class="comment">30      * create a post request</span></div><div class="line"><span class="comment">31      *</span></div><div class="line"><span class="comment">32      * <span class="doctag">@param</span> baseUrl base url</span></div><div class="line"><span class="comment">33      * <span class="doctag">@param</span> params see &#123;<span class="doctag">@link</span> RequestParams&#125;</span></div><div class="line"><span class="comment">34      * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Request&#125;</span></div><div class="line"><span class="comment">35      * <span class="doctag">@created</span> at 2017/10/27 14:39</span></div><div class="line"><span class="comment">36      */</span></div><div class="line"><span class="number">37</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Request <span class="title">createPostRequest</span><span class="params">(@NonNull String baseUrl, @NonNull RequestParams params)</span> </span>&#123;</div><div class="line"><span class="number">38</span>         FormBody.Builder mFormBodyBuilder = <span class="keyword">new</span> FormBody.Builder();</div><div class="line"><span class="number">39</span>         <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.getUrlParams().entrySet()) &#123;</div><div class="line"><span class="number">40</span>             mFormBodyBuilder.add(entry.getKey(), entry.getValue());</div><div class="line"><span class="number">41</span>         &#125;</div><div class="line"><span class="number">42</span>         FormBody formBody = mFormBodyBuilder.build();</div><div class="line"><span class="number">43</span>         <span class="keyword">return</span> <span class="keyword">new</span> Request.Builder().post(formBody).url(baseUrl).build();</div><div class="line"><span class="number">44</span>     &#125;</div><div class="line"><span class="number">45</span> </div><div class="line"><span class="number">46</span> &#125;</div></pre></td></tr></table></figure><p>第 <code>16</code> 行的 <code>createGetRequest</code> 方法是用于创建一个 <code>Get</code> 请求，主要就是使用 <code>StringBuilder</code> 进行 <code>Url</code> 的拼接，第 <code>37</code> 行的 <code>createPostRequest</code> 方法是用于创建一个 <code>Post</code> 请求的。 <code>Post</code> 请求是先创建 <code>FormBody</code> ，然后和 <code>baseUrl</code> 一个构造 <code>Request</code> 。</p><p>封装到这里， <code>Request</code> 就算是封装完了， 当然这里只封装了 <code>Post Get</code> ，也可以继续封装文件上传和文件下载的Request。</p><h3 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h3><p><code>Call</code> 代表的是一个实际的 <code>HTTP</code> 请求，它是链接 <code>Request</code> 和 <code>Response</code> 的桥梁，通过 <code>Request</code> 对象的 <code>newCall</code> 方法可以得到一个 <code>Call</code> 对象，既支持同步获取数据，也支持异步，在上面官方例子里，也可以看出来，在异步回调中，当获取到数据，会将 <code>Response</code> 对象传入 <code>Callback</code> 的 <code>onSuccess</code> 方法中，如果请求没有成功，就会调用 <code>onFailure</code> 方法（<code>Response</code> 下面说）。那么看看  <code>Callback</code> 是什么。</p><p>先看看官方的 <code>Callback</code> 是什么 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span></span>;</div><div class="line"></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对，把注释删除了之后，其实就是两个接口，简单的理解成，一个是请求成功时的回调，一个是请求失败时的回调。</p><p>那么对这一层的<strong>封装思路</strong>是这样子的：</p><p>一般来说，在上层，我们是需要去处理上面两个回调的，在 <code>onFailure</code> 中，请求失败，应该做什么操作，在 <code>onResponse</code> 中，<code>HTTP</code> 返回的状态码在 <code>[200,300）</code>之间应该有什么操作，在其他区间又应该有什么操作。<font color="#FF8000">那么在这里，我们就创建一个类，去实现这个接口，将基本的处理都在这个类里写好，出错误了，就拿到 <code>erroeCode errorMsg</code> 回调给上层，正确的返回信息，就直接回调给上一层</font>。</p><p>那么这里就涉及到我们自定义的一个 <code>Exception</code> 和 <code>Listener</code> 以及实现了 <code>Callback</code> 接口的 <code>CommonCallback</code> 类。</p><font color="#FF8000"><strong>OkHttpException</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 13:44</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mErrorCode;</div><div class="line">    <span class="keyword">private</span> String mErrorMsg;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OkHttpException</span><span class="params">(<span class="keyword">int</span> errorCode, String errorMsg)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mErrorCode = errorCode;</div><div class="line">        <span class="keyword">this</span>.mErrorMsg = errorMsg;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mErrorCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorMsg</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mErrorMsg;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><font color="#FF8000"><strong>DisposeDataListener</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 13:49</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisposeDataListener</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 请求服务器数据成功时回调的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> responseObj 需要回调到上层的请求结果</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object responseObj)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 请求服务器失败时候的回调方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> exception 需要回调到上层的错误反馈</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(OkHttpException exception)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再将这个 <code>Listener</code> 用<font color="#FF8000">代理设计模式</font>再封装一层</p><font color="#FF8000"><strong>DisposeDataHandler</strong></font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 13:52</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>: 代理模式,使用DisposeDataHandler 代理 DisposeDataListener的操作</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisposeDataHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> DisposeDataListener mListener;</div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; mClass;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DisposeDataHandler</span><span class="params">(DisposeDataListener listener)</span> </span>&#123;</div><div class="line">        mListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DisposeDataHandler</span><span class="params">(DisposeDataListener listener, Class&lt;?&gt; aClass)</span> </span>&#123;</div><div class="line">        mListener = listener;</div><div class="line">        mClass = aClass;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object responseObj)</span> </span>&#123;</div><div class="line">        mListener.onSuccess(responseObj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(OkHttpException exception)</span> </span>&#123;</div><div class="line">        mListener.onFailure(exception);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; getClassType() &#123;</div><div class="line">        <span class="keyword">return</span> mClass;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>此处用代理模式，主要是为了优雅（装X）的处理 <code>Class&lt;?&gt;</code> 这个对象，这是用于映射的类型，在调用 <code>Listener</code> 的回到方法之后做判断这个对象是否存在，是，则再映射在返回，否，直接返回。<br><br>然后将三面三个类聚合到一起<br><br><font color="#FF8000"><strong>CommonJsonCallback</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 14:41</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonJsonCallback</span> <span class="keyword">implements</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"CommonJsonCallback"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG_RESULT_EMPTY = <span class="string">"request could not be ececuted"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG_JSON_EMPTY = <span class="string">"json is empty or null"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG_RETURN_CODE = <span class="string">"http return code is not [200,300)"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NETWORK_ERROR = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> JSON_ERROR = -<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mDeliveryHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Gson mGson = <span class="keyword">new</span> Gson();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DisposeDataHandler mDisposeDataHandler;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonJsonCallback</span><span class="params">(DisposeDataHandler dataHandler)</span> </span>&#123;</div><div class="line">        mDisposeDataHandler = dataHandler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(@NonNull Call call, @NonNull <span class="keyword">final</span> IOException e)</span> </span>&#123;</div><div class="line">        mDeliveryHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mDisposeDataHandler.onFailure(<span class="keyword">new</span> OkHttpException(NETWORK_ERROR, MSG_RESULT_EMPTY + e.getMessage()));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(@NonNull Call call, @NonNull <span class="keyword">final</span> Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!response.isSuccessful()) &#123;</div><div class="line">            mDeliveryHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mDisposeDataHandler.onFailure(<span class="keyword">new</span> OkHttpException(NETWORK_ERROR, MSG_RETURN_CODE + response.message()));</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> String resultJson = response.body().string();</div><div class="line">        mDeliveryHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                handleResponse(resultJson);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(String resultJson)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(resultJson)) &#123;</div><div class="line">            mDisposeDataHandler.onFailure(<span class="keyword">new</span> OkHttpException(NETWORK_ERROR, MSG_JSON_EMPTY));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mDisposeDataHandler.getClassType() == <span class="keyword">null</span>) &#123;</div><div class="line">            mDisposeDataHandler.onSuccess(resultJson);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Object mappedDataType = mGson.fromJson(resultJson, mDisposeDataHandler.getClassType());</div><div class="line">            <span class="keyword">if</span> (mappedDataType == <span class="keyword">null</span>) &#123;</div><div class="line">                mDisposeDataHandler.onFailure(<span class="keyword">new</span> OkHttpException(JSON_ERROR, MSG_JSON_EMPTY));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mDisposeDataHandler.onSuccess(mappedDataType);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>自我感觉用代理之后，处理对象都是 <code>DisposeHandler</code> ，不会在看到 <code>Listener</code> <code>Class&lt;?&gt;</code> ,适应起来方便些了。</p><p>要注意一点是，在 <code>onResponse</code> 方法中，还是在子线程中的，要及时切换线程。</p><p>到这里，就对 <code>Call</code> 这个对象封装完成了。</p><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p><code>Response</code> 类封装了响应报文信息：状态吗（<code>200</code>、<code>404</code> 等）、响应头（<code>Content-Type</code>、<code>Server</code> 等）以及可选的响应体。可以通过 <code>Call</code> 对象的 <code>execute()</code> 方法获得 <code>Response</code> 对象，异步回调执行 <code>Callback</code> 对象的 <code>onResponse</code> 方法时也可以获取 <code>Response</code> 对象。</p><p>这东西人家已经给我们封装好了， 需要什么直接去拿就行， 也不需要在封装。</p><h3 id="OkHttpClient"><a href="#OkHttpClient" class="headerlink" title="OkHttpClient"></a>OkHttpClient</h3><p><a href="http://square.github.io/okhttp/3.x/okhttp/" target="_blank" rel="external">官方文档</a>有这么一句话：</p><blockquote><p>OkHttp performs best when you create a single OkHttpClient instance and reuse it for all of your HTTP calls. This is because each client holds its own connection pool and thread pools. Reusing connections and threads reduces latency and saves memory. Conversely, creating a client for each request wastes resources on idle pools.</p></blockquote><p>翻译一下：当你使用一个全局的 <code>OkHttpClient</code> ，并且重用它发起 <code>HTTP</code> 请求的时候，<code>OkHttp</code> 的能够发挥最 <code>NB</code> 的性能，因为每一个客户端都持有它的连接池和线程池，如果这俩东西可以重用的话，那么就能减少潜在的因素，并且节省内存，相反的，如果为每一个客户端的每一个请求都创建一个 <code>OkHttpClient</code> ，那么就会浪费空闲的连接池和线程池中的资源。</p><p>叽叽歪歪这么多，就是说用 <code>OkHttpClient</code> 的时候要用<font color="#ff8000"><strong>单例模式</strong></font>。</p><p>刚开始我是这么设计的：</p><font color="#FF8000"><strong>CommonokHttpClient</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 15:21</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Deprecated</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonOkHttpClient</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIME_OUT = <span class="number">30</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient sOkHttpClient;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line">        builder.hostnameVerifier(<span class="keyword">new</span> HostnameVerifier() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        builder.connectTimeout(TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        builder.readTimeout(TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        builder.writeTimeout(TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        <span class="comment">//允许重定向</span></div><div class="line">        builder.followRedirects(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> 2017/10/27 https</span></div><div class="line">        sOkHttpClient = builder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 请求服务器数据的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> request Use &#123;<span class="doctag">@link</span> com.project.fanyuzeng.mvpdemo.utils.okhttp.request.CommonRequest&#125; to build</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> handler see &#123;<span class="doctag">@link</span> DisposeDataHandler&#125;  proxy class</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestServerData</span><span class="params">(Request request, DisposeDataHandler handler)</span> </span>&#123;</div><div class="line">        sOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> CommonJsonCallback(handler));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>恩，静态代码块中初始化实例化 <code>OkHttpClient</code>，我认为饿汉模式没有本质的区别， 但是这种方式比饿汗模式的初始化时间更早。</p><blockquote><p>好吧 ，我承认我懒，不想在整个单例类出来。。</p></blockquote><p>这样写，也没什么问题，但是外界在使用的使用，比较麻烦</p><ol><li>创建<code>RequestParams</code>，涉及到 <code>HashMap</code> 的好多 <code>put</code> 操作</li><li>用 <code>RequestParam</code>  去初始化 <code>CommonRequest</code></li><li>在上层根据请求方式去创建对应的 <code>Request</code></li><li>再实例化一个<code>DisposeHandler</code> </li></ol><p>所以只好接着封装吧，分析上面 <code>4</code> 个步骤，其中步骤 <code>1</code> 那是不能再简化了的，因为具体的请求参数肯定是要从外界传进来的，这里涉及到的 <code>HashMap</code> 以及它的 <code>put</code> 操作是不可避免的。步骤 <code>2</code> 和步骤 <code>3</code> 完全是可以封装一下的，步骤 <code>4</code> 也是需要从外外界回调的方法，类似于点击监听的 <code>onClick</code> 方法回调。</p><p>所以把 <code>CommonOkHttpClient</code> 给 <code>Deprecated</code> 掉，重新来一个</p><font color="#FF8000"><strong>OkHttpManager</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>:fanyuzeng</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>: 2017/10/27 17:57</span></div><div class="line"><span class="comment"> * <span class="doctag">@desc</span>:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> OkHttpManager sManager;</div><div class="line">    <span class="keyword">private</span>  OkHttpClient mOkHttpClient;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">OkHttpManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line">        builder.hostnameVerifier(<span class="keyword">new</span> HostnameVerifier() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        builder.connectTimeout(Constants.HTTP_TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        builder.readTimeout(Constants.HTTP_TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        builder.writeTimeout(Constants.HTTP_TIME_OUT, TimeUnit.SECONDS);</div><div class="line">        <span class="comment">//允许重定向</span></div><div class="line">        builder.followRedirects(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> 2017/10/27 https</span></div><div class="line">        mOkHttpClient = builder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OkHttpManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sManager == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (OkHttpManager.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sManager == <span class="keyword">null</span>) &#123;</div><div class="line">                    sManager = <span class="keyword">new</span> OkHttpManager();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用&#123;<span class="doctag">@link</span> OkHttpClient&#125;想服务器端请求数据的方法</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> method &#123;<span class="doctag">@link</span> Constants#HTTP_GET_METHOD&#125; Get方式,&#123;<span class="doctag">@link</span> Constants#HTTP_POST_METHOD&#125; Post方式</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> baseUrl baseUrl</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> paramsMap 请求url的参数,以键值对的形式存放</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestServerData</span><span class="params">(<span class="keyword">int</span> method, String baseUrl, HashMap&lt;String, String&gt; paramsMap, DisposeDataHandler handler)</span> </span>&#123;</div><div class="line">        RequestParams requestParams = <span class="keyword">new</span> RequestParams(paramsMap);</div><div class="line">        Request request = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (method == Constants.HTTP_GET_METHOD) &#123;</div><div class="line">            request = CommonRequest.createGetRequest(baseUrl, requestParams);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method == Constants.HTTP_POST_METHOD) &#123;</div><div class="line">            request = CommonRequest.createPostRequest(baseUrl, requestParams);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</div><div class="line">            mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> CommonJsonCallback(handler));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>好吧，还是用双重锁模式的单例比较放心 。</p></blockquote><p>到此就封装完了，下面简单的使用一下。</p><h2 id="使用姿势"><a href="#使用姿势" class="headerlink" title="使用姿势"></a>使用姿势</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span>  OkHttpManager.getInstance().requestServerData(method, url, mPaginationPresenter.getParams(), <span class="keyword">new</span> DisposeDataHandler(<span class="keyword">new</span> DisposeDataListener() &#123;</div><div class="line"> <span class="number">2</span>             <span class="meta">@Override</span></div><div class="line"> <span class="number">3</span>             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object responseObj)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>                 String responseJson = (String) responseObj;</div><div class="line"> <span class="number">5</span>                 Log.d(TAG, <span class="string">"&gt;&gt; onSuccess &gt;&gt; "</span> + responseJson);</div><div class="line"> <span class="number">6</span>                 mPaginationPresenter.accessSuccess(responseJson);</div><div class="line"> <span class="number">7</span>             &#125;</div><div class="line"> <span class="number">8</span>             <span class="meta">@Override</span></div><div class="line"> <span class="number">9</span>             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(OkHttpException exception)</span> </span>&#123;</div><div class="line"><span class="number">10</span>                 Log.d(TAG, <span class="string">"&gt;&gt; onFailure &gt;&gt; "</span> + exception.getErrorCode());</div><div class="line"><span class="number">11</span>                 mPaginationPresenter.okHttpError(exception.getErrorCode(), exception.getErrorMsg(), url);</div><div class="line"><span class="number">12</span>             &#125;</div><div class="line"><span class="number">13</span>         &#125;,<span class="keyword">null</span>));</div></pre></td></tr></table></figure><ul><li>没有将 <code>Json</code> 数据映射成实体类， 所以在 <code>13</code> 行构造 <code>DisposeDataHandler</code> 的时候，第二个 类参数传的是 <code>null</code>。</li><li>这个例子是结合上一篇请求分页数据来用的，所以这里直接将 <code>Json</code> 数据抛给 <code>Presenter</code> 层，让它去处理。</li><li>第 <code>1</code> 行的 <code>mPaginationPresenter.getParams()</code> 就是拿 <code>url</code> 中的参数。</li></ul><p>由于篇幅的限制，这一篇先到这里，下一篇再把这个封装的 <code>OkHttp</code> 工具用于 <code>MVP</code> 模式的 <code>Demo</code> 当中</p><p>最后，贴个 <code>AS</code> 中封装之后工具的结构图。</p><p><img src="https://i.imgur.com/OMByMTy.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/CdNDgLr.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要&lt;/em&gt;：&lt;em&gt;前两篇中使用的网络请求工具是 &lt;code&gt;OkHttp&lt;/code&gt; ，并没有经过封装，都是简单的使用 &lt;code&gt;get&lt;/code&gt; 请求，并且将错误全部都抛到上层去解决了， 这无形之中增加了上层的编码复杂度，即使要抛向上层，起码也要给一个 &lt;code&gt;errorCode&lt;/code&gt; 或者是 &lt;code&gt;errorMsg&lt;/code&gt; 吧，并且可用性也不高，所以这边文章就针对 &lt;code&gt;OkHttp&lt;/code&gt; 进行封装，然后将封装之后的工具使用到上一小结的 &lt;code&gt;Demo&lt;/code&gt; 之中。&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
      <category term="okHttp" scheme="http://zengfanyu.top/tags/okHttp/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（三）基于分页列表的封装</title>
    <link href="http://zengfanyu.top/2017/10/25/MVP3/"/>
    <id>http://zengfanyu.top/2017/10/25/MVP3/</id>
    <published>2017-10-25T12:37:15.000Z</published>
    <updated>2017-10-28T10:30:28.153Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/HCStIDG.png" alt=""></p><p>摘要：在<a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>中对MVP模式进行了封装，然后通过封装之后的类，实现了一个网络请求，但是请求到网络数据之后，就直接展示到了 <code>View</code> 层，并没有其他的操作，然而我们在开发过程中， 经常会用到分页加载，一般在滑动控件向上滚动，加载更多事件触发是调用，并且这个过程设计到两个参数，一个是 <code>PageIndex</code> ：页码；一个是 <code>PageSize</code> 一页数据的大小， 分页加载就是通过在某一具体事件触发时，调用修改这两个或者一个参数，重新请求网络，从而拿到下一页的数据，这边文章还是基于MVP模式，对分页数据的请求进行封装。<br><a id="more"></a></p><p> <code>presenter</code> 层作为 <code>MVP</code> 模式的桥梁， 那就先从这一层开始说起吧。</p><h2 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h2><p><a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>中对 <code>Presenter</code> 层的公共方法进行了抽取并且封装成了一个接口 <code>IBasePresenter</code> ，那么现在我们需要<strong>实现分页加载还有刷新</strong>的功能，那么在 <code>IBasePresenter</code> 接口的基础之上，在对其封装一个接口 <code>IBasePeginationPresenter</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by fanyuzeng on 2017/10/23.</span></div><div class="line"><span class="comment"> * Function:在IBasePresenter的基础上扩展的接口，适用于分页加载的情况</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBasePaginationPresenter</span>&lt;<span class="title">Param</span>&gt; <span class="keyword">extends</span> <span class="title">IBasePresenter</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 刷新数据的接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> param 访问服务器的参数</span></div><div class="line"><span class="comment"> * <span class="doctag">@created</span> at 2017/10/23 20:07</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">(Param param)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 加载更多的接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@created</span> at 2017/10/23 20:07</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadingNext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 用于判断服务器端是否还有更多的数据</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> true -还有更多数据 - false 没有更多的数据</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasMoreData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>也是一个泛型的接口，增加的三个方法 ：</p><ol><li><code>refresh(Param param)</code> 在 <code>View</code> 层调用，用于通知 <code>Model</code> 层刷新数据</li><li><code>loadingNext()</code> 在 <code>View</code> 层调用，用于通知 <code>Model</code> 层加载下一页数据</li><li><code>hasMoreData()</code> 在 <code>Model</code> 层请求网络数据前调用做判断，是否还有下一页数据</li></ol><p>有了针对分页刷新的接口之后，还需要有一个实现它的基类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu </span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span>：2017/10/20 </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePaginationPresenter</span>&lt;<span class="title">Param</span> <span class="keyword">extends</span> <span class="title">BasePeginationParam</span>, <span class="title">Data</span>&gt; <span class="keyword">implements</span> <span class="title">IBasePaginationPresenter</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BasePaginationPresenter"</span>;</div><div class="line">    <span class="keyword">private</span> IBaseModel mBaseModel;</div><div class="line">    <span class="keyword">private</span> IBaseView mBaseListView;</div><div class="line">    <span class="keyword">private</span> Param mParam;</div><div class="line">    <span class="keyword">private</span> Class&lt;Data&gt; mClazz;</div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mHasMoreData=<span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子类中调用，用于传递服务器返回的，处理好的结果</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> data View层需要的数据类型</span></div><div class="line"><span class="comment">     * <span class="doctag">@created</span> at 2017/10/23 20:10</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">serverResponse</span><span class="params">(Data data)</span></span>;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * 子类中调用，用于确认服务器端是否还有数据</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * <span class="doctag">@return</span> true-还有数据 false-没有数据</span></div><div class="line"><span class="comment">         */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">serverHaveMoreData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasePaginationPresenter</span><span class="params">(IBaseView baseListView, Class&lt;Data&gt; Clazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mBaseListView = baseListView;</div><div class="line">        mClazz = Clazz;</div><div class="line">        mBaseModel = <span class="keyword">new</span> SohuAlbumModel(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(Param param)</span> </span>&#123;</div><div class="line">        requestServer(param);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadingNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mParam != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">int</span> pageIndex = mParam.getPageIndex();</div><div class="line">            mParam.setPageIndex(pageIndex + <span class="number">1</span>);</div><div class="line">            requestServer(mParam);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestServer</span><span class="params">(@Nullable Param param)</span> </span>&#123;</div><div class="line">        mBaseListView.showProgress(<span class="keyword">true</span>);</div><div class="line">        mParam = param;</div><div class="line">        Log.d(TAG, <span class="string">"&gt;&gt; requestServer &gt;&gt; "</span>);</div><div class="line">        getModel().sendRequestToServer(param);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessSuccess</span><span class="params">(String responseJson)</span> </span>&#123;</div><div class="line">        mBaseListView.showProgress(<span class="keyword">false</span>);</div><div class="line">        Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">        serverResponse(gson.fromJson(responseJson, mClazz));</div><div class="line">        mBaseListView.showSuccess(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        mBaseModel.cancelRequest();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">okHttpError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc, <span class="keyword">final</span> String errorUrl)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mBaseListView.showOkHttpError(errorCode, errorDesc, errorUrl);</div><div class="line">                mBaseListView.showProgress(<span class="keyword">false</span>);</div><div class="line">                mBaseListView.showSuccess(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBaseModel <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBaseModel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, String&gt; <span class="title">getParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ServerHaveMoreData();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在类申明时，可以看到 <code>Param extends BasePeginationParam</code> ，这里的 <code>BasePeginationParam</code>主要是封装了<strong>摘要</strong>中提到的 <code>PageIndex</code> 和 <code>PageSize</code> 两个参数，以及他们的 <code>Getter Seeter</code> 方法。</li><li>重点看 <code>IBasePeginationPresenter</code> 中新增加的三个方法，<code>refresh(Param param)</code> 会重新调用一次 <code>requestServer(Param param)</code> （<em>此方法在<a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>也提过了，就是通知 <code>Model</code> 层获取数据</em>）；</li><li><code>loadingNext()</code> ，加载下一页数据的方法，就是将参数中的 <code>PageIndex + 1</code> 之后，重新调用 <code>requestServer(Param param)</code> 方法。此处只改变了页码，如果需要改变请求数据的条数，也是相应的在 <code>loadingNext()</code> 中修改 <code>PageSize</code> 的值。</li><li><code>hasMoreData()</code> ,这里返回抽象方法 <code>serverhaveMoreData()</code> ，这个方法是在子类中实现的，子类解析了数据之后，判断服务器是否还有数据返回。</li></ul><p>然后有需要实现分页功能的 <code>Presenter</code> 就可以直接继承 <code>BasePaginationPresenter</code> 。</p><h2 id="Model-层"><a href="#Model-层" class="headerlink" title="Model 层"></a>Model 层</h2><p>由于 <code>Model</code> 层的职责比较单一，<strong>就是向数据源请求数据，并且返回给 <code>Presenter</code> 层</strong>，所以此处不需要额外封装接口或者是基类，只需要重新实现<a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>中提到的 <code>IBaseModel</code> 接口即可。</p><h2 id="View-层"><a href="#View-层" class="headerlink" title="View 层"></a>View 层</h2><p>此处和请求一次数据相比较， <code>View</code> 层就是需要在两个事件触发的时候，<strong>重新设置参数</strong>通知 <code>Presenter</code> 去请求数据，然后再展示出来。这两个事件分别是：<strong>上拉到底时加载更多、下拉时刷新数据</strong>（当然可以别的）。</p><h2 id="针对上一小节中封装类的具体实现"><a href="#针对上一小节中封装类的具体实现" class="headerlink" title="针对上一小节中封装类的具体实现"></a>针对上一小节中封装类的具体实现</h2><h3 id="View-层的具体实现"><a href="#View-层的具体实现" class="headerlink" title="View 层的具体实现"></a>View 层的具体实现</h3><p>主要是展示电视剧的主要信息，那么需要提供一个接口方法，给 <code>Presenter</code> 层调用，展示处理好的 <code>JavaBean</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 展示搜狐电视剧频道具体信息的接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISohuSerials</span> <span class="keyword">extends</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 展示搜狐视频API电视剧主要信息的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> videoList 处理好的VideoInfo集合</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAlbumMainInfo</span><span class="params">(List&lt;VideoInfo&gt; videoList)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>此处的 <code>VideoInfo</code> 是一个JavaBean，对应的就是电视剧信息的实体类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoInfo</span> </span>&#123;</div><div class="line">   <span class="meta">@SerializedName</span>(<span class="string">"main_actor"</span>)</div><div class="line">   <span class="keyword">private</span> String mMainActor;</div><div class="line">      <span class="meta">@SerializedName</span>(<span class="string">"total_video_count"</span>)</div><div class="line">      <span class="keyword">private</span> <span class="keyword">int</span> mTotalVideoCount;</div><div class="line">      <span class="meta">@SerializedName</span>(<span class="string">"album_name"</span>)</div><div class="line">      <span class="keyword">private</span> String mAlbumName;</div><div class="line">      <span class="meta">@SerializedName</span>(<span class="string">"director"</span>)</div><div class="line">      <span class="keyword">private</span> String mDirector;</div><div class="line">      <span class="meta">@SerializedName</span>(<span class="string">"publish_time"</span>)</div><div class="line">      <span class="keyword">private</span> String mPublishTime;</div><div class="line"></div><div class="line"><span class="comment">//Getter and setter methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>之前映射数据需要保证字段名和 <code>Json</code> 数据的字段名一致，其实本来把这个类的字段名改得一致就行啦，但是服务器端返回的数据字段，很多都是以<code>“_”</code>进行连接，而不是使用驼峰命名法则，这个时候 <code>Gson</code> 的 <code>@SerializedName</code> 注解就派上用场了，注解中用服务器端返回值字段，成员变量仍然使用驼峰命名法。</p><p>但是上个周末安装了最近 <code>Alibaba 10 月 14 日</code> 推出的 <code>Coding Guidelines</code> 插件，发现代码中很多不规范的地方，并且人家规定了成员变量就必须要使用驼峰命名！所以我决定要按照这个插件的规范来写代码了，虽然现在进不了大厂，但是先熟悉大厂的代码规范也是好事，哈哈~  咳咳，按照大厂的代码规范，成员变量的命名必须使用驼峰命名法！</p><p>这个插件是真心好用，比如对类名要 <code>javadoc</code> 注释 参数、返回值、异常说明、此方法做什么事情、实现什么功能（领域模型相关命名除外，比如：DO、BO、DAO），并且是全中文的！直接在 <code>AS</code> 的 <code>Inspection Results</code> 窗口中显示，这 <code>IDE</code> 内置功能啥时候讲过中文反馈结果的？</p><p> <a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;mid=2247486054&amp;idx=1&amp;sn=f71c4d006d52a5aca679992cbd25620d&amp;chksm=e9293769de5ebe7f5efcd0f86eaf0dd1820ff99a21e3392741d25cbac66eae87f2757bdcc545&amp;mpshare=1&amp;scene=1&amp;srcid=1025zktcvhJDfkWaaRbDsw2a#rd" target="_blank" rel="external">《阿里巴巴Java开发规约》插件全球首发！</a> </p><p>广告时间结束，言归正传！</p></blockquote><p>这个 <code>Activity</code> 实现了 <code>ISohuSerials</code> 接口，布局文件和<a href="http://zengfanyu.top/2017/10/22/MVP2/">上一篇</a>一样，只是把 <code>ListView</code> 换成了自定义的 <code>PullLoadRecyclerView</code> 了，这个<code>RecycyclerView</code> 支持上拉加载更多和下拉刷新， 这里不展开说了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SohuAlbumInfoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ISohuSerials</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SohuAlbumInfoActivity"</span>;</div><div class="line">    <span class="keyword">private</span> PullLoadRecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> ProgressBar mProgressBar;</div><div class="line">    <span class="keyword">private</span> TextView mTip;</div><div class="line">    <span class="keyword">private</span> RelativeLayout mContainer;</div><div class="line">    <span class="keyword">private</span> AlbumPresenter mAlbumPresenter;</div><div class="line">    <span class="keyword">private</span> BasePaginationParam mParam= <span class="keyword">new</span> BasePaginationParam(<span class="number">1</span>, <span class="number">10</span>);</div><div class="line">    <span class="keyword">private</span> VideoInfoAdapter mAdapter;</div><div class="line">    Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsFromRefresh = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_album_view);</div><div class="line">        mContext = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        mAlbumPresenter = <span class="keyword">new</span> AlbumPresenter(<span class="keyword">this</span>, Album.class);</div><div class="line"></div><div class="line">        mContainer = (RelativeLayout) findViewById(R.id.id_success_content);</div><div class="line">        mTip = (TextView) findViewById(R.id.id_tip);</div><div class="line">        mProgressBar = (ProgressBar) findViewById(R.id.id_progress_bar);</div><div class="line"></div><div class="line"></div><div class="line">        mRecyclerView = (PullLoadRecyclerView) findViewById(R.id.id_recycler_view);</div><div class="line">        mRecyclerView.setLinearLayout();</div><div class="line">        mAdapter = <span class="keyword">new</span> VideoInfoAdapter(mContext);</div><div class="line">        mAlbumPresenter.requestServer(mParam);</div><div class="line"></div><div class="line">        mRecyclerView.setAdapter(mAdapter);</div><div class="line">        mRecyclerView.setOnPullLoadMoreListener(<span class="keyword">new</span> PullLoadRecyclerView.OnPullLoadMoreListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">                mIsFromRefresh = <span class="keyword">true</span>;</div><div class="line">                mParam.setPageIndex(<span class="number">1</span>);</div><div class="line">                mAlbumPresenter.refresh(mParam); <span class="comment">//通知Presenter层刷新数据</span></div><div class="line">                mRecyclerView.setRefreshCompleted();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadMore</span><span class="params">()</span> </span>&#123;</div><div class="line">                mAlbumPresenter.loadingNext();</div><div class="line">                mRecyclerView.setLoadMoreCompleted(); <span class="comment">//通知Presenter层加载下一页数据</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAlbumMainInfo</span><span class="params">(List&lt;VideoInfo&gt; albumList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mIsFromRefresh) &#123;</div><div class="line">            mAdapter.cleanData();</div><div class="line">            mIsFromRefresh = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (albumList != <span class="keyword">null</span> &amp;&amp; albumList.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (VideoInfo videoInfo : albumList) &#123;</div><div class="line">                mAdapter.addData(videoInfo);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mAdapter.notifyDataSetChanged();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isShow)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (isShow) &#123;</div><div class="line">                    mProgressBar.setVisibility(View.VISIBLE);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mProgressBar.setVisibility(View.GONE);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showOkHttpError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc, <span class="keyword">final</span> String errorUrl)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mTip.setText(<span class="string">"http err:"</span> + <span class="string">"errCode:"</span> + errorCode + <span class="string">",errDesc:"</span> + errorDesc + <span class="string">",errUrl:"</span> + errorUrl);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showServerError</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> errorCode, <span class="keyword">final</span> String errorDesc)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mTip.setText(<span class="string">"server err:"</span> + <span class="string">"errCode:"</span> + errorCode + <span class="string">",errDesc:"</span> + errorDesc);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSuccess</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isSuccess)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (isSuccess) &#123;</div><div class="line">                    mContainer.setBackgroundResource(android.R.color.white);</div><div class="line">                    mTip.setText(<span class="string">"Sohu Serials album"</span>);</div><div class="line"></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mContainer.setBackgroundResource(R.color.colorAccent);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在上面代码中可以看到:</p><ul><li>在 <code>PullLoadRecycler.OnPullLoadMoreListenre</code> 的 <code>onRefresh()</code> 回调方法中，核心代码就是这一行 <code>mAlbumPresenter.refresh(mParam);</code> ，通知 <code>Presenter</code> 层去刷新数据， 至于 <code>Presenter</code> 层如何刷新。。 关我 <code>View</code> 层 X 事~</li><li>在 <code>PullLoadRecycler.OnPullLoadMoreListenre</code> 的 <code>onLoadMore()</code> 回调方法中,也是直接调用 <code>mAlbumPresenter.loadingNext()</code>。</li></ul><p>下面说说 <code>Presenter</code> 层的代码</p><h3 id="Presenter-层的具体实现"><a href="#Presenter-层的具体实现" class="headerlink" title="Presenter 层的具体实现"></a>Presenter 层的具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> * Function:</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlbumPresenter</span> <span class="keyword">extends</span> <span class="title">BasePaginationPresenter</span>&lt;<span class="title">BasePaginationParam</span>, <span class="title">Album</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> ISohuSerials mBaseListView;</div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTotalCount;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AlbumPresenter</span><span class="params">(ISohuSerials baseListView, Class&lt;Album&gt; CLazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(baseListView, CLazz);</div><div class="line">        <span class="keyword">this</span>.mBaseListView = baseListView;</div><div class="line">        getModel().setRequestMethod(Constants.HTTP_GET_METHOD);</div><div class="line">        getModel().setRequestUrl(Constants.SOHU_SERIALS_URL);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serverResponse</span><span class="params">(Album album)</span> </span>&#123;</div><div class="line"></div><div class="line">        mBaseListView.showAlbumMainInfo(album.getData().getVideos());</div><div class="line"></div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mBaseListView.showProgress(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        mTotalCount = album.getData().getCount();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">serverHaveMoreData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//此处pageIndex是从1开始的， 实际使用需要注意pageIndex的起始值</span></div><div class="line">        <span class="keyword">int</span> pageSize = mParam.getPageSize();</div><div class="line">        <span class="keyword">int</span> pageIndex = mParam.getPageIndex();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (pageIndex * pageSize) &lt;= mTotalCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>首先是要继承之前编写的 <code>BasePaginationPresenter</code>类，泛型参数 <code>BasePaginationParam</code> 可以根据实际需求进行拓展，基本使用在前面已经介绍过，此处不做赘述。</li><li><code>Album</code> 是搜狐视频电视剧频道返回数据的实体类，上面提到的 <code>VideoInfo</code> 包含在 <code>Album</code> 里面，因为现在只需要展示 <code>VideoInfo</code> 里的信息， 所以在 <code>serverRespomse</code> 方法里，有一个转换 <code>mBaseListView.showAlbumMainInfo(album.getData().getVideos());</code></li><li>实现父类 <code>BasePaginationPresenter</code> 中的抽象方法 <code>serverHaveMoreData()</code> ,思路就是 当前页面数 * 每一页的数据量，然后和 数据总量 比较大小。</li></ul><h3 id="Model-层的具体实现"><a href="#Model-层的具体实现" class="headerlink" title="Model 层的具体实现"></a>Model 层的具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="comment">/**</span></div><div class="line"><span class="comment"> 2  * <span class="doctag">@author</span>：ZengFanyu</span></div><div class="line"><span class="comment"> 3  */</span></div><div class="line"> <span class="number">4</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SohuAlbumModel</span>&lt;<span class="title">Param</span> <span class="keyword">extends</span> <span class="title">BasePaginationParam</span>&gt; <span class="keyword">implements</span> <span class="title">IBaseModel</span>&lt;<span class="title">Param</span>&gt; </span>&#123;</div><div class="line"> <span class="number">5</span>     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SohuAlbumModel"</span>;</div><div class="line"> <span class="number">6</span>     <span class="keyword">private</span> String url;</div><div class="line"> <span class="number">7</span>     <span class="keyword">private</span> <span class="keyword">int</span> method;</div><div class="line"> <span class="number">8</span>     <span class="keyword">private</span> IBasePaginationPresenter mPaginationPresenter;</div><div class="line"> <span class="number">9</span> </div><div class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="title">SohuAlbumModel</span><span class="params">(IBasePaginationPresenter paginationPresenter)</span> </span>&#123;</div><div class="line"><span class="number">11</span>         mPaginationPresenter = paginationPresenter;</div><div class="line"><span class="number">12</span>     &#125;</div><div class="line"><span class="number">13</span> </div><div class="line"><span class="number">14</span>     <span class="meta">@Override</span></div><div class="line"><span class="number">15</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRequestToServer</span><span class="params">(Param param)</span> </span>&#123;</div><div class="line"><span class="number">16</span>         String validUrl = <span class="keyword">null</span>;</div><div class="line"><span class="number">17</span>         <span class="keyword">if</span> (param != <span class="keyword">null</span> &amp;&amp; !TextUtils.isEmpty(url)&amp;&amp;mPaginationPresenter.hasMoreData()) &#123;</div><div class="line"><span class="number">18</span>             validUrl = getValidUrl(url, param);</div><div class="line"><span class="number">19</span>             Log.d(TAG, <span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"ValidUrl:"</span> + validUrl);</div><div class="line"><span class="number">20</span>         &#125;</div><div class="line"><span class="number">21</span> Log.d(TAG,<span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"check param,url and server have data or not!"</span>)</div><div class="line"><span class="number">22</span>         <span class="keyword">if</span> (!TextUtils.isEmpty(validUrl)) &#123;</div><div class="line"><span class="number">23</span>             HttpUtils.executeByGet(validUrl, <span class="keyword">new</span> Callback() &#123;</div><div class="line"><span class="number">24</span>                 <span class="meta">@Override</span></div><div class="line"><span class="number">25</span>                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"><span class="number">26</span>                     Log.d(TAG, <span class="string">"&gt;&gt; onFailure &gt;&gt; "</span>);</div><div class="line"><span class="number">27</span>                     e.printStackTrace();</div><div class="line"><span class="number">28</span>                     mPaginationPresenter.okHttpError(Constants.URL_ERROR, e.getMessage(), url);</div><div class="line"><span class="number">29</span>                 &#125;</div><div class="line"><span class="number">30</span> </div><div class="line"><span class="number">31</span>                 <span class="meta">@Override</span></div><div class="line"><span class="number">32</span>                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"><span class="number">33</span>                     <span class="keyword">if</span> (!response.isSuccessful()) &#123;</div><div class="line"><span class="number">34</span>                         Log.d(TAG, <span class="string">"&gt;&gt; onResponse &gt;&gt; "</span> + <span class="string">"Not successful"</span>);</div><div class="line"><span class="number">35</span>                         mPaginationPresenter.okHttpError(Constants.SERVER_ERROR, response.message(), url);</div><div class="line"><span class="number">36</span>                     &#125;</div><div class="line"><span class="number">37</span> </div><div class="line"><span class="number">38</span>                     String responseJson = response.body().string();</div><div class="line"><span class="number">39</span>                     Log.d(TAG, <span class="string">"&gt;&gt; onResponse &gt;&gt; "</span> + <span class="string">"responseJson:"</span> + responseJson);</div><div class="line"><span class="number">40</span>                     mPaginationPresenter.accessSuccess(responseJson);</div><div class="line"><span class="number">41</span> </div><div class="line"><span class="number">42</span>                 &#125;</div><div class="line"><span class="number">43</span>             &#125;);</div><div class="line"><span class="number">44</span>         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">45</span>             Log.d(TAG, <span class="string">"&gt;&gt; sendRequestToServer &gt;&gt; "</span> + <span class="string">"Valid Url is empty"</span>);</div><div class="line"><span class="number">46</span>         &#125;</div><div class="line"><span class="number">47</span>     &#125;</div><div class="line"><span class="number">48</span> </div><div class="line"><span class="number">49</span>     <span class="function"><span class="keyword">private</span> String <span class="title">getValidUrl</span><span class="params">(String url, Param param)</span> </span>&#123;</div><div class="line"><span class="number">50</span>         <span class="keyword">return</span> String.format(url, param.getPageIndex(), param.getPageSize());</div><div class="line"><span class="number">51</span>     &#125;</div><div class="line"><span class="number">52</span> </div><div class="line"><span class="number">53</span> </div><div class="line"><span class="number">54</span>     <span class="meta">@Override</span></div><div class="line"><span class="number">55</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"><span class="number">56</span>         <span class="keyword">this</span>.url = url;</div><div class="line"><span class="number">57</span>     &#125;</div><div class="line"><span class="number">58</span> </div><div class="line"><span class="number">59</span>     <span class="meta">@Override</span></div><div class="line"><span class="number">60</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestMethod</span><span class="params">(<span class="keyword">int</span> method)</span> </span>&#123;</div><div class="line"><span class="number">61</span>         <span class="keyword">this</span>.method = method;</div><div class="line"><span class="number">62</span>     &#125;</div><div class="line"><span class="number">63</span> </div><div class="line"><span class="number">64</span>     <span class="meta">@Override</span></div><div class="line"><span class="number">65</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelRequest</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">66</span>         HttpUtils.cancelCall();</div><div class="line"><span class="number">67</span>     &#125;</div><div class="line"><span class="number">68</span> &#125;</div></pre></td></tr></table></figure><p><code>Model</code> 层的实现还是跟之前的一样，直接实现 <code>IBaseModel</code> 接口即可。</p><ul><li>在 <code>17</code> 行可以看到，<code>mPaginationPresenter.hasMoreData()</code> ，这个就是对服务器点是否还有数据可以返回的判断，如果这里返回 <code>false</code> 那么就不回去进行网络请求,然后在 <code>22</code> 行打印个 <code>Log</code> 提醒。</li><li>在看看 <code>49</code> 行的 <code>getVaildUrl</code> 方法，这个方法主要就是把传进来的 <code>param</code> 参数拼接进 <code>url</code> 中，形成有效的，可以请求到数据的 <code>Url</code>。</li></ul><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://i.imgur.com/QIPIc3y.gif" alt=""></p><p><code>Item</code> 就展示了一下电视剧的 主演、名字、导演、集数、更新时间的信息。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过上面的封装和例子，起码证明了这一套封装能够跑的通了，以后如果还有关于分页请求的需求，可以直接继承上面的基类来实现，无非就是修改<code>param</code> 和 <code>Data</code> 两个泛型的参数。</p><ul><li>前者是请求 <code>url</code> 的参数，根据具体的业务需求，封装 <code>BasePaginationParam</code> 的子类即可。</li><li>后者是服务器端返回数据的实体类，也是根据数据的结构来封装的，在 <code>Android Studio</code> 中有 <code>Gson Formatter</code> 这个插件，封装 <code>JavaBean</code> 插件也轻松很多，在结合上面提到的 <code>Gson</code> 注解，全套了。</li></ul><blockquote><p>下一篇准备封装一下 <code>OkHttp</code> ,然后将封装之后的 <code>OkHttp</code> 整合到当前框架中,当然了,还是以分页接在为例</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/HCStIDG.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;摘要：在&lt;a href=&quot;http://zengfanyu.top/2017/10/22/MVP2/&quot;&gt;上一篇&lt;/a&gt;中对MVP模式进行了封装，然后通过封装之后的类，实现了一个网络请求，但是请求到网络数据之后，就直接展示到了 &lt;code&gt;View&lt;/code&gt; 层，并没有其他的操作，然而我们在开发过程中， 经常会用到分页加载，一般在滑动控件向上滚动，加载更多事件触发是调用，并且这个过程设计到两个参数，一个是 &lt;code&gt;PageIndex&lt;/code&gt; ：页码；一个是 &lt;code&gt;PageSize&lt;/code&gt; 一页数据的大小， 分页加载就是通过在某一具体事件触发时，调用修改这两个或者一个参数，重新请求网络，从而拿到下一页的数据，这边文章还是基于MVP模式，对分页数据的请求进行封装。&lt;br&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Android 当中的 MVP 模式（二）封装</title>
    <link href="http://zengfanyu.top/2017/10/22/MVP2/"/>
    <id>http://zengfanyu.top/2017/10/22/MVP2/</id>
    <published>2017-10-22T14:00:15.000Z</published>
    <updated>2017-10-28T10:38:12.190Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/SOu2Z0j.png" alt=""></p><p><em>摘要：在<a href="http://zengfanyu.top/2017/10/20/MVP1/">Android当中的MVP模式（一）基本概念</a>中，用了一个简单的的登录Demo展示了一下 <code>MVP</code> 模式的基本姿势，虽然项目结构是更加清晰了，但是代码量明显增多了，原来的网络请求操作只用 <code>1</code> 个类可以搞定，现在需要 <code>4</code> 个类，并且每当有不同作用的 <code>model</code> 出现时，我们就需要相应的为他们添加 <code>presenter</code> 层的对象，但是细细查看，这些<code>model</code> 的作用都大体相似，与获取数据相关，类似于网络请求或者是数据库 <code>DAO</code> 的操作，所以此处可以考虑将他们的共性抽取出来，封装成基累，然后子类去继承即可。</em><br><a id="more"></a></p><h2 id="一个简单的网络请求"><a href="#一个简单的网络请求" class="headerlink" title="一个简单的网络请求"></a>一个简单的网络请求</h2><blockquote><p>一个简单的需求：通过 <code>url</code> 获取数据，然后用 <code>Gson</code> 解析成 <code>JavaBean</code>，然后展示到 ListView上。这里使用知乎日报的获取最新消息的 <code>API</code> 接口 <em><a href="https://news-at.zhihu.com/api/4/news/latest" target="_blank" rel="external">https://news-at.zhihu.com/api/4/news/latest</a></em></p></blockquote><p>那么按照普通 <code>MVP</code> 的思路，首先 <code>view</code> 层：</p><pre><code>为了突出重点，当前View层只做一件事情：就是展示获取的数据</code></pre><p><strong><code>ILatestVIew</code></strong></p><p><img src="https://i.imgur.com/gwQBe48.png" alt=""><br>此接口需要一个 <code>String</code> 类型的列表数据，主要是用于给 <code>Adapter</code> 展示用。</p><p><strong><code>LatestViewActivity</code></strong></p><p><img src="https://i.imgur.com/IhXLDsA.png" alt=""></p><p>很简答，就是实现接口。</p><p><strong><code>IRequestLatestModel</code></strong></p><p><img src="https://i.imgur.com/V82ypL1.png" alt=""></p><p>请求服务器端数据的接口</p><p><strong><code>RequestLatestNewsModel</code></strong></p><p><img src="https://i.imgur.com/UUFYYmc.png" alt=""></p><p>使用 <code>okhttp</code> 请求数据，然后将返回的json类型数据传递给 <code>Presenter</code> 层。</p><p><strong><code>ILatestNewsPresenter</code></strong></p><p><img src="https://i.imgur.com/P7FkWJv.png" alt=""></p><p>一个接口用于处理 <code>Json</code> 数据，一个接口用于通知 <code>model</code> 层向服务器发起请求 。</p><p><strong><code>LatestNewsPresenter</code></strong></p><p><img src="https://i.imgur.com/RAUwO46.png" alt=""></p><p>实现接口定义的方法</p><p>其中 <code>HttpUtils</code> 方法如下： </p><p><img src="https://i.imgur.com/OPbiJCZ.png" alt=""></p><blockquote><p>此处 <code>OKhttp</code> 也可以进行封装， 后面再写一篇文章， 专门记录，先暂时简单的使用。</p></blockquote><p>运行之后，点击 <code>button</code>， 即可发起网络请求，运行效果如下：</p><p><img src="https://i.imgur.com/SyvLPrY.png" alt=""></p><p><strong>弊端：</strong></p><p>假设我们现在又有另外的一个需求， 请求知乎日报过往的消息， 对应的 <code>API</code> 接口为<em><code>URL: https://news-at.zhihu.com/api/4/news/before/20131119</code></em>,那么我就需要按照上述的方式，又写一套MVP的代码，最少又得留个类，如此一来，随着需求的增多，代码量会极具增大，但是<strong>多余增加的每层代码所做的事情又大多数相同，只是具体细节不一样</strong>，那么我们可不可以<strong>把每一层要做的事情给抽取出来，封装成基类，然后让子类去继承，去实现</strong>，这样就可以大量减少代码量？ 抱着这个问题，我就来分析一下 <code>MVP</code> 每一层所做的事情。</p><h2 id="以简单网络请求为例，分析-MVP-各层的职责"><a href="#以简单网络请求为例，分析-MVP-各层的职责" class="headerlink" title="以简单网络请求为例，分析 MVP 各层的职责"></a>以简单网络请求为例，分析 MVP 各层的职责</h2><p>以上面请求知乎日报的最新消息为例，分析每一层的职责。</p><h3 id="Model-层"><a href="#Model-层" class="headerlink" title="Model 层"></a><code>Model</code> 层</h3><p><code>Model</code> 角色主要是提供数据的存取功，并且将数据或者是错误信息回调给 <code>Presenter</code> 层。更直白的说，<code>Model</code> 就是封装了数据库 <code>DAO</code> 或者网络获取数据的角色，或者两种数据获取方式的集合。所以它主要的功能是：</p><pre><code>1. 向数据源发起请求2. 取消发起的请求3. 通知 Presenter 处理结果</code></pre><h3 id="Presenter-层"><a href="#Presenter-层" class="headerlink" title="Presenter 层"></a><code>Presenter</code> 层</h3><p>一般是通知 <code>Model</code> 向服务器发起请求，然后接收 <code>Model</code> 层的请求结果，包括成功的数据和错误的信息，同时也负责将处理之后的数据或者是错误信息通知 <code>View</code> 层，由 <code>View</code> 层作展示。所以他的主要功能是：</p><pre><code>1. 通知 Model 层向服务器发起数据请求2. 通知 Model 层取消这次请求3. 接收 Model 层返回的数据4. 接收 Model 层返回的错误信息5. 通知 View 层接收处理之后的结果或者是错误信息</code></pre><h3 id="View-层"><a href="#View-层" class="headerlink" title="View 层"></a><code>View</code> 层</h3><p>此处 View 层的作用就比较专一化，只用于处理 <code>UI</code> 相关的事情，不再负责业务逻辑。主要职责如下：</p><pre><code>1. Loading 状态的展示隐藏2. 接收 Presenter 层处理后的数据3. 接收 Presenter 层处理后的错误信息4. 接收 Presenter 层处理后的服务器拒绝信息</code></pre><blockquote><p>嗯，差不多就是这么多吧</p></blockquote><p>既然将每一层的主要职责总结了出来， 很明显就可以将这些职责「在代码中就是对应的方法」抽象成方法，然后让子类去个性化的实现。</p><h2 id="抽取共性封装网络请求"><a href="#抽取共性封装网络请求" class="headerlink" title="抽取共性封装网络请求"></a>抽取共性封装网络请求</h2><h3 id="Model-层-1"><a href="#Model-层-1" class="headerlink" title="Model 层"></a><code>Model</code> 层</h3><p><strong><code>IBaseModel</code></strong></p><p><img src="https://i.imgur.com/5mI8sPq.png" alt=""></p><p>其中 <code>setMethod</code> 和 <code>setRequestUrl</code> 方法直接在 <code>Presenter</code> 的构造方法中调用，设置好请求的方式和请求的 <code>Url</code> 地址，这样方便 <code>model</code> 层在请求服务器数据时，使用对应的参数，使用对应的请求方式。</p><blockquote><p>此处没有用到 <code>method</code> 是因为知乎日报的最新新闻 API 接口是 Get 方式，不需要参数，所以此处没有根据请求方式来调用不同的请求方法</p></blockquote><h3 id="Presenter-层-1"><a href="#Presenter-层-1" class="headerlink" title="Presenter 层"></a><code>Presenter</code> 层</h3><p><strong><code>IBasePresenter</code></strong></p><p><code>Presenter</code> 层是逻辑控制层，是 <code>Model</code> 层和 <code>View</code> 层的桥梁，对这一层抽取共性进行封装的时候，不能像 <code>Model</code> 层一样，把全部的功能装好好，原因如下：</p><pre><code>1.如果将其全部封装起来，是没办法复用同一个功能模块的，并且会导致部分业务逻辑需要在 view 层中做处理，这样和 MVP 的思想相悖。2.Presenter 层需要处理和 View 层的交互逻辑以及 Model 层返回的数据。</code></pre><p>但是 <code>Model</code> 层是可以的，我是认为，<code>Model</code> 层就是从数据源中拿数据，并且将数据传递给 <code>Presenter</code> 层，所有的 <code>Model</code> 层做的都是这个操作，只是访问数据源的参数不同，数据源类型不同，访问数据源的方法不同而已，所以很明显可以全部抽取出来放基类中，然后各个子类去各自实现。</p><p><img src="https://i.imgur.com/h60avAn.png" alt=""></p><pre><code>1. requestServer 在View层调用的接口，用于通知Model层想服务器发起请求，参数可为空，比如，有些Get方式的请求就不需要参数2. requestSuccess 在Model层调用，通过此方法将服务器返回的数据传递给给Presenter层处理3. cancelRequest 在View层调用，用于通知Model层取消请求4. okHttpError 在Model层调用，当网络请求产生错误的时候5. getModel 在子类中调用，用于拿到Model对象6. getParams 在Model层中调用，此方法用于获取Presenter层处理好的参数</code></pre><p><strong><code>BasePresenter</code></strong></p><p><img src="https://i.imgur.com/NWad6Kf.png" alt=""></p><ul><li><code>public abstract class BasePresenter&lt;Params, Data&gt; implements IBasePresenter&lt;Params&gt;</code>这是一个泛型的抽象类，其中泛型<code>Params</code>是用于<code>model</code>层向服务器发起请求的请求参数，<code>Data</code>是服务器返回的<code>Json</code>类对应的<code>JavaBean</code>类。<p></p></li><li><code>BasePresenter</code>处理了<code>View</code>层和<code>model</code>层中大多数的逻辑，我们要做的就是在子类中实现<code>public abstract void serverResponse(Data data);</code>这个抽象方法就好了。<p></p></li><li><code>public abstract void serverResponse(Data data);</code>这个方法是在用于处理<code>model</code>层返回的结果，然后进行处理之后回调给<code>view</code>层。<p></p></li><li>可以看到<code>46、47、50、51、52</code>行的代码给注释掉了，其实一般情况下这里是不需要注释的，这里是用于判断返回数据的<code>errorNum errorType errorDesc</code>信息的，这么操作，是为了实现如下功能：<font color="#ff0000">若返回的信息有误，则BasePresenter直接回调给<code>View</code>层，如果正确，才会传递给子类</font>。<blockquote><p>上述最后一条，需要对泛型<code>Data</code>在进行一次封装，并且使用上 <code>Gson</code> 的<code>@SerializedName(value = &quot;...&quot;,alternate = {&quot;...&quot;,&quot;...&quot;,&quot;...&quot;})</code>这个注解，并且这里涉及到<font color="#ff0000"><strong>泛型擦除</strong></font>的问题，这一块我还没有很好的解决办法，所以此处没有进行封装。</p></blockquote></li></ul><h3 id="View-层-1"><a href="#View-层-1" class="headerlink" title="View 层"></a><code>View</code> 层</h3><p>还是按照上面分析的 <code>View</code> 层职责来写：</p><p><strong><code>IBaseView</code></strong></p><p><img src="https://i.imgur.com/XnjmUqu.png" alt=""></p><p>到此为止，对 <code>MVP</code> 模式的每一层都写出了对应的基类，有了这件基类作为基础之后，在进行同样的网络请求。</p><h3 id="使用上述封装好的类进行相同的网络请求"><a href="#使用上述封装好的类进行相同的网络请求" class="headerlink" title="使用上述封装好的类进行相同的网络请求"></a>使用上述封装好的类进行相同的网络请求</h3><p><strong><code>LatestNewsModel</code></strong></p><p><img src="https://i.imgur.com/owRmdqS.png" alt=""></p><p><strong><code>LatestNewsPresenter</code></strong></p><p><img src="https://i.imgur.com/BUsyAtq.png" alt=""></p><p>其中<code>Param</code>泛型参数填的是<code>nullable</code>是因为这个请求是<code>get</code>方式，没有涉及到参数。<code>LatestNews</code>作为<code>Data</code>的泛型，主要是用于<code>BasePresenter</code>解析并映射。</p><p><strong><code>ILatestNewsView</code></strong></p><p><img src="https://i.imgur.com/gY7PhQH.png" alt=""></p><p> <code>IlatestNewsVIew</code>接口是继承<code>IBaseView</code>接口的，是因为它需要在<code>IBaseView</code>接口所定义的功能之上，还需要实现将数据展示到列表中这么一个操作，所以添加上了一个<code>showLatestViewTitle</code>方法。</p><p><strong><code>LatestNewsTitleActivity</code></strong></p><p><img src="https://i.imgur.com/2M2FxAO.png" alt=""></p><p>这个类写起来就简单了，跟着接口来， 把之前每一个接口提到的功能给实现以下就可以了。</p><p>顺便贴个 <code>XML</code> 文件：</p><p><img src="https://i.imgur.com/NFcSwWg.png" alt=""></p><p>搞定，实现的效果和上面是一样的。</p><blockquote><p>回过头一看，MMP，这代码量似乎也没有少很多啊，-。- ，没事没事，需求多了就少了~</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>先看看<a href="http://zengfanyu.top/2017/10/20/MVP1/">上一篇</a>中提到的一张图<br><img src="https://i.imgur.com/YiW40TM.png" alt=""><br>此处将MVP模式封装后，MVP的流程图如下：<br><img src="https://i.imgur.com/sNnJ74J.png" alt=""></p><p>后面的文章将使用上面封装的框架，通过扩展 <code>BasePresenter</code> 来增加新的模块。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/SOu2Z0j.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要：在&lt;a href=&quot;http://zengfanyu.top/2017/10/20/MVP1/&quot;&gt;Android当中的MVP模式（一）基本概念&lt;/a&gt;中，用了一个简单的的登录Demo展示了一下 &lt;code&gt;MVP&lt;/code&gt; 模式的基本姿势，虽然项目结构是更加清晰了，但是代码量明显增多了，原来的网络请求操作只用 &lt;code&gt;1&lt;/code&gt; 个类可以搞定，现在需要 &lt;code&gt;4&lt;/code&gt; 个类，并且每当有不同作用的 &lt;code&gt;model&lt;/code&gt; 出现时，我们就需要相应的为他们添加 &lt;code&gt;presenter&lt;/code&gt; 层的对象，但是细细查看，这些&lt;code&gt;model&lt;/code&gt; 的作用都大体相似，与获取数据相关，类似于网络请求或者是数据库 &lt;code&gt;DAO&lt;/code&gt; 的操作，所以此处可以考虑将他们的共性抽取出来，封装成基累，然后子类去继承即可。&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Android当中的MVP模式（一）基本概念</title>
    <link href="http://zengfanyu.top/2017/10/20/MVP1/"/>
    <id>http://zengfanyu.top/2017/10/20/MVP1/</id>
    <published>2017-10-20T12:37:15.000Z</published>
    <updated>2017-10-28T10:45:23.740Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/CgiufDM.png" alt=""></p><p><em>摘要：<code>Github</code>上看到很多项目，都是 <code>MVP+RxJava+Retrofit+Dragger2</code> 这种架构，再加上一个 <code>OkHttp</code>， 虽说这几个东西，我都或多或少听过，用过，但是从来没有认真的研究过，没有把他们整合起来开发一个应用。从 <code>MVP</code> 开始，认真学习这几个框架，然后整合起来，做一个应用。先立一个 <code>FLAG</code>！</em></p><a id="more"></a><h2 id="为什么要使用MVP"><a href="#为什么要使用MVP" class="headerlink" title="为什么要使用MVP"></a>为什么要使用MVP</h2><p>在传统的Android开发中，我们一般是使用MVC模式进行开发的。</p><p></p><h3 id="传统MVC模式介绍："><a href="#传统MVC模式介绍：" class="headerlink" title="传统MVC模式介绍："></a>传统MVC模式介绍：</h3><ol><li>View: 视图层，对应xml文件</li><li>Controller: 控制层，对应Activity和Fragment层，进行数据处理</li><li>Model：实体层，负责获取实体数据</li></ol><p>采用MVC模式的一个最大的弊端就是xml作为View层视图能力实在太弱，所以一般情况下我们都是通过Controller层来辅助处理一些视图的。这样的结果就导致Controller既作为控制层的同时又承担了View层的大部分功能，采用MVC模式往往会导致Activity和Fragment中的代码非常复杂。我们将Android中采用的MVC模式称为MV模式更加恰当。</p><h3 id="MVP模式介绍："><a href="#MVP模式介绍：" class="headerlink" title="MVP模式介绍："></a>MVP模式介绍：</h3><ol><li>View: 视图层，对应xml文件与Activity/Fragment</li><li>Presenter: 逻辑控制层，同时持有View和Model对象</li><li>Model: 实体层，负责获取实体数据<p></p></li></ol><p>MVP模式的流程图如下：<br><img src="https://i.imgur.com/YiW40TM.png" alt=""></p><h3 id="采用MVP模式的优势是："><a href="#采用MVP模式的优势是：" class="headerlink" title="采用MVP模式的优势是："></a>采用MVP模式的优势是：</h3><ol><li>把业务逻辑抽离到Presenter层中，View层专注于UI的处理。</li><li>分离视图逻辑与业务逻辑，达到解耦的目的。</li><li>提高代码的阅读性。</li><li>Presenter被抽象成接口，可以根据Presenter的实现方式进行单元测试。<br>可拓展性强。<p></p></li></ol><h3 id="采用MVP模式的缺点："><a href="#采用MVP模式的缺点：" class="headerlink" title="采用MVP模式的缺点："></a>采用MVP模式的缺点：</h3><ol><li>项目结构会对后期的开发和维护有一定的影响。具体视APP的体量而定。</li><li>代码量会增多，如何避免编写过多功能相似的重复代码是使用MVP开发的一个重点要处理的问题。</li><li>有一定的学习成本。<br>综上所述，在Android上采用MVP模式的优势是：大大优化代码的维护性与拓展性的同时对代码进行深度解耦，使各个层级的分工更加明晰。<p></p></li></ol><h2 id="一个简单的应用"><a href="#一个简单的应用" class="headerlink" title="一个简单的应用"></a>一个简单的应用</h2><p>模拟Android中登陆的功能</p><p></p><h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><p><img src="https://i.imgur.com/TbM6JQs.png" alt=""></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://i.imgur.com/UgftH96.png" alt=""></p><p></p><p>从上图中可以看到，一个简单的基于 MVP 的项目，最少也需要创建 6 个文件夹，分别是 M、V、P 的接口和它们各自的实现类，其中 LoginActivity 就是 View 层的具体实现，它只需要负责处理 UI 的逻辑，而业务相关的逻辑都抽象到 LoginPresenter 中，这样就避免了传统开发中 Activity 、Fragment 既处理 UI 又负责业务逻辑的情况。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>ILoginView：</strong></p><p><img src="https://i.imgur.com/oZw0oAl.png" alt=""><br>    view层只负责和 UI 相关的操作，那么在这个小 Demo 中，和 UI 相关的操作有如下几点：</p><pre><code>1. 从EditText中拿到用户输入的userName2. 从EditText中拿到用户输入的password3. 在登录过程中需要展示一个progressbar，登录过程结束之后隐藏这个progressbar4. 展示登录成功后的view5. 展示登录失败后的view</code></pre><p>综上五个操作，所以有了ILoginView中的五个接口</p><p><strong>LoginActivity：</strong></p><p><img src="https://i.imgur.com/BldAn6r.png" alt=""></p><p>当点击登录按钮时，会将请求服务器合适账号密码这个过程交给presenter层去处理，所以在LoginActivity里，会有preserent的引用。</p><p><strong>ILoginPersenter：</strong></p><p><img src="https://i.imgur.com/qaDLXA2.png" alt=""><br>    presenter层处理业务逻辑，有如下几点:</p><pre><code>1. 负责接收model的返回结果并且处理2. 将处理的结果以特定的形式，传递给view层，让view层去展示3. 通知model层去向数据源请求数据</code></pre><p><strong>LoginPresenter：</strong></p><p><img src="https://i.imgur.com/aeBpO2l.png" alt=""></p><p>因为presenter层相当于一个中间交互人，所以它必须要持有对 view 、model 层对象的引用。</p><p><strong>ILoginModel：</strong></p><p><img src="https://i.imgur.com/ov0me7r.png" alt=""><br>    model负责数据的存取：</p><pre><code>在这个Demo中，数据的存取使用一个线程和简单的字符串判断来模拟。</code></pre><p><strong>LoginModel：</strong></p><p><img src="https://i.imgur.com/bJXqwgD.png" alt=""></p><p>因为model层需要将获取的数据传递给presenter层去做处理，所以此处也需要持有对presenter层的引用。</p><p>这样一来就成功的将简单的登录案例，由MVP模式来实现了,</p><ul><li>在 LoginActivity 中处理的都是和 UI 相关的，</li><li>在 LoginPresenter 中处理的是业务的逻辑，</li><li>在 LoginModel 中处理的是网络数据获取。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p> <strong>Presenter—交互中间人</strong></p><p> <font color="#ff0000">主要作为沟通 View 和 Model 的桥梁</font>，它从 Model 层检索数据后，返回给 View 层，使得 View 和 Model 之间没有耦合，也将业务从 View 角色上抽离出来。</p><p> <strong>View—用户界面</strong></p><p>View 通常是指Activity、Fragment或者某个 View 控件，<font color="#ff0000">它含有一个 Presenter</font> 成员变量。通常 View 需要实现一个逻辑接口，<font color="#ff0000">将 View 上的操作转换给 Presenter 进行实现，最后，Presenter 调用 View 逻辑接口将结果返回给 View 元素</font>。</p><p><strong>Model—数据的存取</strong></p><p>对于一个结构化的 APP 来说，Model角色主要是提供数据的存取功能。Presenter 需要通过 Model 层存储、获取数据，Model就想一个数据仓库。<font color="#ff0000">更直白的说，Model 就是封装了数据库 DAO 或者网络获取数据的角色，或者两种数据获取方式的集合</font>。</p><blockquote><p>MVP 并不是一个标准化的模式，它有很多种实现方式，也可以根据自己的需求去修正MVP的实现方式，可以随着 Presenter 的复杂程度而变化，只要保证是通过 Presenter 将 View 和 Model 解耦，降低类型复杂度，各个模块单元可以独立测试、独立变化，这就是正确的方向。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/CgiufDM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要：&lt;code&gt;Github&lt;/code&gt;上看到很多项目，都是 &lt;code&gt;MVP+RxJava+Retrofit+Dragger2&lt;/code&gt; 这种架构，再加上一个 &lt;code&gt;OkHttp&lt;/code&gt;， 虽说这几个东西，我都或多或少听过，用过，但是从来没有认真的研究过，没有把他们整合起来开发一个应用。从 &lt;code&gt;MVP&lt;/code&gt; 开始，认真学习这几个框架，然后整合起来，做一个应用。先立一个 &lt;code&gt;FLAG&lt;/code&gt;！&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zengfanyu.top/2017/10/14/hello-world/"/>
    <id>http://zengfanyu.top/2017/10/14/hello-world/</id>
    <published>2017-10-14T15:40:28.953Z</published>
    <updated>2017-10-21T16:06:55.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="To-be-a-better-man"><a href="#To-be-a-better-man" class="headerlink" title="To be a better man"></a>To be a better man</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello , 个人博客搭好了，老规矩，先来个 Hello World！，然后，撸起袖子就是干！</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;To-be-a-better-man&quot;&gt;&lt;a href=&quot;#To-be-a-better-man&quot; class=&quot;headerlink&quot; title=&quot;To be a better man&quot;&gt;&lt;/a&gt;To be a better man&lt;/h2&gt;&lt;figure c
      
    
    </summary>
    
    
  </entry>
  
</feed>
