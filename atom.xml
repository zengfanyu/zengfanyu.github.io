<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>THIS IS ZENGFANYU</title>
  
  <subtitle>Every little makes a mickel</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zengfanyu.top/"/>
  <updated>2017-10-22T14:22:51.599Z</updated>
  <id>http://zengfanyu.top/</id>
  
  <author>
    <name>曾凡宇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android当中的MVP模式（一）基本概念</title>
    <link href="http://zengfanyu.top/2017/10/20/MVP1/"/>
    <id>http://zengfanyu.top/2017/10/20/MVP1/</id>
    <published>2017-10-20T12:37:15.000Z</published>
    <updated>2017-10-22T14:22:51.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android当中的MVP模式（一）基本概念"><a href="#Android当中的MVP模式（一）基本概念" class="headerlink" title="Android当中的MVP模式（一）基本概念"></a>Android当中的MVP模式（一）基本概念</h1><h2 id="为什么要使用MVP"><a href="#为什么要使用MVP" class="headerlink" title="为什么要使用MVP"></a>为什么要使用MVP</h2><p>在传统的Android开发中，我们一般是使用MVC模式进行开发的。</p><p></p><h3 id="传统MVC模式介绍："><a href="#传统MVC模式介绍：" class="headerlink" title="传统MVC模式介绍："></a>传统MVC模式介绍：</h3><ol><li>View: 视图层，对应xml文件</li><li>Controller: 控制层，对应Activity和Fragment层，进行数据处理</li><li>Model：实体层，负责获取实体数据</li></ol><p>采用MVC模式的一个最大的弊端就是xml作为View层视图能力实在太弱，所以一般情况下我们都是通过Controller层来辅助处理一些视图的。这样的结果就导致Controller既作为控制层的同时又承担了View层的大部分功能，采用MVC模式往往会导致Activity和Fragment中的代码非常复杂。我们将Android中采用的MVC模式称为MV模式更加恰当。</p><h3 id="MVP模式介绍："><a href="#MVP模式介绍：" class="headerlink" title="MVP模式介绍："></a>MVP模式介绍：</h3><ol><li>View: 视图层，对应xml文件与Activity/Fragment</li><li>Presenter: 逻辑控制层，同时持有View和Model对象</li><li>Model: 实体层，负责获取实体数据<p></p></li></ol><p>MVP模式的流程图如下：<br><img src="https://i.imgur.com/YiW40TM.png" alt=""></p><h3 id="采用MVP模式的优势是："><a href="#采用MVP模式的优势是：" class="headerlink" title="采用MVP模式的优势是："></a>采用MVP模式的优势是：</h3><ol><li>把业务逻辑抽离到Presenter层中，View层专注于UI的处理。</li><li>分离视图逻辑与业务逻辑，达到解耦的目的。</li><li>提高代码的阅读性。</li><li>Presenter被抽象成接口，可以根据Presenter的实现方式进行单元测试。<br>可拓展性强。<p></p></li></ol><h3 id="采用MVP模式的缺点："><a href="#采用MVP模式的缺点：" class="headerlink" title="采用MVP模式的缺点："></a>采用MVP模式的缺点：</h3><ol><li>项目结构会对后期的开发和维护有一定的影响。具体视APP的体量而定。</li><li>代码量会增多，如何避免编写过多功能相似的重复代码是使用MVP开发的一个重点要处理的问题。</li><li>有一定的学习成本。<br>综上所述，在Android上采用MVP模式的优势是：大大优化代码的维护性与拓展性的同时对代码进行深度解耦，使各个层级的分工更加明晰。<p></p></li></ol><h2 id="一个简单的应用"><a href="#一个简单的应用" class="headerlink" title="一个简单的应用"></a>一个简单的应用</h2><p>模拟Android中登陆的功能</p><p></p><h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><p><img src="https://i.imgur.com/TbM6JQs.png" alt=""></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://i.imgur.com/UgftH96.png" alt=""></p><p></p><p>从上图中可以看到，一个简单的基于 MVP 的项目，最少也需要创建 6 个文件夹，分别是 M、V、P 的接口和它们各自的实现类，其中 LoginActivity 就是 View 层的具体实现，它只需要负责处理 UI 的逻辑，而业务相关的逻辑都抽象到 LoginPresenter 中，这样就避免了传统开发中 Activity 、Fragment 既处理 UI 又负责业务逻辑的情况。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>ILoginView：</strong></p><p><img src="https://i.imgur.com/oZw0oAl.png" alt=""><br>    view层只负责和 UI 相关的操作，那么在这个小 Demo 中，和 UI 相关的操作有如下几点：</p><pre><code>1. 从EditText中拿到用户输入的userName2. 从EditText中拿到用户输入的password3. 在登录过程中需要展示一个progressbar，登录过程结束之后隐藏这个progressbar4. 展示登录成功后的view5. 展示登录失败后的view</code></pre><p>综上五个操作，所以有了ILoginView中的五个接口</p><p><strong>LoginActivity：</strong></p><p><img src="https://i.imgur.com/BldAn6r.png" alt=""></p><p>当点击登录按钮时，会将请求服务器合适账号密码这个过程交给presenter层去处理，所以在LoginActivity里，会有preserent的引用。</p><p><strong>ILoginPersenter：</strong></p><p><img src="https://i.imgur.com/qaDLXA2.png" alt=""><br>    presenter层处理业务逻辑，有如下几点:</p><pre><code>1. 负责接收model的返回结果并且处理2. 将处理的结果以特定的形式，传递给view层，让view层去展示3. 通知model层去向数据源请求数据</code></pre><p><strong>LoginPresenter：</strong></p><p><img src="https://i.imgur.com/aeBpO2l.png" alt=""></p><p>因为presenter层相当于一个中间交互人，所以它必须要持有对 view 、model 层对象的引用。</p><p><strong>ILoginModel：</strong></p><p><img src="https://i.imgur.com/ov0me7r.png" alt=""><br>    model负责数据的存取：</p><pre><code>在这个Demo中，数据的存取使用一个线程和简单的字符串判断来模拟。</code></pre><p><strong>LoginModel：</strong></p><p><img src="https://i.imgur.com/bJXqwgD.png" alt=""></p><p>因为model层需要将获取的数据传递给presenter层去做处理，所以此处也需要持有对presenter层的引用。</p><p>这样一来就成功的将简单的登录案例，由MVP模式来实现了,</p><ul><li>在 LoginActivity 中处理的都是和 UI 相关的，</li><li>在 LoginPresenter 中处理的是业务的逻辑，</li><li>在 LoginModel 中处理的是网络数据获取。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p> <strong>Presenter—交互中间人</strong></p><p> <font color="#ff0000">主要作为沟通 View 和 Model 的桥梁</font>，它从 Model 层检索数据后，返回给 View 层，使得 View 和 Model 之间没有耦合，也将业务从 View 角色上抽离出来。</p><p> <strong>View—用户界面</strong></p><p>View 通常是指Activity、Fragment或者某个 View 控件，<font color="#ff0000">它含有一个 Presenter</font> 成员变量。通常 View 需要实现一个逻辑接口，<font color="#ff0000">将 View 上的操作转换给 Presenter 进行实现，最后，Presenter 调用 View 逻辑接口将结果返回给 View 元素</font>。</p><p><strong>Model—数据的存取</strong></p><p>对于一个结构化的 APP 来说，Model角色主要是提供数据的存取功能。Presenter 需要通过 Model 层存储、获取数据，Model就想一个数据仓库。<font color="#ff0000">更直白的说，Model 就是封装了数据库 DAO 或者网络获取数据的角色，或者两种数据获取方式的集合</font>。</p><blockquote><p>MVP 并不是一个标准化的模式，它有很多种实现方式，也可以根据自己的需求去修正MVP的实现方式，可以随着 Presenter 的复杂程度而变化，只要保证是通过 Presenter 将 View 和 Model 解耦，降低类型复杂度，各个模块单元可以独立测试、独立变化，这就是正确的方向。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android当中的MVP模式（一）基本概念&quot;&gt;&lt;a href=&quot;#Android当中的MVP模式（一）基本概念&quot; class=&quot;headerlink&quot; title=&quot;Android当中的MVP模式（一）基本概念&quot;&gt;&lt;/a&gt;Android当中的MVP模式（一）基本
      
    
    </summary>
    
      <category term="MVP" scheme="http://zengfanyu.top/categories/MVP/"/>
    
    
      <category term="Android" scheme="http://zengfanyu.top/tags/Android/"/>
    
      <category term="MVP" scheme="http://zengfanyu.top/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zengfanyu.top/2017/10/14/hello-world/"/>
    <id>http://zengfanyu.top/2017/10/14/hello-world/</id>
    <published>2017-10-14T15:40:28.953Z</published>
    <updated>2017-10-21T16:06:55.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="To-be-a-better-man"><a href="#To-be-a-better-man" class="headerlink" title="To be a better man"></a>To be a better man</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello , 个人博客搭好了，老规矩，先来个 Hello World！，然后，撸起袖子就是干！</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;To-be-a-better-man&quot;&gt;&lt;a href=&quot;#To-be-a-better-man&quot; class=&quot;headerlink&quot; title=&quot;To be a better man&quot;&gt;&lt;/a&gt;To be a better man&lt;/h2&gt;&lt;figure c
      
    
    </summary>
    
    
  </entry>
  
</feed>
